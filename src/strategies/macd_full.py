# src/strategies/macd_full.py
import asyncio
from typing import Dict, Any, Optional, Tuple
from enum import Enum
from .base_strategy import BaseStrategy
from ..indicators.macd import MACDIndicator
from ..utils.logger import logger
from ..database.database import db


class PositionState(Enum):
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    NO_POSITION = "no_position"
    LONG_POSITION = "long_position"
    SHORT_POSITION = "short_position"


class MACDFullStrategy(BaseStrategy):
    """
    MACD Full —Å—Ç—Ä–∞—Ç–µ–≥–∏—è - –≤—Å–µ–≥–¥–∞ –≤ –ø–æ–∑–∏—Ü–∏–∏
    –ü—Ä–∏ –±—ã—á—å–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–∏: –∑–∞–∫—Ä—ã—Ç—å —à–æ—Ä—Ç ‚Üí –æ—Ç–∫—Ä—ã—Ç—å –ª–æ–Ω–≥
    –ü—Ä–∏ –º–µ–¥–≤–µ–∂—å–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–∏: –∑–∞–∫—Ä—ã—Ç—å –ª–æ–Ω–≥ ‚Üí –æ—Ç–∫—Ä—ã—Ç—å —à–æ—Ä—Ç

    –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º–∏
    """

    def __init__(self, telegram_id: int):
        super().__init__(telegram_id, "MACD Full")
        self.position_state = PositionState.NO_POSITION
        self.current_symbol: Optional[str] = None
        self.position_size: Optional[str] = None
        self.retry_attempts = 3
        self.retry_delay = 1.0  # —Å–µ–∫—É–Ω–¥—ã

        # –ü—Ä–∞–≤–∏–ª–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ (–ø–æ–ª—É—á–∞–µ–º –∏–∑ API)
        self.trading_rules: Optional[Dict[str, Any]] = None

    async def _initialize_strategy_components(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MACD –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –¥–ª—è Full —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –¥–ª—è MACD Full
            entry_tf = self.user_settings.get('entry_timeframe')
            exit_tf = self.user_settings.get('exit_timeframe')

            if not entry_tf or not exit_tf:
                raise Exception("–¢–∞–π–º—Ñ—Ä–µ–π–º—ã –≤—Ö–æ–¥–∞ –∏ –≤—ã—Ö–æ–¥–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

            if entry_tf != exit_tf:
                raise Exception(f"–î–ª—è MACD Full —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã –≤—Ö–æ–¥–∞ –∏ –≤—ã—Ö–æ–¥–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏. "
                                f"–¢–µ–∫—É—â–∏–µ: –≤—Ö–æ–¥={entry_tf}, –≤—ã—Ö–æ–¥={exit_tf}")

            symbol = self.user_settings.get('trading_pair')
            if not symbol:
                raise Exception("–¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")

            logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MACD –¥–ª—è {symbol} –Ω–∞ {entry_tf}")
            logger.info(f"–ö–∞—Å—Ç–æ–º–Ω—ã–π –¢–§: {'–î–∞' if self._is_custom_timeframe(entry_tf) else '–ù–µ—Ç'}")

            # –°–æ–∑–¥–∞–µ–º MACD –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä (–∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –¢–§ –¥–ª—è –≤—Ö–æ–¥–∞ –∏ –≤—ã—Ö–æ–¥–∞)
            self.macd_indicator = MACDIndicator(
                symbol=symbol,
                entry_timeframe=entry_tf,
                exit_timeframe=entry_tf  # –í–ê–ñ–ù–û: –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –¢–§ –¥–ª—è Full —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            )

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º leverage
            leverage = self.user_settings.get('leverage')
            logger.info(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–µ—á–æ {leverage}x –¥–ª—è {symbol}")

            leverage_result = await self.bybit_client.leverage.set_leverage(symbol, leverage)
            if not leverage_result['success']:
                logger.warning(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–ª–µ—á–∞: {leverage_result.get('error', 'Unknown')}")

            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è —Å–∏–º–≤–æ–ª–∞
            await self._load_trading_rules(symbol)

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
            self.position_size = await self._calculate_position_size()
            if not self.position_size:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏")

            logger.info(f"–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {self.position_size}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Å–∏–º–≤–æ–ª
            self.current_symbol = symbol

            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ MACD Full: {e}")
            return False

    @staticmethod
    def _is_custom_timeframe(timeframe: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º –∫–∞—Å—Ç–æ–º–Ω—ã–º"""
        custom_timeframes = ['45m', '50m', '55m', '3h', '4h']
        return timeframe in custom_timeframes

    async def _load_trading_rules(self, symbol: str):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∞–≤–∏–ª —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
        try:
            logger.info(f"–ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è {symbol}")

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            self.trading_rules = {
                'min_qty': 0.01,
                'max_qty': 500.0,
                'qty_step': 0.01
            }

            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞
            try:
                params = {
                    'category': 'linear',
                    'symbol': symbol
                }

                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                import aiohttp
                timeout = aiohttp.ClientTimeout(total=10)
                async with aiohttp.ClientSession(timeout=timeout) as session:
                    headers = self.bybit_client.balance._get_headers("")
                    url = f"{self.bybit_client.balance.base_url}/v5/market/instruments-info"

                    async with session.get(url, params=params, headers=headers) as response:
                        if response.status == 200:
                            data = await response.json()

                            if data.get('retCode') == 0:
                                result = data.get('result', {})
                                symbols = result.get('list', [])

                                if symbols:
                                    symbol_info = symbols[0]
                                    lot_size_filter = symbol_info.get('lotSizeFilter', {})

                                    self.trading_rules = {
                                        'min_qty': float(lot_size_filter.get('minOrderQty', 0.01)),
                                        'max_qty': float(lot_size_filter.get('maxOrderQty', 500.0)),
                                        'qty_step': float(lot_size_filter.get('qtyStep', 0.01))
                                    }

                                    logger.info(f"–ü—Ä–∞–≤–∏–ª–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ {symbol}:")
                                    logger.info(f"  –ú–∏–Ω. –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {self.trading_rules['min_qty']}")
                                    logger.info(f"  –ú–∞–∫—Å. –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {self.trading_rules['max_qty']}")
                                    logger.info(f"  –®–∞–≥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: {self.trading_rules['qty_step']}")
                                    return

                            logger.warning(
                                f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è {symbol}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
                        else:
                            logger.warning(f"HTTP {response.status}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")

            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª —Ç–æ—Ä–≥–æ–≤–ª–∏: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")

            logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è {symbol}")

        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∞–≤–∏–ª —Ç–æ—Ä–≥–æ–≤–ª–∏: {e}")
            # –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            self.trading_rules = {
                'min_qty': 0.01,
                'max_qty': 500.0,
                'qty_step': 0.01
            }

    async def _start_strategy_logic(self):
        """–ó–∞–ø—É—Å–∫ –ª–æ–≥–∏–∫–∏ MACD Full —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º callback —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤ –≤—Ö–æ–¥–∞
            # –ü–æ—Å–∫–æ–ª—å–∫—É —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ entry callback
            self.macd_indicator.add_entry_callback(self._handle_macd_signal)

            # –ó–∞–ø—É—Å–∫–∞–µ–º MACD –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
            logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º MACD –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä...")
            await self.macd_indicator.start()

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
            await self._determine_initial_position_state()

            logger.info(f"üéØ MACD Full —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è {self.current_symbol}")
            logger.info(f"üìä –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏: {self.position_state.value}")
            logger.info(f"üìà –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º: {self.user_settings.get('entry_timeframe')}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ª–æ–≥–∏–∫–∏ MACD Full: {e}")
            raise

    async def _stop_strategy_logic(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–æ–≥–∏–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        try:
            if self.macd_indicator:
                logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º MACD –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä...")
                await self.macd_indicator.stop()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ª–æ–≥–∏–∫–∏ MACD Full: {e}")

    async def _handle_macd_signal(self, signal: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ MACD"""
        try:
            if not self.is_active:
                logger.warning("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª, –Ω–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞")
                return

            signal_type = signal.get('type')
            price = signal.get('price')
            crossover_type = signal.get('crossover_type')
            timeframe = signal.get('timeframe')

            logger.info(f"üìä MACD —Å–∏–≥–Ω–∞–ª –Ω–∞ {timeframe}: {signal_type} ({crossover_type}) –ø—Ä–∏ —Ü–µ–Ω–µ {price}")
            logger.info(f"üîÑ –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {self.position_state.value}")

            if signal_type == 'buy':  # –ë—ã—á—å–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ
                await self._handle_bullish_signal(signal)

            elif signal_type == 'sell':  # –ú–µ–¥–≤–µ–∂—å–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ
                await self._handle_bearish_signal(signal)

            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–∏–≥–Ω–∞–ª–∞: {signal_type}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ MACD —Å–∏–≥–Ω–∞–ª–∞: {e}")
            # –ù–ï –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö —Ç–æ—Ä–≥–æ–≤–ª–∏ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
            logger.warning("‚ö†Ô∏è –°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç—É, –æ–∂–∏–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Å–∏–≥–Ω–∞–ª")

    async def _handle_bullish_signal(self, signal: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã—á—å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ - –ø–µ—Ä–µ—Ö–æ–¥ –≤ –ª–æ–Ω–≥"""
        logger.info("üü¢ –ë—ã—á–∏–π —Å–∏–≥–Ω–∞–ª: –ø–µ—Ä–µ—Ö–æ–¥ –≤ LONG –ø–æ–∑–∏—Ü–∏—é")

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —à–æ—Ä—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
        if self.position_state == PositionState.SHORT_POSITION:
            logger.info("üìâ –ó–∞–∫—Ä—ã–≤–∞–µ–º SHORT –ø–æ–∑–∏—Ü–∏—é")
            close_success = await self._close_position_with_retry("SHORT")
            if not close_success:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å SHORT, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–µ LONG")
                return

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ª–æ–Ω–≥
        logger.info("üìà –û—Ç–∫—Ä—ã–≤–∞–µ–º LONG –ø–æ–∑–∏—Ü–∏—é")
        open_success = await self._open_long_position(signal)

        if open_success:
            self.position_state = PositionState.LONG_POSITION
            logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—à–ª–∏ –≤ LONG –ø–æ–∑–∏—Ü–∏—é")
        else:
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å LONG –ø–æ–∑–∏—Ü–∏—é, –æ—Å—Ç–∞–µ–º—Å—è –±–µ–∑ –ø–æ–∑–∏—Ü–∏–∏")
            self.position_state = PositionState.NO_POSITION

    async def _handle_bearish_signal(self, signal: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–≤–µ–∂—å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ - –ø–µ—Ä–µ—Ö–æ–¥ –≤ —à–æ—Ä—Ç"""
        logger.info("üî¥ –ú–µ–¥–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª: –ø–µ—Ä–µ—Ö–æ–¥ –≤ SHORT –ø–æ–∑–∏—Ü–∏—é")

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ª–æ–Ω–≥ –µ—Å–ª–∏ –µ—Å—Ç—å
        if self.position_state == PositionState.LONG_POSITION:
            logger.info("üìà –ó–∞–∫—Ä—ã–≤–∞–µ–º LONG –ø–æ–∑–∏—Ü–∏—é")
            close_success = await self._close_position_with_retry("LONG")
            if not close_success:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å LONG, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–µ SHORT")
                return

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —à–æ—Ä—Ç
        logger.info("üìâ –û—Ç–∫—Ä—ã–≤–∞–µ–º SHORT –ø–æ–∑–∏—Ü–∏—é")
        open_success = await self._open_short_position(signal)

        if open_success:
            self.position_state = PositionState.SHORT_POSITION
            logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—à–ª–∏ –≤ SHORT –ø–æ–∑–∏—Ü–∏—é")
        else:
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å SHORT –ø–æ–∑–∏—Ü–∏—é, –æ—Å—Ç–∞–µ–º—Å—è –±–µ–∑ –ø–æ–∑–∏—Ü–∏–∏")
            self.position_state = PositionState.NO_POSITION

    async def _close_position_with_retry(self, position_type: str) -> bool:
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        for attempt in range(1, self.retry_attempts + 1):
            try:
                logger.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt}/{self.retry_attempts} –∑–∞–∫—Ä—ã—Ç–∏—è {position_type} –ø–æ–∑–∏—Ü–∏–∏")

                result = await self.bybit_client.positions.close_position(self.current_symbol)

                if result['success']:
                    logger.info(f"‚úÖ {position_type} –ø–æ–∑–∏—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞")
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–¥–µ–ª–∫—É –≤ –∏—Å—Ç–æ—Ä–∏—é
                    await self._record_trade_close(position_type, result)
                    return True
                else:
                    error_msg = result.get('error', 'Unknown error')
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é: {error_msg}")

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏
                    if "position" in error_msg.lower() and "not found" in error_msg.lower():
                        logger.warning(f"üìä –ü–æ–∑–∏—Ü–∏—è —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {error_msg}")
                        return True  # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—Ö–æ–º –µ—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞

            except Exception as e:
                logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ (–ø–æ–ø—ã—Ç–∫–∞ {attempt}): {e}")

            if attempt < self.retry_attempts:
                logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {self.retry_delay}—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π")
                await asyncio.sleep(self.retry_delay)

        # –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å {position_type} –ø–æ–∑–∏—Ü–∏—é –∑–∞ {self.retry_attempts} –ø–æ–ø—ã—Ç–æ–∫")
        return False

    async def _open_long_position(self, signal: Dict[str, Any]) -> bool:
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –ª–æ–Ω–≥ –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º TP/SL –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            tp_price, sl_price = self._calculate_tp_sl_prices(signal['price'], 'long')

            result = await self.bybit_client.orders.buy_market(
                symbol=self.current_symbol,
                qty=self.position_size,
                take_profit=tp_price,
                stop_loss=sl_price
            )

            if result['success']:
                logger.info(f"‚úÖ LONG –ø–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞: {result['order_id']}")
                logger.info(f"üìä –†–∞–∑–º–µ—Ä: {self.position_size}")
                if tp_price:
                    logger.info(f"üéØ TP: {tp_price}, SL: {sl_price}")

                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–¥–µ–ª–∫—É –≤ –∏—Å—Ç–æ—Ä–∏—é
                await self._record_trade_open('LONG', signal, result)
                return True
            else:
                error_msg = result.get('error', 'Unknown error')
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è LONG: {error_msg}")
                return False

        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ LONG: {e}")
            return False

    async def _open_short_position(self, signal: Dict[str, Any]) -> bool:
        """–û—Ç–∫—Ä—ã—Ç–∏–µ —à–æ—Ä—Ç –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º TP/SL –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            tp_price, sl_price = self._calculate_tp_sl_prices(signal['price'], 'short')

            result = await self.bybit_client.orders.sell_market(
                symbol=self.current_symbol,
                qty=self.position_size,
                take_profit=tp_price,
                stop_loss=sl_price
            )

            if result['success']:
                logger.info(f"‚úÖ SHORT –ø–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞: {result['order_id']}")
                logger.info(f"üìä –†–∞–∑–º–µ—Ä: {self.position_size}")
                if tp_price:
                    logger.info(f"üéØ TP: {tp_price}, SL: {sl_price}")

                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–¥–µ–ª–∫—É –≤ –∏—Å—Ç–æ—Ä–∏—é
                await self._record_trade_open('SHORT', signal, result)
                return True
            else:
                error_msg = result.get('error', 'Unknown error')
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è SHORT: {error_msg}")
                return False

        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ SHORT: {e}")
            return False

    def _calculate_tp_sl_prices(self, entry_price: float, side: str) -> Tuple[Optional[float], Optional[float]]:
        """–†–∞—Å—á–µ—Ç —Ü–µ–Ω TP/SL"""
        tp_sl_info = db.get_tp_sl_info(self.telegram_id)

        if not tp_sl_info['enabled']:
            return None, None

        take_profit_points = tp_sl_info.get('take_profit')
        stop_loss_points = tp_sl_info.get('stop_loss')

        if not take_profit_points or not stop_loss_points:
            return None, None

        if side == 'long':
            tp_price = entry_price + take_profit_points
            sl_price = entry_price - stop_loss_points
        else:  # short
            tp_price = entry_price - take_profit_points
            sl_price = entry_price + stop_loss_points

        return tp_price, sl_price

    async def _calculate_position_size(self) -> Optional[str]:
        """
        –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ª—É—á—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        """
        try:
            position_info = db.get_position_size_info(self.telegram_id)
            symbol = self.user_settings.get('trading_pair')

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            price_result = await self.bybit_client.price.get_price(symbol)
            if not price_result['success']:
                raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É {symbol}: {price_result.get('error')}")

            current_price = price_result['price']
            logger.info(f"üí≤ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ {symbol}: {current_price}")

            if position_info['type'] == 'fixed_usdt':
                # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞ –≤ USDT
                usdt_amount = position_info['value']
                logger.info(f"üí∞ –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞: {usdt_amount} USDT")

            elif position_info['type'] == 'percentage':
                # –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –±–∞–ª–∞–Ω—Å–∞
                balance_result = await self.bybit_client.balance.get_balance()
                balance = balance_result.get('free_usdt', 0)

                if balance <= 0:
                    raise Exception("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ")

                usdt_amount = balance * (position_info['value'] / 100)
                logger.info(f"üí∞ {position_info['value']}% –æ—Ç –±–∞–ª–∞–Ω—Å–∞ {balance:.2f} = {usdt_amount:.2f} USDT")

            else:
                raise Exception("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏")

            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–ª–µ—á–æ
            leverage = self.user_settings.get('leverage', 1)
            total_volume_usdt = usdt_amount * leverage
            logger.info(f"üìä –û–±—ä–µ–º —Å –ø–ª–µ—á–æ–º {leverage}x: {total_volume_usdt} USDT")

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            base_asset = symbol.replace('USDT', '')
            quantity = total_volume_usdt / current_price
            logger.info(f"‚öñÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ {base_asset} (—Ç–æ—á–Ω–æ–µ): {quantity:.8f}")

            # –û–∫—Ä—É–≥–ª—è–µ–º —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º —Ç–æ—Ä–≥–æ–≤–ª–∏
            if self.trading_rules:
                min_qty = self.trading_rules.get('min_qty', 0.01)
                qty_step = self.trading_rules.get('qty_step', 0.01)

                logger.info(f"üìè –ü—Ä–∞–≤–∏–ª–∞: –º–∏–Ω={min_qty}, —à–∞–≥={qty_step}")

                # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø–æ —à–∞–≥—É
                corrected_qty = round(quantity / qty_step) * qty_step
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ–∫—Ä—É–≥–ª—è–µ–º –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫ —Ç–æ—á–Ω–æ—Å—Ç–∏
                corrected_qty = round(corrected_qty, 8)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º—É–º
                if corrected_qty < min_qty:
                    corrected_qty = min_qty
                    logger.warning(f"‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–æ –º–∏–Ω–∏–º—É–º–∞: {corrected_qty}")

                logger.info(f"üéØ –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {corrected_qty} {base_asset}")
                return str(corrected_qty)
            else:
                # Fallback: –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Ä–∞–∑—É–º–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–Ω–∞–∫–æ–≤
                rounded_qty = round(quantity, 6)
                if rounded_qty < 0.000001:
                    rounded_qty = 0.000001

                logger.info(f"üéØ –û–∫—Ä—É–≥–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (fallback): {rounded_qty} {base_asset}")
                return str(rounded_qty)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏: {e}")
            return None

    async def _determine_initial_position_state(self):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏...")
            positions_result = await self.bybit_client.positions.get_positions(self.current_symbol)

            if positions_result['success'] and positions_result['positions']:
                position = positions_result['positions'][0]
                side = position['side']
                size = position['size']

                if side == 'Buy':
                    self.position_state = PositionState.LONG_POSITION
                    logger.info(f"üìà –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è LONG –ø–æ–∑–∏—Ü–∏—è: {size}")
                elif side == 'Sell':
                    self.position_state = PositionState.SHORT_POSITION
                    logger.info(f"üìâ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è SHORT –ø–æ–∑–∏—Ü–∏—è: {size}")
            else:
                self.position_state = PositionState.NO_POSITION
                logger.info("üìä –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}")
            self.position_state = PositionState.NO_POSITION
            logger.warning("‚ö†Ô∏è –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ '–Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–∏' –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")

    async def _record_trade_open(self, side: str, signal: Dict[str, Any], order_result: Dict[str, Any]):
        """–ó–∞–ø–∏—Å—å –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        try:
            if self.strategy_id and self.user_id:
                trade_id = db.create_trade_record(
                    user_id=self.user_id,
                    strategy_id=self.strategy_id,
                    symbol=self.current_symbol,
                    side=side,
                    quantity=self.position_size,
                    order_id=order_result.get('order_id')
                )
                logger.info(f"üìù –ó–∞–ø–∏—Å–∞–Ω–∞ —Å–¥–µ–ª–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è: ID={trade_id}, —Å–∏–≥–Ω–∞–ª: {signal['type']}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Å–¥–µ–ª–∫–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è: {e}")

    async def _record_trade_close(self, side: str, close_result: Dict[str, Any]):
        """–ó–∞–ø–∏—Å—å –∑–∞–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        try:
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Å–¥–µ–ª–∫–∏ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
            logger.info(f"üìù –°–¥–µ–ª–∫–∞ {side} –∑–∞–∫—Ä—ã—Ç–∞: {close_result.get('order_id')}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏: {e}")

    def get_position_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏"""
        return {
            'position_state': self.position_state.value,
            'symbol': self.current_symbol,
            'position_size': self.position_size
        }