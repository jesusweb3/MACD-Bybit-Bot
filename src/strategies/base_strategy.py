# src/strategies/base_strategy.py
import asyncio
from abc import ABC, abstractmethod
from enum import Enum
from typing import Dict, Any, Optional
from datetime import datetime, UTC
from ..utils.logger import logger
from ..database.database import db
from ..exchange.bybit import BybitClient
from ..indicators.macd import MACDIndicator


class StrategyStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    WAITING = "waiting"
    RUNNING = "running"
    STOPPED = "stopped"
    ERROR = "error"


class BaseStrategy(ABC):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""

    def __init__(self, telegram_id: int, strategy_name: str):
        self.telegram_id = telegram_id
        self.strategy_name = strategy_name
        self.status = StrategyStatus.WAITING
        self.strategy_id: Optional[int] = None
        self.start_time: Optional[datetime] = None
        self.stop_time: Optional[datetime] = None
        self.error_message: Optional[str] = None

        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        self.bybit_client: Optional[BybitClient] = None
        self.macd_indicator: Optional[MACDIndicator] = None

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_settings: Optional[Dict[str, Any]] = None

        # –§–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        self.is_active = False

    async def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        try:
            logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {self.strategy_name} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.telegram_id}")

            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.user_settings = db.get_user_settings(self.telegram_id)
            if not self.user_settings:
                raise Exception("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            if not self._validate_settings():
                return False

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Bybit –∫–ª–∏–µ–Ω—Ç
            api_key = self.user_settings.get('bybit_api_key')
            secret_key = self.user_settings.get('bybit_secret_key')

            if not api_key or not secret_key:
                raise Exception("API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

            self.bybit_client = BybitClient(api_key, secret_key)

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            connection_test = await self.bybit_client.balance.test_connection()
            if not connection_test:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Bybit API")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            if not await self._initialize_strategy_components():
                return False

            logger.info(f"‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è {self.strategy_name} —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
            self.error_message = str(e)
            self.status = StrategyStatus.ERROR
            return False

    async def start(self) -> bool:
        """–ó–∞–ø—É—Å–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        try:
            if self.is_active:
                logger.warning("–°—Ç—Ä–∞—Ç–µ–≥–∏—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞")
                return False

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
            if self.status == StrategyStatus.WAITING:
                if not await self.initialize():
                    return False

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –≤ –ë–î
            self.strategy_id = db.create_active_strategy(
                telegram_id=self.telegram_id,
                strategy_name=self.strategy_name
            )

            self.start_time = datetime.now(UTC)
            self.status = StrategyStatus.RUNNING
            self.is_active = True

            logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {self.strategy_name} (ID: {self.strategy_id})")

            # –ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–≥–∏–∫—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            await self._start_strategy_logic()

            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
            self.error_message = str(e)
            self.status = StrategyStatus.ERROR
            return False

    async def stop(self, reason: str = "Manual stop") -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        try:
            if not self.is_active:
                logger.warning("–°—Ç—Ä–∞—Ç–µ–≥–∏—è —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                return True

            logger.info(f"‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {self.strategy_name}: {reason}")

            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–≥–∏–∫—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            await self._stop_strategy_logic()

            self.is_active = False
            self.status = StrategyStatus.STOPPED
            self.stop_time = datetime.now(UTC)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
            if self.strategy_id:
                db.update_active_strategy_status(self.strategy_id, "stopped")

            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            await self._cleanup()

            logger.info(f"‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è {self.strategy_name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
            self.status = StrategyStatus.ERROR
            return False

    async def _cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            if self.macd_indicator:
                await self.macd_indicator.close()
                self.macd_indicator = None

            if self.bybit_client:
                await self.bybit_client.close()
                self.bybit_client = None

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")

    def _validate_settings(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        required_fields = [
            'bybit_api_key', 'bybit_secret_key', 'trading_pair',
            'leverage', 'entry_timeframe', 'exit_timeframe'
        ]

        for field in required_fields:
            if not self.user_settings.get(field):
                logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞: {field}")
                self.error_message = f"–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ: {field}"
                return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
        position_size_info = db.get_position_size_info(self.telegram_id)
        if not position_size_info.get('value') or position_size_info.get('value') <= 0:
            logger.error("–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            self.error_message = "–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
            return False

        return True

    def get_status_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–∞—Ç—É—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        return {
            'strategy_name': self.strategy_name,
            'status': self.status.value,
            'is_active': self.is_active,
            'start_time': self.start_time.isoformat() if self.start_time else None,
            'stop_time': self.stop_time.isoformat() if self.stop_time else None,
            'error_message': self.error_message,
            'strategy_id': self.strategy_id
        }

    @abstractmethod
    async def _initialize_strategy_components(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        pass

    @abstractmethod
    async def _start_strategy_logic(self):
        """–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        pass

    @abstractmethod
    async def _stop_strategy_logic(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–æ–≥–∏–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        pass