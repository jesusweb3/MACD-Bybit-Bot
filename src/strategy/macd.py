# src/strategy/macd.py
import asyncio
from typing import Dict, Any, Optional, Union
from enum import Enum
from datetime import datetime, timedelta
from ..indicators.macd_5m import MACD5mIndicator
from ..indicators.macd_45m import MACD45mIndicator
from ..exchange.bybit import BybitClient
from ..database.database import db
from ..utils.logger import logger
from ..utils.helpers import get_msk_time, format_msk_time


class PositionState(Enum):
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    NO_POSITION = "no_position"
    LONG_POSITION = "long_position"
    SHORT_POSITION = "short_position"


class StrategyState(Enum):
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    WAITING_FIRST_SIGNAL = "waiting_first_signal"  # –ñ–¥–µ–º –ø–µ—Ä–≤–æ–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ
    POSITION_OPENED = "position_opened"  # –ü–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞, –∂–¥–µ–º –∑–∞–∫—Ä—ã—Ç–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
    CHECKING_CONFIRMATION = "checking_confirmation"  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
    WAITING_REVERSE_SIGNAL = "waiting_reverse_signal"  # –ñ–¥–µ–º –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è


class MACDStrategy:

    def __init__(self, telegram_id: int):
        self.telegram_id = telegram_id
        self.strategy_name = "MACD Full (Interval Filter)"
        self.position_state = PositionState.NO_POSITION
        self.strategy_state = StrategyState.WAITING_FIRST_SIGNAL
        self.is_active = False

        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        self.bybit_client: Optional[BybitClient] = None
        self.macd_indicator: Optional[Union[MACD5mIndicator, MACD45mIndicator]] = None

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.user_settings: Optional[Dict[str, Any]] = None
        self.user_id: Optional[int] = None
        self.strategy_id: Optional[int] = None
        self.symbol: Optional[str] = None
        self.timeframe: Optional[str] = None

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
        self.retry_attempts = 3
        self.retry_delay = 1.0

        # –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞
        self.start_time: Optional[datetime] = None
        self.error_message: Optional[str] = None

        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞
        self.total_signals_received = 0
        self.signals_processed = 0
        self.last_signal_time: Optional[datetime] = None

        # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π
        self.current_interval_start: Optional[datetime] = None
        self.first_signal_in_interval: Optional[Dict[str, Any]] = None
        self.last_interval_macd_state: Optional[Dict[str, Any]] = None  # –°–æ—Å—Ç–æ—è–Ω–∏–µ MACD –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        self.signals_blocked_until_interval_close = False

        # –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        self.min_operation_interval_seconds = 5  # –ú–∏–Ω–∏–º—É–º 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
        self.last_operation_time: Optional[datetime] = None

    async def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        try:
            logger.info(f"üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MACD —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–Ω–æ–≤–∞—è –ª–æ–≥–∏–∫–∞) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.telegram_id}")

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            user = db.get_or_create_user(self.telegram_id)
            self.user_id = user['id']

            self.user_settings = db.get_user_settings(self.telegram_id)
            if not self.user_settings:
                raise Exception("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            if not self._validate_settings():
                return False

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            self.symbol = self.user_settings.get('trading_pair')
            self.timeframe = self.user_settings.get('timeframe')

            logger.info(f"üéØ –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º: {self.timeframe}")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Bybit –∫–ª–∏–µ–Ω—Ç
            api_key = self.user_settings.get('bybit_api_key')
            secret_key = self.user_settings.get('bybit_secret_key')

            self.bybit_client = BybitClient(api_key, secret_key)

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            async with self.bybit_client as client:
                connection_test = await client.balance.test_connection()
                if not connection_test:
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Bybit API")

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–µ—á–æ
            leverage = self.user_settings.get('leverage')
            async with self.bybit_client as client:
                leverage_result = await client.leverage.set_leverage(self.symbol, leverage)
                if leverage_result['success']:
                    logger.info(f"‚ö° –ü–ª–µ—á–æ {leverage}x —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è {self.symbol}")
                else:
                    logger.info(f"‚ö° –ü–ª–µ—á–æ {leverage}x —É–∂–µ –±—ã–ª–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è {self.symbol}")

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
            test_position_size = await self._calculate_position_size()
            if not test_position_size:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏")

            logger.info(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {test_position_size}")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π MACD –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
            if self.timeframe == '5m':
                logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MACD 5m –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞")
                self.macd_indicator = MACD5mIndicator(symbol=self.symbol, limit=200)
            elif self.timeframe == '45m':
                logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MACD 45m –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞")
                self.macd_indicator = MACD45mIndicator(symbol=self.symbol, limit=200)
            else:
                raise Exception(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º: {self.timeframe}")

            logger.info(f"‚úÖ MACD —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: {self.symbol} {self.timeframe}")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MACD —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
            self.error_message = str(e)
            return False

    def _validate_settings(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not self.user_settings:
            logger.error("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            self.error_message = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            return False

        required_fields = [
            'bybit_api_key', 'bybit_secret_key', 'trading_pair',
            'leverage', 'timeframe'
        ]

        missing_fields = []
        for field in required_fields:
            value = self.user_settings.get(field)
            if not value or (isinstance(value, str) and not value.strip()):
                missing_fields.append(field)

        if missing_fields:
            logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {', '.join(missing_fields)}")
            self.error_message = f"–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ: {', '.join(missing_fields)}"
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
        position_size_info = db.get_position_size_info(self.telegram_id)
        if not position_size_info.get('value') or position_size_info.get('value') <= 0:
            logger.error("‚ùå –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            self.error_message = "–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º
        timeframe = self.user_settings.get('timeframe')
        if timeframe not in ['5m', '45m']:
            logger.error(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º: {timeframe}")
            self.error_message = f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º: {timeframe}"
            return False

        return True

    async def start(self) -> bool:
        """–ó–∞–ø—É—Å–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        try:
            if self.is_active:
                logger.warning("‚ö†Ô∏è –°—Ç—Ä–∞—Ç–µ–≥–∏—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞")
                return False

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
            if not await self.initialize():
                return False

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –≤ –ë–î
            self.strategy_id = db.create_active_strategy(
                user_id=self.user_id,
                strategy_name=self.strategy_name
            )

            self.start_time = get_msk_time()
            self.is_active = True

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            self.strategy_state = StrategyState.WAITING_FIRST_SIGNAL
            self.current_interval_start = None
            self.first_signal_in_interval = None
            self.last_interval_macd_state = None
            self.signals_blocked_until_interval_close = False

            logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ MACD —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–Ω–æ–≤–∞—è –ª–æ–≥–∏–∫–∞) (ID: {self.strategy_id})")

            # –î–æ–±–∞–≤–ª—è–µ–º callback –¥–ª—è MACD —Å–∏–≥–Ω–∞–ª–æ–≤
            self.macd_indicator.add_callback(self._handle_macd_signal)

            # –ó–∞–ø—É—Å–∫–∞–µ–º MACD –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
            await self.macd_indicator.start()

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
            await self._determine_initial_position_state()

            logger.info(f"‚úÖ MACD —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∑–∞–ø—É—â–µ–Ω–∞: {self.symbol} {self.timeframe}")
            logger.info(f"üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏: {self.position_state.value}")
            logger.info(f"üéØ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞: {self.strategy_state.value}")
            logger.info(f"üíπ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –ø–µ—Ä–µ–¥ –∫–∞–∂–¥–æ–π —Å–¥–µ–ª–∫–æ–π")
            logger.info(f"üîß –î–≤–∏–∂–æ–∫: {'MACD 5m' if self.timeframe == '5m' else 'MACD 45m'}")
            logger.info(f"üîÑ –õ–æ–≥–∏–∫–∞: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º")

            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ MACD —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
            self.error_message = str(e)
            self.is_active = False
            return False

    async def stop(self, reason: str = "Manual stop") -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        try:
            if not self.is_active:
                return True

            logger.info(f"‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ MACD —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–Ω–æ–≤–∞—è –ª–æ–≥–∏–∫–∞): {reason}")

            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º MACD –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
            if self.macd_indicator:
                await self.macd_indicator.stop()

            self.is_active = False

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
            if self.strategy_id:
                db.update_active_strategy_status(self.strategy_id, "stopped")

            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            await self._cleanup()

            # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            logger.info(
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –ø–æ–ª—É—á–µ–Ω–æ {self.total_signals_received} —Å–∏–≥–Ω–∞–ª–æ–≤, –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {self.signals_processed}"
            )
            logger.info(f"‚úÖ MACD —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ MACD —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
            return False

    async def _cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            if self.macd_indicator:
                # –ù–æ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –Ω–µ —Ç—Ä–µ–±—É—é—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
                self.macd_indicator = None

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")

    def _is_new_interval(self, signal_timestamp: datetime) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞"""
        if self.timeframe == '5m':
            # –î–ª—è 5m –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–Ω—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç (00, 05, 10, 15, ...)
            current_interval_minute = (signal_timestamp.minute // 5) * 5
            current_interval_start = signal_timestamp.replace(
                minute=current_interval_minute,
                second=0,
                microsecond=0
            )
        elif self.timeframe == '45m':
            # –î–ª—è 45m –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
            if hasattr(self.macd_indicator, 'get_45m_interval_start'):
                current_interval_start = self.macd_indicator.get_45m_interval_start(signal_timestamp)
            else:
                # Fallback –¥–ª—è 45m
                day_start = signal_timestamp.replace(hour=0, minute=0, second=0, microsecond=0)
                minutes_from_start = (signal_timestamp - day_start).total_seconds() / 60
                interval_number = int(minutes_from_start // 45)
                current_interval_start = day_start + timedelta(minutes=interval_number * 45)
        else:
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª
        if self.current_interval_start is None:
            # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ - –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
            self.current_interval_start = current_interval_start
            logger.info(
                f"üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: —Ç–µ–∫—É—â–∏–π {self.timeframe} –∏–Ω—Ç–µ—Ä–≤–∞–ª {current_interval_start.strftime('%H:%M')}")
            return False
        elif self.current_interval_start != current_interval_start:
            # –ò–Ω—Ç–µ—Ä–≤–∞–ª –∏–∑–º–µ–Ω–∏–ª—Å—è
            old_interval = self.current_interval_start
            self.current_interval_start = current_interval_start

            logger.info(
                f"üîÑ –ù–æ–≤—ã–π {self.timeframe} –∏–Ω—Ç–µ—Ä–≤–∞–ª: {old_interval.strftime('%H:%M')} -> {current_interval_start.strftime('%H:%M')}")
            return True

        return False

    def _check_interval_by_time(self, signal_timestamp: datetime) -> bool:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏"""
        if self.current_interval_start is None:
            return False

        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–≥–¥–∞ –¥–æ–ª–∂–µ–Ω –∑–∞–∫—Ä—ã—Ç—å—Å—è —Ç–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        if self.timeframe == '5m':
            interval_end = self.current_interval_start + timedelta(minutes=5)
        elif self.timeframe == '45m':
            interval_end = self.current_interval_start + timedelta(minutes=45)
        else:
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—à–ª–æ –ª–∏ –≤—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        if signal_timestamp >= interval_end:
            logger.info(
                f"‚è∞ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –∏–Ω—Ç–µ—Ä–≤–∞–ª {self.current_interval_start.strftime('%H:%M')} –¥–æ–ª–∂–µ–Ω –±—ã–ª –∑–∞–∫—Ä—ã—Ç—å—Å—è –≤ {interval_end.strftime('%H:%M')}")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
            if self.timeframe == '5m':
                new_interval_minute = (signal_timestamp.minute // 5) * 5
                self.current_interval_start = signal_timestamp.replace(
                    minute=new_interval_minute,
                    second=0,
                    microsecond=0
                )
            elif self.timeframe == '45m':
                if hasattr(self.macd_indicator, 'get_45m_interval_start'):
                    self.current_interval_start = self.macd_indicator.get_45m_interval_start(signal_timestamp)
                else:
                    day_start = signal_timestamp.replace(hour=0, minute=0, second=0, microsecond=0)
                    minutes_from_start = (signal_timestamp - day_start).total_seconds() / 60
                    interval_number = int(minutes_from_start // 45)
                    self.current_interval_start = day_start + timedelta(minutes=interval_number * 45)

            logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞: {self.current_interval_start.strftime('%H:%M')}")
            return True

        return False

    async def _handle_macd_signal(self, signal: Dict[str, Any]):
        """–ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º"""
        try:
            if not self.is_active:
                logger.warning("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª, –Ω–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞")
                return

            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
            self.total_signals_received += 1
            self.last_signal_time = get_msk_time()

            signal_type = signal.get('type')
            price = signal.get('price')
            crossover_type = signal.get('crossover_type')
            timeframe = signal.get('timeframe')
            signal_timestamp = signal.get('timestamp')

            current_time_msk = format_msk_time()
            logger.info(
                f"üéØ MACD —Å–∏–≥–Ω–∞–ª #{self.total_signals_received}: {signal_type.upper()} ({crossover_type}) "
                f"–ø—Ä–∏ —Ü–µ–Ω–µ {price} (TF: {timeframe})"
            )
            logger.info(
                f"üìä –ü–æ–∑–∏—Ü–∏—è: {self.position_state.value} | –ê–ª–≥–æ—Ä–∏—Ç–º: {self.strategy_state.value} | –í—Ä–µ–º—è: {current_time_msk} –ú–°–ö")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π –ª–∏ —ç—Ç–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª
            is_new_interval = self._is_new_interval(signal_timestamp)

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            if not is_new_interval:
                is_new_interval = self._check_interval_by_time(signal_timestamp)

            if is_new_interval:
                await self._handle_new_interval()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—â–∏—Ç—É –æ—Ç —á–∞—Å—Ç—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            if self.last_operation_time:
                time_since_last = (get_msk_time() - self.last_operation_time).total_seconds()
                if time_since_last < self.min_operation_interval_seconds:
                    logger.warning(
                        f"‚ö†Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∞ (–∑–∞—â–∏—Ç–∞): {time_since_last:.1f}—Å < {self.min_operation_interval_seconds}—Å"
                    )
                    return

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            if self.strategy_state == StrategyState.WAITING_FIRST_SIGNAL:
                await self._handle_first_signal_in_interval(signal)
            elif self.strategy_state == StrategyState.WAITING_REVERSE_SIGNAL:
                await self._handle_reverse_signal(signal)
            else:
                # –í —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö POSITION_OPENED –∏ CHECKING_CONFIRMATION –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã
                logger.info(f"üîí –°–∏–≥–Ω–∞–ª –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω: —Å–æ—Å—Ç–æ—è–Ω–∏–µ {self.strategy_state.value}")

            self.signals_processed += 1
            logger.info(f"‚úÖ –°–∏–≥–Ω–∞–ª #{self.signals_processed} –æ–±—Ä–∞–±–æ—Ç–∞–Ω")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ MACD —Å–∏–≥–Ω–∞–ª–∞: {e}")

    async def _handle_new_interval(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞"""
        logger.info(f"üÜï –ù–∞—á–∞—Ç –Ω–æ–≤—ã–π {self.timeframe} –∏–Ω—Ç–µ—Ä–≤–∞–ª")

        # –ï—Å–ª–∏ –±—ã–ª–∞ –ø–æ–∑–∏—Ü–∏—è –∏ –∂–¥–∞–ª–∏ –∑–∞–∫—Ä—ã—Ç–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        if self.strategy_state == StrategyState.POSITION_OPENED:
            await self._check_signal_confirmation()

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ –ø–µ—Ä–≤—ã–π —Å–∏–≥–Ω–∞–ª
        self.signals_blocked_until_interval_close = False
        self.first_signal_in_interval = None

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –æ–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–∏
        if self.position_state == PositionState.NO_POSITION:
            self.strategy_state = StrategyState.WAITING_FIRST_SIGNAL
            logger.info("üéØ –°–æ—Å—Ç–æ—è–Ω–∏–µ: –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –≤ –Ω–æ–≤–æ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ")

    async def _handle_first_signal_in_interval(self, signal: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ"""
        logger.info("ü•á –ü–µ—Ä–≤—ã–π —Å–∏–≥–Ω–∞–ª –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ - –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—ã–π —Å–∏–≥–Ω–∞–ª
        self.first_signal_in_interval = signal.copy()

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
        if signal['type'] == 'buy':
            success = await self._open_long_position(signal)
            if success:
                self.position_state = PositionState.LONG_POSITION
        else:
            success = await self._open_short_position(signal)
            if success:
                self.position_state = PositionState.SHORT_POSITION

        if success:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–ø–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞, –∂–¥–µ–º –∑–∞–∫—Ä—ã—Ç–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞"
            self.strategy_state = StrategyState.POSITION_OPENED
            self.signals_blocked_until_interval_close = True
            logger.info("üîí –ü–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞, —Å–∏–≥–Ω–∞–ª—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞")

    async def _handle_reverse_signal(self, signal: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ (–∫–æ–≥–¥–∞ –∂–¥–µ–º —Ä–∞–∑–≤–æ—Ä–æ—Ç)"""
        if not self.first_signal_in_interval:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞—Ç–Ω—ã–π —Å–∏–≥–Ω–∞–ª
        first_signal_type = self.first_signal_in_interval['type']
        current_signal_type = signal['type']

        if first_signal_type != current_signal_type:
            logger.info(f"üîÑ –û–±—Ä–∞—Ç–Ω—ã–π —Å–∏–≥–Ω–∞–ª –ø–æ–ª—É—á–µ–Ω: {first_signal_type} -> {current_signal_type}")

            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—É—é
            if self.position_state == PositionState.LONG_POSITION:
                await self._close_position_with_retry("LONG")
                success = await self._open_short_position(signal)
                if success:
                    self.position_state = PositionState.SHORT_POSITION
            elif self.position_state == PositionState.SHORT_POSITION:
                await self._close_position_with_retry("SHORT")
                success = await self._open_long_position(signal)
                if success:
                    self.position_state = PositionState.LONG_POSITION

            if success:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π —Å–∏–≥–Ω–∞–ª –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
                self.first_signal_in_interval = signal.copy()
                self.strategy_state = StrategyState.POSITION_OPENED
                self.signals_blocked_until_interval_close = True
                logger.info("‚úÖ –ü–æ–∑–∏—Ü–∏—è —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–∞, –∂–¥–µ–º –∑–∞–∫—Ä—ã—Ç–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞")
        else:
            logger.info(f"üîÑ –°–∏–≥–Ω–∞–ª –≤ —Ç–æ–º –∂–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")

    async def _check_signal_confirmation(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞"""
        if not self.first_signal_in_interval:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ MACD
        current_macd_values = self.macd_indicator.get_current_macd_values()
        if not current_macd_values:
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è MACD")
            return

        current_macd = current_macd_values['macd_line']
        current_signal_line = current_macd_values['signal_line']
        first_signal_type = self.first_signal_in_interval['type']

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å –ª–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ
        if first_signal_type == 'buy':
            # –î–ª—è –±—ã—á—å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ MACD –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã—à–µ signal
            is_confirmed = current_macd > current_signal_line
        else:
            # –î–ª—è –º–µ–¥–≤–µ–∂—å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ MACD –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∏–∂–µ signal
            is_confirmed = current_macd < current_signal_line

        logger.info(
            f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è {first_signal_type} —Å–∏–≥–Ω–∞–ª–∞: "
            f"MACD={current_macd:.6f}, Signal={current_signal_line:.6f}, "
            f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {'–î–ê' if is_confirmed else '–ù–ï–¢'}"
        )

        if is_confirmed:
            # –°–∏–≥–Ω–∞–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω - –∂–¥–µ–º –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
            self.strategy_state = StrategyState.WAITING_REVERSE_SIGNAL
            logger.info("‚úÖ –°–∏–≥–Ω–∞–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –∂–¥–µ–º –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è")
        else:
            # –°–∏–≥–Ω–∞–ª –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω - —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
            logger.info("‚ùå –°–∏–≥–Ω–∞–ª –ù–ï –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é")
            await self._reverse_position()

    async def _reverse_position(self):
        """–†–∞–∑–≤–æ—Ä–æ—Ç –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–∏ –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–º —Å–∏–≥–Ω–∞–ª–µ"""
        if self.position_state == PositionState.LONG_POSITION:
            logger.info("üîÑ –†–∞–∑–≤–æ—Ä–æ—Ç: LONG -> SHORT")
            await self._close_position_with_retry("LONG")
            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π —Å–∏–≥–Ω–∞–ª –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è SHORT
            reverse_signal = {
                'type': 'sell',
                'price': self.macd_indicator.get_current_macd_values()['price'],
                'timestamp': get_msk_time()
            }
            success = await self._open_short_position(reverse_signal)
            if success:
                self.position_state = PositionState.SHORT_POSITION
                self.first_signal_in_interval = reverse_signal.copy()

        elif self.position_state == PositionState.SHORT_POSITION:
            logger.info("üîÑ –†–∞–∑–≤–æ—Ä–æ—Ç: SHORT -> LONG")
            await self._close_position_with_retry("SHORT")
            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π —Å–∏–≥–Ω–∞–ª –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è LONG
            reverse_signal = {
                'type': 'buy',
                'price': self.macd_indicator.get_current_macd_values()['price'],
                'timestamp': get_msk_time()
            }
            success = await self._open_long_position(reverse_signal)
            if success:
                self.position_state = PositionState.LONG_POSITION
                self.first_signal_in_interval = reverse_signal.copy()

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
        self.strategy_state = StrategyState.POSITION_OPENED
        self.signals_blocked_until_interval_close = True
        logger.info("üîí –ü–æ–∑–∏—Ü–∏—è —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–∞, –∂–¥–µ–º –∑–∞–∫—Ä—ã—Ç–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")

    async def _close_position_with_retry(self, position_type: str) -> bool:
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        for attempt in range(1, self.retry_attempts + 1):
            try:
                async with self.bybit_client as client:
                    result = await client.positions.close_position(self.symbol)

                if result['success']:
                    logger.info(f"‚úÖ {position_type} –ø–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞")
                    await self._record_trade_close(position_type, result)
                    self.last_operation_time = get_msk_time()
                    return True
                else:
                    error_msg = result.get('error', 'Unknown error')

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏
                    if "position" in error_msg.lower() and "not found" in error_msg.lower():
                        logger.info(f"üìä –ü–æ–∑–∏—Ü–∏—è —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞: {error_msg}")
                        return True

                    logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt}: {error_msg}")

            except Exception as e:
                logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ (–ø–æ–ø—ã—Ç–∫–∞ {attempt}): {e}")

            if attempt < self.retry_attempts:
                await asyncio.sleep(self.retry_delay)

        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å {position_type} –ø–æ–∑–∏—Ü–∏—é –∑–∞ {self.retry_attempts} –ø–æ–ø—ã—Ç–æ–∫")
        return False

    async def _open_long_position(self, signal: Dict[str, Any]) -> bool:
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –ª–æ–Ω–≥ –ø–æ–∑–∏—Ü–∏–∏ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º —Ä–∞–∑–º–µ—Ä–æ–º"""
        try:
            # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π
            current_position_size = await self._calculate_position_size()
            if not current_position_size:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏")
                return False

            logger.info(f"üíπ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {current_position_size} (—Ü–µ–Ω–∞: {signal['price']})")

            async with self.bybit_client as client:
                result = await client.orders.buy_market(
                    symbol=self.symbol,
                    qty=current_position_size
                )

            if result['success']:
                logger.info(f"‚úÖ LONG –ø–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞: {result['order_id']}")
                await self._record_trade_open('LONG', signal, result)
                self.last_operation_time = get_msk_time()
                return True
            else:
                error_msg = result.get('error', 'Unknown error')
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è LONG: {error_msg}")
                return False

        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ LONG: {e}")
            return False

    async def _open_short_position(self, signal: Dict[str, Any]) -> bool:
        """–û—Ç–∫—Ä—ã—Ç–∏–µ —à–æ—Ä—Ç –ø–æ–∑–∏—Ü–∏–∏ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º —Ä–∞–∑–º–µ—Ä–æ–º"""
        try:
            # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π
            current_position_size = await self._calculate_position_size()
            if not current_position_size:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏")
                return False

            logger.info(f"üíπ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {current_position_size} (—Ü–µ–Ω–∞: {signal['price']})")

            async with self.bybit_client as client:
                result = await client.orders.sell_market(
                    symbol=self.symbol,
                    qty=current_position_size
                )

            if result['success']:
                logger.info(f"‚úÖ SHORT –ø–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞: {result['order_id']}")
                await self._record_trade_open('SHORT', signal, result)
                self.last_operation_time = get_msk_time()
                return True
            else:
                error_msg = result.get('error', 'Unknown error')
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è SHORT: {error_msg}")
                return False

        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ SHORT: {e}")
            return False

    async def _calculate_position_size(self) -> Optional[str]:
        """–†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π"""
        try:
            position_info = db.get_position_size_info(self.telegram_id)

            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
            async with self.bybit_client as client:
                price_result = await client.price.get_price(self.symbol)
                if not price_result['success']:
                    raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É {self.symbol}")

                current_price = price_result['price']

            if position_info['type'] == 'fixed_usdt':
                # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞ –≤ USDT
                usdt_amount = position_info['value']
            elif position_info['type'] == 'percentage':
                # –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –±–∞–ª–∞–Ω—Å–∞
                async with self.bybit_client as client:
                    balance_result = await client.balance.get_balance()

                balance = balance_result.get('free_usdt', 0)
                if balance <= 0:
                    raise Exception("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ")

                usdt_amount = balance * (position_info['value'] / 100)
            else:
                raise Exception("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏")

            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–ª–µ—á–æ
            leverage = self.user_settings.get('leverage', 1)
            total_volume_usdt = usdt_amount * leverage

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            quantity = total_volume_usdt / current_price

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç –±–∏—Ä–∂–∏
            async with self.bybit_client as client:
                format_result = await client.symbol_info.format_quantity_for_symbol(self.symbol, quantity)

                if not format_result['success']:
                    raise Exception(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: {format_result['error']}")

                return format_result['formatted_quantity']

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏: {e}")
            return None

    async def _determine_initial_position_state(self):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            async with self.bybit_client as client:
                positions_result = await client.positions.get_positions(self.symbol)

            if positions_result['success'] and positions_result['positions']:
                position = positions_result['positions'][0]
                side = position['side']
                size = position['size']

                if side == 'Buy':
                    self.position_state = PositionState.LONG_POSITION
                    self.strategy_state = StrategyState.WAITING_REVERSE_SIGNAL  # –ñ–¥–µ–º –æ–±—Ä–∞—Ç–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
                    logger.info(f"üìà –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ LONG –ø–æ–∑–∏—Ü–∏—è: {size}")
                elif side == 'Sell':
                    self.position_state = PositionState.SHORT_POSITION
                    self.strategy_state = StrategyState.WAITING_REVERSE_SIGNAL  # –ñ–¥–µ–º –æ–±—Ä–∞—Ç–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
                    logger.info(f"üìâ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ SHORT –ø–æ–∑–∏—Ü–∏—è: {size}")
            else:
                self.position_state = PositionState.NO_POSITION
                self.strategy_state = StrategyState.WAITING_FIRST_SIGNAL
                logger.info("üìä –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–µ—Ç")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}")
            self.position_state = PositionState.NO_POSITION
            self.strategy_state = StrategyState.WAITING_FIRST_SIGNAL

    async def _record_trade_open(self, side: str, signal: Dict[str, Any], order_result: Dict[str, Any]):
        """–ó–∞–ø–∏—Å—å –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        try:
            if self.strategy_id and self.user_id:
                quantity = order_result.get('qty', 'unknown')
                if quantity == 'unknown':
                    current_size = await self._calculate_position_size()
                    quantity = current_size if current_size else 'unknown'

                trade_id = db.create_trade_record(
                    user_id=self.user_id,
                    strategy_id=self.strategy_id,
                    symbol=self.symbol,
                    side=side,
                    quantity=str(quantity),
                    order_id=order_result.get('order_id')
                )
                logger.info(f"üìù –ó–∞–ø–∏—Å–∞–Ω–∞ —Å–¥–µ–ª–∫–∞: ID={trade_id}, {side}, —Ä–∞–∑–º–µ—Ä: {quantity}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Å–¥–µ–ª–∫–∏: {e}")

    async def _record_trade_close(self, side: str, close_result: Dict[str, Any]):
        """–ó–∞–ø–∏—Å—å –∑–∞–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        try:
            logger.info(f"üìù –°–¥–µ–ª–∫–∞ {side} –∑–∞–∫—Ä—ã—Ç–∞: {close_result.get('order_id')}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏: {e}")

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    def get_status_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–∞—Ç—É—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        return {
            'strategy_name': self.strategy_name,
            'is_active': self.is_active,
            'position_state': self.position_state.value,
            'strategy_state': self.strategy_state.value,
            'symbol': self.symbol,
            'timeframe': self.timeframe,
            'position_size': 'dynamic',
            'start_time': self.start_time.isoformat() if self.start_time else None,
            'error_message': self.error_message,
            'strategy_id': self.strategy_id,
            'telegram_id': self.telegram_id,
            'user_id': self.user_id,
            'total_signals_received': self.total_signals_received,
            'signals_processed': self.signals_processed,
            'last_signal_time': self.last_signal_time.isoformat() if self.last_signal_time else None,
            'current_interval_start': self.current_interval_start.isoformat() if self.current_interval_start else None,
            'signals_blocked': self.signals_blocked_until_interval_close,
            'first_signal_in_interval': self.first_signal_in_interval,
            'indicator_engine': f'MACD {self.timeframe}' if self.timeframe else 'Unknown'
        }

    def get_settings_summary(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–π —Å–≤–æ–¥–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        if not self.user_settings:
            return {}

        position_size_info = db.get_position_size_info(self.telegram_id)

        return {
            'trading_pair': self.user_settings.get('trading_pair'),
            'leverage': self.user_settings.get('leverage'),
            'timeframe': self.timeframe,
            'position_size': position_size_info.get('display', '‚Äî'),
            'mode': f'–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º MACD {self.timeframe}',
            'engine': f'python-binance + {"Direct 5m" if self.timeframe == "5m" else "15m->45m conversion"}',
            'logic': '–ü–µ—Ä–≤—ã–π —Å–∏–≥–Ω–∞–ª + –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞'
        }