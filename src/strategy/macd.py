# src/strategy/macd.py
import asyncio
from typing import Dict, Any, Optional
from enum import Enum
from datetime import datetime
from ..indicators.macd import MACDIndicator
from ..exchange.bybit import BybitClient
from ..database.database import db
from ..utils.logger import logger
from ..utils.helpers import get_msk_time, format_msk_time


class PositionState(Enum):
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    NO_POSITION = "no_position"
    LONG_POSITION = "long_position"
    SHORT_POSITION = "short_position"


class MACDStrategy:

    def __init__(self, telegram_id: int):
        self.telegram_id = telegram_id
        self.strategy_name = "MACD Full (Real-time)"
        self.position_state = PositionState.NO_POSITION
        self.is_active = False

        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        self.bybit_client: Optional[BybitClient] = None
        self.macd_indicator: Optional[MACDIndicator] = None

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.user_settings: Optional[Dict[str, Any]] = None
        self.user_id: Optional[int] = None
        self.strategy_id: Optional[int] = None
        self.symbol: Optional[str] = None
        self.timeframe: Optional[str] = None

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
        self.retry_attempts = 3
        self.retry_delay = 1.0

        # –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞
        self.start_time: Optional[datetime] = None
        self.error_message: Optional[str] = None

        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è real-time —Ä–µ–∂–∏–º–∞
        self.total_signals_received = 0
        self.signals_processed = 0
        self.last_signal_time: Optional[datetime] = None

        # –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ (debounce)
        self.min_signal_interval_seconds = 10  # –ú–∏–Ω–∏–º—É–º 10 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É —Å–∏–≥–Ω–∞–ª–∞–º–∏
        self.last_processed_signal_time: Optional[datetime] = None

    async def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        try:
            logger.info(f"üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MACD —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.telegram_id}")

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            user = db.get_or_create_user(self.telegram_id)
            self.user_id = user['id']

            self.user_settings = db.get_user_settings(self.telegram_id)
            if not self.user_settings:
                raise Exception("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            if not self._validate_settings():
                return False

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            self.symbol = self.user_settings.get('trading_pair')
            self.timeframe = self.user_settings.get('timeframe')

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Bybit –∫–ª–∏–µ–Ω—Ç
            api_key = self.user_settings.get('bybit_api_key')
            secret_key = self.user_settings.get('bybit_secret_key')

            self.bybit_client = BybitClient(api_key, secret_key)

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            async with self.bybit_client as client:
                connection_test = await client.balance.test_connection()
                if not connection_test:
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Bybit API")

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–µ—á–æ
            leverage = self.user_settings.get('leverage')
            async with self.bybit_client as client:
                leverage_result = await client.leverage.set_leverage(self.symbol, leverage)
                if leverage_result['success']:
                    logger.info(f"‚ö° –ü–ª–µ—á–æ {leverage}x —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è {self.symbol}")
                else:
                    logger.info(f"‚ö° –ü–ª–µ—á–æ {leverage}x —É–∂–µ –±—ã–ª–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è {self.symbol}")

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
            test_position_size = await self._calculate_position_size()
            if not test_position_size:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏")

            logger.info(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {test_position_size}")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º MACD –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
            self.macd_indicator = MACDIndicator(
                symbol=self.symbol,
                timeframe=self.timeframe
            )

            logger.info(f"‚úÖ MACD —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: {self.symbol} {self.timeframe}")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MACD —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
            self.error_message = str(e)
            return False

    def _validate_settings(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not self.user_settings:
            logger.error("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            self.error_message = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            return False

        required_fields = [
            'bybit_api_key', 'bybit_secret_key', 'trading_pair',
            'leverage', 'timeframe'
        ]

        missing_fields = []
        for field in required_fields:
            value = self.user_settings.get(field)
            if not value or (isinstance(value, str) and not value.strip()):
                missing_fields.append(field)

        if missing_fields:
            logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {', '.join(missing_fields)}")
            self.error_message = f"–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ: {', '.join(missing_fields)}"
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
        position_size_info = db.get_position_size_info(self.telegram_id)
        if not position_size_info.get('value') or position_size_info.get('value') <= 0:
            logger.error("‚ùå –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            self.error_message = "–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º
        timeframe = self.user_settings.get('timeframe')
        if timeframe not in ['5m', '45m']:
            logger.error(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º: {timeframe}")
            self.error_message = f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º: {timeframe}"
            return False

        return True

    async def start(self) -> bool:
        """–ó–∞–ø—É—Å–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        try:
            if self.is_active:
                logger.warning("‚ö†Ô∏è –°—Ç—Ä–∞—Ç–µ–≥–∏—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞")
                return False

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
            if not await self.initialize():
                return False

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –≤ –ë–î
            self.strategy_id = db.create_active_strategy(
                user_id=self.user_id,
                strategy_name=self.strategy_name
            )

            self.start_time = get_msk_time()
            self.is_active = True

            logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ MACD —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (ID: {self.strategy_id})")

            # –î–æ–±–∞–≤–ª—è–µ–º callback –¥–ª—è MACD —Å–∏–≥–Ω–∞–ª–æ–≤
            self.macd_indicator.add_callback(self._handle_macd_signal)

            # –ó–∞–ø—É—Å–∫–∞–µ–º MACD –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
            await self.macd_indicator.start()

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
            await self._determine_initial_position_state()

            logger.info(f"‚úÖ MACD —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∑–∞–ø—É—â–µ–Ω–∞: {self.symbol} {self.timeframe}")
            logger.info(f"üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏: {self.position_state.value}")
            logger.info(f"üíπ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –ø–µ—Ä–µ–¥ –∫–∞–∂–¥–æ–π —Å–¥–µ–ª–∫–æ–π")

            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ MACD —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
            self.error_message = str(e)
            self.is_active = False
            return False

    async def stop(self, reason: str = "Manual stop") -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        try:
            if not self.is_active:
                return True

            logger.info(f"‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ MACD —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {reason}")

            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º MACD –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
            if self.macd_indicator:
                await self.macd_indicator.stop()

            self.is_active = False

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
            if self.strategy_id:
                db.update_active_strategy_status(self.strategy_id, "stopped")

            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            await self._cleanup()

            # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            logger.info(
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –ø–æ–ª—É—á–µ–Ω–æ {self.total_signals_received} —Å–∏–≥–Ω–∞–ª–æ–≤, –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {self.signals_processed}")
            logger.info(f"‚úÖ MACD —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ MACD —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
            return False

    async def _cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            if self.macd_indicator:
                await self.macd_indicator.close()
                self.macd_indicator = None

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")

    async def _handle_macd_signal(self, signal: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ MACD —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —á–∞—Å—Ç—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π"""
        try:
            if not self.is_active:
                logger.warning("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª, –Ω–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞")
                return

            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
            self.total_signals_received += 1
            self.last_signal_time = get_msk_time()

            signal_type = signal.get('type')
            price = signal.get('price')
            crossover_type = signal.get('crossover_type')
            timeframe = signal.get('timeframe')

            current_time_msk = format_msk_time()
            logger.info(
                f"üéØ MACD —Å–∏–≥–Ω–∞–ª #{self.total_signals_received}: {signal_type.upper()} ({crossover_type}) –ø—Ä–∏ —Ü–µ–Ω–µ {price}")
            logger.info(f"üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {self.position_state.value} | –í—Ä–µ–º—è: {current_time_msk} –ú–°–ö")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º debounce (–∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤)
            if self.last_processed_signal_time:
                time_since_last = (get_msk_time() - self.last_processed_signal_time).total_seconds()
                if time_since_last < self.min_signal_interval_seconds:
                    logger.warning(
                        f"‚ö†Ô∏è –°–∏–≥–Ω–∞–ª –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω (debounce): {time_since_last:.1f}—Å < {self.min_signal_interval_seconds}—Å")
                    return

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª
            if signal_type == 'buy':  # –ë—ã—á—å–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ
                await self._handle_bullish_signal(signal)
            elif signal_type == 'sell':  # –ú–µ–¥–≤–µ–∂—å–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ
                await self._handle_bearish_signal(signal)
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–∏–≥–Ω–∞–ª–∞: {signal_type}")
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            self.last_processed_signal_time = get_msk_time()
            self.signals_processed += 1

            logger.info(f"‚úÖ –°–∏–≥–Ω–∞–ª #{self.signals_processed} –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ MACD —Å–∏–≥–Ω–∞–ª–∞: {e}")

    async def _handle_bullish_signal(self, signal: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã—á—å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ - –ø–µ—Ä–µ—Ö–æ–¥ –≤ –ª–æ–Ω–≥"""
        logger.info("üü¢ –ë—ã—á–∏–π —Å–∏–≥–Ω–∞–ª: –ø–µ—Ä–µ—Ö–æ–¥ –≤ LONG –ø–æ–∑–∏—Ü–∏—é")

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —à–æ—Ä—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
        if self.position_state == PositionState.SHORT_POSITION:
            logger.info("üìâ –ó–∞–∫—Ä—ã–≤–∞–µ–º SHORT –ø–æ–∑–∏—Ü–∏—é")
            close_success = await self._close_position_with_retry("SHORT")
            if not close_success:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å SHORT, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–µ LONG")
                return

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ª–æ–Ω–≥
        logger.info("üìà –û—Ç–∫—Ä—ã–≤–∞–µ–º LONG –ø–æ–∑–∏—Ü–∏—é")
        open_success = await self._open_long_position(signal)

        if open_success:
            self.position_state = PositionState.LONG_POSITION
            logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—à–ª–∏ –≤ LONG –ø–æ–∑–∏—Ü–∏—é")
        else:
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å LONG –ø–æ–∑–∏—Ü–∏—é")
            self.position_state = PositionState.NO_POSITION

    async def _handle_bearish_signal(self, signal: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–≤–µ–∂—å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ - –ø–µ—Ä–µ—Ö–æ–¥ –≤ —à–æ—Ä—Ç"""
        logger.info("üî¥ –ú–µ–¥–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª: –ø–µ—Ä–µ—Ö–æ–¥ –≤ SHORT –ø–æ–∑–∏—Ü–∏—é")

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ª–æ–Ω–≥ –µ—Å–ª–∏ –µ—Å—Ç—å
        if self.position_state == PositionState.LONG_POSITION:
            logger.info("üìà –ó–∞–∫—Ä—ã–≤–∞–µ–º LONG –ø–æ–∑–∏—Ü–∏—é")
            close_success = await self._close_position_with_retry("LONG")
            if not close_success:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å LONG, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–µ SHORT")
                return

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —à–æ—Ä—Ç
        logger.info("üìâ –û—Ç–∫—Ä—ã–≤–∞–µ–º SHORT –ø–æ–∑–∏—Ü–∏—é")
        open_success = await self._open_short_position(signal)

        if open_success:
            self.position_state = PositionState.SHORT_POSITION
            logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—à–ª–∏ –≤ SHORT –ø–æ–∑–∏—Ü–∏—é")
        else:
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å SHORT –ø–æ–∑–∏—Ü–∏—é")
            self.position_state = PositionState.NO_POSITION

    async def _close_position_with_retry(self, position_type: str) -> bool:
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        for attempt in range(1, self.retry_attempts + 1):
            try:
                async with self.bybit_client as client:
                    result = await client.positions.close_position(self.symbol)

                if result['success']:
                    logger.info(f"‚úÖ {position_type} –ø–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞")
                    await self._record_trade_close(position_type, result)
                    return True
                else:
                    error_msg = result.get('error', 'Unknown error')

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏
                    if "position" in error_msg.lower() and "not found" in error_msg.lower():
                        logger.info(f"üìä –ü–æ–∑–∏—Ü–∏—è —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞: {error_msg}")
                        return True

                    logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt}: {error_msg}")

            except Exception as e:
                logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ (–ø–æ–ø—ã—Ç–∫–∞ {attempt}): {e}")

            if attempt < self.retry_attempts:
                await asyncio.sleep(self.retry_delay)

        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å {position_type} –ø–æ–∑–∏—Ü–∏—é –∑–∞ {self.retry_attempts} –ø–æ–ø—ã—Ç–æ–∫")
        return False

    async def _open_long_position(self, signal: Dict[str, Any]) -> bool:
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –ª–æ–Ω–≥ –ø–æ–∑–∏—Ü–∏–∏ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º —Ä–∞–∑–º–µ—Ä–æ–º"""
        try:
            # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π
            current_position_size = await self._calculate_position_size()
            if not current_position_size:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏")
                return False

            logger.info(f"üíπ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {current_position_size} (—Ü–µ–Ω–∞: {signal['price']})")

            async with self.bybit_client as client:
                result = await client.orders.buy_market(
                    symbol=self.symbol,
                    qty=current_position_size
                )

            if result['success']:
                logger.info(f"‚úÖ LONG –ø–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞: {result['order_id']}")
                await self._record_trade_open('LONG', signal, result)
                return True
            else:
                error_msg = result.get('error', 'Unknown error')
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è LONG: {error_msg}")
                return False

        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ LONG: {e}")
            return False

    async def _open_short_position(self, signal: Dict[str, Any]) -> bool:
        """–û—Ç–∫—Ä—ã—Ç–∏–µ —à–æ—Ä—Ç –ø–æ–∑–∏—Ü–∏–∏ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º —Ä–∞–∑–º–µ—Ä–æ–º"""
        try:
            # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π
            current_position_size = await self._calculate_position_size()
            if not current_position_size:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏")
                return False

            logger.info(f"üíπ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {current_position_size} (—Ü–µ–Ω–∞: {signal['price']})")

            async with self.bybit_client as client:
                result = await client.orders.sell_market(
                    symbol=self.symbol,
                    qty=current_position_size
                )

            if result['success']:
                logger.info(f"‚úÖ SHORT –ø–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞: {result['order_id']}")
                await self._record_trade_open('SHORT', signal, result)
                return True
            else:
                error_msg = result.get('error', 'Unknown error')
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è SHORT: {error_msg}")
                return False

        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ SHORT: {e}")
            return False

    async def _calculate_position_size(self) -> Optional[str]:
        """–†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π"""
        try:
            position_info = db.get_position_size_info(self.telegram_id)

            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
            async with self.bybit_client as client:
                price_result = await client.price.get_price(self.symbol)
                if not price_result['success']:
                    raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É {self.symbol}")

                current_price = price_result['price']

            if position_info['type'] == 'fixed_usdt':
                # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞ –≤ USDT
                usdt_amount = position_info['value']
            elif position_info['type'] == 'percentage':
                # –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –±–∞–ª–∞–Ω—Å–∞
                async with self.bybit_client as client:
                    balance_result = await client.balance.get_balance()

                balance = balance_result.get('free_usdt', 0)
                if balance <= 0:
                    raise Exception("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ")

                usdt_amount = balance * (position_info['value'] / 100)
            else:
                raise Exception("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏")

            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–ª–µ—á–æ
            leverage = self.user_settings.get('leverage', 1)
            total_volume_usdt = usdt_amount * leverage

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            quantity = total_volume_usdt / current_price

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç –±–∏—Ä–∂–∏
            async with self.bybit_client as client:
                format_result = await client.symbol_info.format_quantity_for_symbol(self.symbol, quantity)

                if not format_result['success']:
                    raise Exception(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: {format_result['error']}")

                return format_result['formatted_quantity']

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏: {e}")
            return None

    async def _determine_initial_position_state(self):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            async with self.bybit_client as client:
                positions_result = await client.positions.get_positions(self.symbol)

            if positions_result['success'] and positions_result['positions']:
                position = positions_result['positions'][0]
                side = position['side']
                size = position['size']

                if side == 'Buy':
                    self.position_state = PositionState.LONG_POSITION
                    logger.info(f"üìà –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ LONG –ø–æ–∑–∏—Ü–∏—è: {size}")
                elif side == 'Sell':
                    self.position_state = PositionState.SHORT_POSITION
                    logger.info(f"üìâ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ SHORT –ø–æ–∑–∏—Ü–∏—è: {size}")
            else:
                self.position_state = PositionState.NO_POSITION
                logger.info("üìä –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–µ—Ç")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}")
            self.position_state = PositionState.NO_POSITION

    async def _record_trade_open(self, side: str, signal: Dict[str, Any], order_result: Dict[str, Any]):
        """–ó–∞–ø–∏—Å—å –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        try:
            if self.strategy_id and self.user_id:
                quantity = order_result.get('qty', 'unknown')
                if quantity == 'unknown':
                    current_size = await self._calculate_position_size()
                    quantity = current_size if current_size else 'unknown'

                trade_id = db.create_trade_record(
                    user_id=self.user_id,
                    strategy_id=self.strategy_id,
                    symbol=self.symbol,
                    side=side,
                    quantity=str(quantity),
                    order_id=order_result.get('order_id')
                )
                logger.info(f"üìù –ó–∞–ø–∏—Å–∞–Ω–∞ —Å–¥–µ–ª–∫–∞: ID={trade_id}, {side}, —Ä–∞–∑–º–µ—Ä: {quantity}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Å–¥–µ–ª–∫–∏: {e}")

    async def _record_trade_close(self, side: str, close_result: Dict[str, Any]):
        """–ó–∞–ø–∏—Å—å –∑–∞–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        try:
            logger.info(f"üìù –°–¥–µ–ª–∫–∞ {side} –∑–∞–∫—Ä—ã—Ç–∞: {close_result.get('order_id')}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏: {e}")

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    def get_status_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–∞—Ç—É—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        return {
            'strategy_name': self.strategy_name,
            'is_active': self.is_active,
            'position_state': self.position_state.value,
            'symbol': self.symbol,
            'timeframe': self.timeframe,
            'position_size': 'dynamic',
            'start_time': self.start_time.isoformat() if self.start_time else None,
            'error_message': self.error_message,
            'strategy_id': self.strategy_id,
            'telegram_id': self.telegram_id,
            'user_id': self.user_id,
            'total_signals_received': self.total_signals_received,
            'signals_processed': self.signals_processed,
            'last_signal_time': self.last_signal_time.isoformat() if self.last_signal_time else None,
            'min_signal_interval_seconds': self.min_signal_interval_seconds
        }

    def get_settings_summary(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–π —Å–≤–æ–¥–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        if not self.user_settings:
            return {}

        position_size_info = db.get_position_size_info(self.telegram_id)

        return {
            'trading_pair': self.user_settings.get('trading_pair'),
            'leverage': self.user_settings.get('leverage'),
            'timeframe': self.timeframe,
            'position_size': position_size_info.get('display', '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'),
            'mode': 'Real-time –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞'
        }