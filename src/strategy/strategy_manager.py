# src/strategy/strategy_manager.py
from typing import Optional, Dict, Any
from .macd import MACDStrategy
from ..utils.logger import logger
from ..utils.config import config


class StrategyManager:
    """–º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–¥–Ω–æ–π MACD —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π"""

    def __init__(self):
        # –û–¥–Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
        self.strategy: Optional[MACDStrategy] = None

    async def start_strategy(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ MACD —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞
            if self.strategy is not None:
                return {
                    'success': False,
                    'error': f'–°—Ç—Ä–∞—Ç–µ–≥–∏—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞: {self.strategy.strategy_name}'
                }

            logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ MACD —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")

            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            self.strategy = MACDStrategy()

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
            start_success = await self.strategy.start()

            if start_success:
                logger.info(f"‚úÖ MACD —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞")

                return {
                    'success': True,
                    'strategy_name': self.strategy.strategy_name,
                    'message': f'–°—Ç—Ä–∞—Ç–µ–≥–∏—è {self.strategy.strategy_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞!',
                    'config': {
                        'symbol': config.trading_pair,
                        'timeframe': config.timeframe,
                        'leverage': config.leverage,
                        'position_size': f"{config.position_size_usdt} USDT"
                    }
                }
            else:
                error_msg = self.strategy.error_message or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ'
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å MACD —Å—Ç—Ä–∞—Ç–µ–≥–∏—é: {error_msg}")

                # –û—á–∏—â–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
                self.strategy = None

                return {
                    'success': False,
                    'error': f'–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {error_msg}'
                }

        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ MACD —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")

            # –û—á–∏—â–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
            self.strategy = None

            return {
                'success': False,
                'error': f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}'
            }

    async def stop_strategy(self, reason: str = "Manual stop") -> Dict[str, Any]:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
            if self.strategy is None:
                return {
                    'success': False,
                    'error': '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏'
                }

            strategy_name = self.strategy.strategy_name

            logger.info(f"‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {strategy_name}: {reason}")

            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
            stop_success = await self.strategy.stop(reason)

            # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∏–∑ –ø–∞–º—è—Ç–∏
            self.strategy = None

            if stop_success:
                logger.info(f"‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_name} —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

                return {
                    'success': True,
                    'strategy_name': strategy_name,
                    'message': f'–°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'
                }
            else:
                logger.warning(f"‚ö†Ô∏è –°—Ç—Ä–∞—Ç–µ–≥–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏")

                return {
                    'success': True,  # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—Ö–æ–º, –¥–∞–∂–µ –µ—Å–ª–∏ –±—ã–ª–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
                    'strategy_name': strategy_name,
                    'message': f'–°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ (—Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏)'
                }

        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")

            # –í—Å–µ —Ä–∞–≤–Ω–æ —É–¥–∞–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∏–∑ –ø–∞–º—è—Ç–∏
            strategy_name = self.strategy.strategy_name if self.strategy else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è"
            self.strategy = None

            return {
                'success': False,
                'strategy_name': strategy_name,
                'error': f'–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {str(e)}'
            }

    def get_strategy(self) -> Optional[MACDStrategy]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        return self.strategy

    def is_strategy_active(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        return self.strategy is not None and self.strategy.is_active

    def get_strategy_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        if self.strategy is None:
            return {
                'is_active': False,
                'strategy_name': None,
                'status': 'not_running'
            }

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        status_info = self.strategy.get_status_info()
        status_info['in_memory'] = True

        return status_info

    async def restart_strategy(self, reason: str = "Restart requested") -> Dict[str, Any]:
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        logger.info(f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {reason}")

        # –°–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω–∞
        if self.is_strategy_active():
            stop_result = await self.stop_strategy(f"Restart: {reason}")
            if not stop_result['success']:
                return {
                    'success': False,
                    'error': f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {stop_result['error']}"
                }

        # –ó–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–µ–º
        start_result = await self.start_strategy()
        if start_result['success']:
            start_result['message'] = f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞: {reason}"

        return start_result

    def print_status(self):
        """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ –≤ –∫–æ–Ω—Å–æ–ª—å"""
        print("\n" + "=" * 70)
        print("–°–¢–ê–¢–£–° –ú–ï–ù–ï–î–ñ–ï–†–ê –°–¢–†–ê–¢–ï–ì–ò–ô")
        print("=" * 70)

        # –°—Ç–∞—Ç—É—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        if self.strategy:
            print(f"–ê–∫—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: üü¢ {self.strategy.strategy_name}")
            self.strategy.print_status()
        else:
            print("–ê–∫—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: üî¥ –ù–µ—Ç")

        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        print(f"\n‚öôÔ∏è –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø:")
        print(f"–°–∏–º–≤–æ–ª: {config.trading_pair}")
        print(f"–¢–∞–π–º—Ñ—Ä–µ–π–º: {config.timeframe}")
        print(f"–ü–ª–µ—á–æ: {config.leverage}x")
        print(f"–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {config.position_size_usdt} USDT")

        print("=" * 70)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
strategy_manager = StrategyManager()