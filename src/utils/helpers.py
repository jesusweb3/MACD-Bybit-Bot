# src/utils/helpers.py
from typing import Union


def format_balance(balance: Union[float, int, str]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á
    """
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ float –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
        if isinstance(balance, str):
            balance = float(balance)
        elif isinstance(balance, int):
            balance = float(balance)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        is_negative = balance < 0
        abs_balance = abs(balance)

        # –î–ª—è –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π (–º–µ–Ω—å—à–µ 0.01) –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–æ–ª—å—à–µ –∑–Ω–∞–∫–æ–≤
        if 0 < abs_balance < 0.01:
            if abs_balance >= 0.001:
                formatted = f"{abs_balance:.5f}".rstrip('0').rstrip('.')
            else:
                formatted = f"{abs_balance:.8f}".rstrip('0').rstrip('.')
        # –î–ª—è –±–æ–ª—å—à–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ —Ç—ã—Å—è—á
        elif abs_balance >= 1000:
            formatted = f"{abs_balance:,.2f}"
        # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        else:
            formatted = f"{abs_balance:.2f}"

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞–∫ –º–∏–Ω—É—Å –æ–±—Ä–∞—Ç–Ω–æ –µ—Å–ª–∏ –±—ã–ª–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if is_negative:
            formatted = f"-{formatted}"

        return formatted

    except (ValueError, TypeError):
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        return str(balance)


def format_usdt(amount: Union[float, int, str], with_currency: bool = True) -> str:
    """
    –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è USDT —Å –≤–∞–ª—é—Ç–æ–π

    Args:
        amount: –°—É–º–º–∞ –≤ USDT
        with_currency: –î–æ–±–∞–≤–ª—è—Ç—å –ª–∏ " USDT" –≤ –∫–æ–Ω—Ü–µ

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞

    Examples:
        format_usdt(1234.56) -> "1,234.56 USDT"
        format_usdt(1234.56, False) -> "1,234.56"
        format_usdt(0.00123) -> "0.00123 USDT"
    """
    formatted = format_balance(amount)

    if with_currency:
        return f"{formatted} USDT"
    else:
        return formatted


def format_percentage(value: Union[float, int, str], decimal_places: int = 2) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤

    Args:
        value: –ó–Ω–∞—á–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
        decimal_places: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å %

    Examples:
        format_percentage(75.5) -> "75.50%"
        format_percentage(100) -> "100.00%"
        format_percentage(0.123, 3) -> "0.123%"
    """
    try:
        if isinstance(value, str):
            value = float(value)
        elif isinstance(value, int):
            value = float(value)

        return f"{value:.{decimal_places}f}%"

    except (ValueError, TypeError):
        return f"{value}%"


def format_pnl(pnl: Union[float, int, str], with_currency: bool = True, with_sign: bool = True) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ P&L —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–Ω–∞–∫–∞–º–∏ –∏ —Ü–≤–µ—Ç–æ–≤—ã–º–∏ —ç–º–æ–¥–∑–∏

    Args:
        pnl: –ó–Ω–∞—á–µ–Ω–∏–µ P&L
        with_currency: –î–æ–±–∞–≤–ª—è—Ç—å –ª–∏ " USDT"
        with_sign: –î–æ–±–∞–≤–ª—è—Ç—å –ª–∏ –∑–Ω–∞–∫ + –¥–ª—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å —ç–º–æ–¥–∑–∏

    Examples:
        format_pnl(123.45) -> "üíö +123.45 USDT"
        format_pnl(-50.25) -> "üíî -50.25 USDT"
        format_pnl(0) -> "üíô 0.00 USDT"
    """
    try:
        if isinstance(pnl, str):
            pnl = float(pnl)
        elif isinstance(pnl, int):
            pnl = float(pnl)

        # –í—ã–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–Ω–∞—á–µ–Ω–∏—è
        if pnl > 0:
            emoji = "üíö"
            sign = "+" if with_sign else ""
        elif pnl < 0:
            emoji = "üíî"
            sign = ""  # –ú–∏–Ω—É—Å —É–∂–µ –≤–∫–ª—é—á–µ–Ω –≤ —á–∏—Å–ª–æ
        else:
            emoji = "üíô"
            sign = ""

        formatted_amount = format_balance(abs(pnl) if pnl > 0 else pnl)

        if with_currency:
            return f"{emoji} {sign}{formatted_amount} USDT"
        else:
            return f"{emoji} {sign}{formatted_amount}"

    except (ValueError, TypeError):
        return f"üíô {pnl}"


def format_quantity(quantity: Union[float, int, str], precision: int = 8) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π

    Args:
        quantity: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
        precision: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å (–∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π)

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –±–µ–∑ –ª–∏—à–Ω–∏—Ö –Ω—É–ª–µ–π

    Examples:
        format_quantity(1.50000000) -> "1.5"
        format_quantity(0.00012345) -> "0.00012345"
        format_quantity(1000) -> "1,000"
    """
    try:
        if isinstance(quantity, str):
            quantity = float(quantity)
        elif isinstance(quantity, int):
            quantity = float(quantity)

        # –î–ª—è —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª
        if quantity == int(quantity):
            return format_balance(int(quantity)).replace('.00', '')

        # –î–ª—è –¥—Ä–æ–±–Ω—ã—Ö —á–∏—Å–µ–ª —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –Ω—É–ª–∏
        formatted = f"{quantity:.{precision}f}".rstrip('0').rstrip('.')

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª
        if float(formatted) >= 1000:
            return format_balance(float(formatted))
        else:
            return formatted

    except (ValueError, TypeError):
        return str(quantity)


def format_price(price: Union[float, int, str], symbol: str = "") -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã

    Args:
        price: –¶–µ–Ω–∞
        symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT)

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞

    Examples:
        format_price(43250.5, "BTCUSDT") -> "43,250.50"
        format_price(0.00123, "ADAUSDT") -> "0.00123"
    """
    try:
        if isinstance(price, str):
            price = float(price)
        elif isinstance(price, int):
            price = float(price)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–∞—Ä—ã
        if symbol.upper().endswith("USDT"):
            base_asset = symbol.upper().replace("USDT", "")

            # –î–ª—è –¥–æ—Ä–æ–≥–∏—Ö –∞–∫—Ç–∏–≤–æ–≤ (BTC, ETH) - 2 –∑–Ω–∞–∫–∞
            if base_asset in ["BTC", "ETH", "BNB"]:
                precision = 2
            # –î–ª—è –¥–µ—à–µ–≤—ã—Ö –∞–∫—Ç–∏–≤–æ–≤ - –±–æ–ª—å—à–µ –∑–Ω–∞–∫–æ–≤
            elif price < 1:
                precision = 6
            else:
                precision = 4
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            precision = 4

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å –Ω—É–∂–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é
        if price >= 1000:
            return f"{price:,.{precision}f}".rstrip('0').rstrip('.')
        else:
            return f"{price:.{precision}f}".rstrip('0').rstrip('.')

    except (ValueError, TypeError):
        return str(price)


def get_balance_emoji(balance: Union[float, int, str]) -> str:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –±–∞–ª–∞–Ω—Å–∞

    Args:
        balance: –ë–∞–ª–∞–Ω—Å –≤ USDT

    Returns:
        –≠–º–æ–¥–∑–∏ –¥–ª—è –±–∞–ª–∞–Ω—Å–∞
    """
    try:
        if isinstance(balance, str):
            balance = float(balance)
        elif isinstance(balance, int):
            balance = float(balance)

        if balance >= 10000:
            return "üíé"  # –ë–æ–ª—å—à–æ–π –±–∞–ª–∞–Ω—Å
        elif balance >= 1000:
            return "üíö"  # –•–æ—Ä–æ—à–∏–π –±–∞–ª–∞–Ω—Å
        elif balance >= 100:
            return "üíõ"  # –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–∞–Ω—Å
        elif balance >= 10:
            return "üß°"  # –ù–µ–±–æ–ª—å—à–æ–π –±–∞–ª–∞–Ω—Å
        elif balance > 0:
            return "üíî"  # –û—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–π –±–∞–ª–∞–Ω—Å
        else:
            return "üíÄ"  # –ù–µ—Ç –±–∞–ª–∞–Ω—Å–∞

    except (ValueError, TypeError):
        return "üíô"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é


def truncate_string(text: str, max_length: int = 100, suffix: str = "...") -> str:
    """
    –û–±—Ä–µ–∑–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Å—É—Ñ—Ñ–∏–∫—Å–∞

    Args:
        text: –ò—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
        suffix: –ß—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–Ω—Ü–µ –ø—Ä–∏ –æ–±—Ä–µ–∑–∞–Ω–∏–∏

    Returns:
        –û–±—Ä–µ–∑–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    """
    if len(text) <= max_length:
        return text

    return text[:max_length - len(suffix)] + suffix


def format_duration(hours: Union[int, float]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥

    Args:
        hours: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤

    Returns:
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞

    Examples:
        format_duration(24) -> "1 –¥–µ–Ω—å"
        format_duration(168) -> "1 –Ω–µ–¥–µ–ª—è"
        format_duration(36) -> "1 –¥–µ–Ω—å 12 —á–∞—Å–æ–≤"
    """
    try:
        hours = int(hours)

        if hours == 0:
            return "0 —á–∞—Å–æ–≤"

        weeks = hours // 168
        days = (hours % 168) // 24
        remaining_hours = hours % 24

        parts = []

        if weeks > 0:
            parts.append(f"{weeks} {'–Ω–µ–¥–µ–ª—è' if weeks == 1 else '–Ω–µ–¥–µ–ª—å' if weeks < 5 else '–Ω–µ–¥–µ–ª—å'}")

        if days > 0:
            parts.append(f"{days} {'–¥–µ–Ω—å' if days == 1 else '–¥–Ω—è' if days < 5 else '–¥–Ω–µ–π'}")

        if remaining_hours > 0:
            parts.append(
                f"{remaining_hours} {'—á–∞—Å' if remaining_hours == 1 else '—á–∞—Å–∞' if remaining_hours < 5 else '—á–∞—Å–æ–≤'}")

        return " ".join(parts)

    except (ValueError, TypeError):
        return f"{hours} —á–∞—Å–æ–≤"