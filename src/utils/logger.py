# src/utils/logger.py
import logging
import sys
from pathlib import Path
from datetime import datetime
from .config import config
from .helpers import MSK_TIMEZONE


class MSKFormatter(logging.Formatter):
    """–§–æ—Ä–º–∞—Ç—Ç–µ—Ä —Å –º–æ—Å–∫–æ–≤—Å–∫–∏–º –≤—Ä–µ–º–µ–Ω–µ–º"""

    def formatTime(self, record, datefmt=None):
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
        dt = datetime.fromtimestamp(record.created, tz=MSK_TIMEZONE)
        if datefmt:
            return dt.strftime(datefmt)
        else:
            return dt.strftime('%Y-%m-%d %H:%M:%S MSK')


def setup_logger(name: str = __name__) -> logging.Logger:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    logger = logging.getLogger(name)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ª–æ–≥–≥–µ—Ä –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
    if logger.handlers:
        return logger

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logger.setLevel(getattr(logging, config.log_level))

    # –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä —Å –º–æ—Å–∫–æ–≤—Å–∫–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
    formatter = MSKFormatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S MSK'
    )

    # === –ö–û–ù–°–û–õ–¨–ù–´–ô –í–´–í–û–î ===
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setFormatter(formatter)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º UTF-8 –¥–ª—è Windows
    if sys.platform == "win32" and hasattr(console_handler.stream, 'reconfigure'):
        try:
            console_handler.stream.reconfigure(encoding='utf-8')
        except (AttributeError, OSError):
            # Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π Python –∏–ª–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
            pass

    logger.addHandler(console_handler)

    # === –§–ê–ô–õ–û–í–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ===
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
        log_dir = Path("logs")
        log_dir.mkdir(exist_ok=True)

        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –ª–æ–≥–æ–≤
        main_log_file = log_dir / "bot.log"
        file_handler = logging.FileHandler(main_log_file, encoding='utf-8')
        file_handler.setFormatter(formatter)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –¥–ª—è —Ñ–∞–π–ª–∞ - –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–º
        file_handler.setLevel(logging.INFO)
        logger.addHandler(file_handler)

        # === –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–ê–ô–õ–´ –õ–û–ì–û–í ===

        # –õ–æ–≥ —Ç–æ–ª—å–∫–æ –æ—à–∏–±–æ–∫
        error_log_file = log_dir / "errors.log"
        error_handler = logging.FileHandler(error_log_file, encoding='utf-8')
        error_handler.setFormatter(formatter)
        error_handler.setLevel(logging.ERROR)
        logger.addHandler(error_handler)

        # –õ–æ–≥ —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π (—Ç–æ–ª—å–∫–æ INFO+ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏)
        trade_log_file = log_dir / "trading.log"
        trade_handler = TradingLogHandler(trade_log_file)
        trade_handler.setFormatter(formatter)
        trade_handler.setLevel(logging.INFO)
        logger.addHandler(trade_handler)

    except (OSError, PermissionError) as e:
        # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª—ã –ª–æ–≥–æ–≤ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–æ–ª—å–∫–æ —Å –∫–æ–Ω—Å–æ–ª—å–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∞–π–ª–æ–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: {e}")

    return logger


class TradingLogHandler(logging.FileHandler):
    """–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""

    def __init__(self, filename, mode='a', encoding='utf-8', delay=False):
        super().__init__(filename, mode, encoding, delay)

        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        self.trading_keywords = [
            '–ü–ï–†–ï–°–ï–ß–ï–ù–ò–ï MACD',
            '—Å–∏–≥–Ω–∞–ª',
            '–ø–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞',
            '–ø–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞',
            '–ó–∞–ø—É—Å–∫ MACD —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏',
            '–û—Å—Ç–∞–Ω–æ–≤–∫–∞ MACD —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏',
            '–†–∞–∑–º–µ—â–∞–µ–º –º–∞—Ä–∫–µ—Ç –æ—Ä–¥–µ—Ä',
            '–ú–∞—Ä–∫–µ—Ç –æ—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω',
            '–ó–∞–≤–µ—Ä—à–µ–Ω',  # –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
            '–ù–∞—á–∞—Ç –Ω–æ–≤—ã–π',  # –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
            '–ó–∞–ø–∏—Å–∞–Ω–∞ —Å–¥–µ–ª–∫–∞',
            'LONG –ø–æ–∑–∏—Ü–∏—è',
            'SHORT –ø–æ–∑–∏—Ü–∏—è',
            '–ë–∞–ª–∞–Ω—Å —Å—á—ë—Ç–∞'
        ]

    def emit(self, record):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if record.levelno >= logging.INFO:
            message = record.getMessage()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
            if any(keyword in message for keyword in self.trading_keywords):
                super().emit(record)


def get_logger_stats() -> dict:
    """–ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        log_dir = Path("logs")
        if not log_dir.exists():
            return {"error": "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}

        stats = {}

        # –†–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤
        for log_file in log_dir.glob("*.log"):
            try:
                size_mb = log_file.stat().st_size / (1024 * 1024)
                stats[log_file.name] = f"{size_mb:.2f} MB"
            except OSError:
                stats[log_file.name] = "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

        return stats

    except Exception as e:
        return {"error": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}"}


def cleanup_old_logs(days_to_keep: int = 7):
    """–ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤"""
    try:
        log_dir = Path("logs")
        if not log_dir.exists():
            return

        from datetime import datetime, timedelta
        cutoff_date = datetime.now() - timedelta(days=days_to_keep)

        cleaned_count = 0
        for log_file in log_dir.glob("*.log.*"):  # –†–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–æ–≥–∏ (.log.1, .log.2 –∏ —Ç.–¥.)
            try:
                if datetime.fromtimestamp(log_file.stat().st_mtime) < cutoff_date:
                    log_file.unlink()
                    cleaned_count += 1
            except OSError:
                continue

        if cleaned_count > 0:
            logger = logging.getLogger(__name__)
            logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {cleaned_count} —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤ (—Å—Ç–∞—Ä—à–µ {days_to_keep} –¥–Ω–µ–π)")

    except Exception as e:
        logger = logging.getLogger(__name__)
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤: {e}")


def rotate_logs_if_needed():
    """–ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –†–æ—Ç–∞—Ü–∏—è –ª–æ–≥–æ–≤ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞"""
    try:
        log_dir = Path("logs")
        if not log_dir.exists():
            return

        max_size_mb = 10  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ª–æ–≥–∞ –≤ MB
        max_size_bytes = max_size_mb * 1024 * 1024

        for log_file in log_dir.glob("*.log"):
            try:
                if log_file.stat().st_size > max_size_bytes:
                    # –ü—Ä–æ—Å—Ç–∞—è —Ä–æ—Ç–∞—Ü–∏—è - –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –≤ .log.old
                    old_log = log_file.with_suffix('.log.old')
                    if old_log.exists():
                        old_log.unlink()  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –±—ç–∫–∞–ø

                    log_file.rename(old_log)

                    logger = logging.getLogger(__name__)
                    logger.info(f"üîÑ –†–æ—Ç–∏—Ä–æ–≤–∞–Ω –ª–æ–≥ —Ñ–∞–π–ª: {log_file.name} (—Ä–∞–∑–º–µ—Ä –ø—Ä–µ–≤—ã—Å–∏–ª {max_size_mb}MB)")

            except OSError:
                continue

    except Exception as e:
        logger = logging.getLogger(__name__)
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–æ—Ç–∞—Ü–∏–∏ –ª–æ–≥–æ–≤: {e}")


# –û—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–æ–µ–∫—Ç–µ
logger = setup_logger("macd_bot")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Ä–æ—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
try:
    rotate_logs_if_needed()
    cleanup_old_logs(days_to_keep=7)  # –•—Ä–∞–Ω–∏–º –ª–æ–≥–∏ 7 –¥–Ω–µ–π
except Exception:
    # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å
    pass