# src/bot/handlers/trade/trade.py
from aiogram import Router, F
from aiogram.types import CallbackQuery
from src.bot.keyboards.trade_menu import (
    get_trade_menu,
    get_strategy_confirm_menu,
    get_active_trading_menu,
    get_statistics_menu,
    get_balance_menu,
    get_back_to_trade_menu,
    get_trade_history_menu
)
from ...utils.trade_utils import TradeBotUtils
from src.utils.logger import logger
from src.utils.config import config
from src.utils.helpers import format_msk_time
from src.database.database import db
from src.strategy import strategy_manager
import asyncio

router = Router()


@router.callback_query(F.data == "trade_menu")
async def trade_menu(callback: CallbackQuery):
    """–ì–ª–∞–≤–Ω–æ–µ —Ç–æ—Ä–≥–æ–≤–æ–µ –º–µ–Ω—é"""
    if not config.is_user_allowed(callback.from_user.id):
        return

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
        is_strategy_active = strategy_manager.is_strategy_active(callback.from_user.id)

        if is_strategy_active:
            # –ï—Å–ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∞–∫—Ç–∏–≤–Ω–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∞–∫—Ç–∏–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
            await active_trading_menu(callback)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω–æ—Ç—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings_info = TradeBotUtils.check_settings_completeness(callback.from_user.id)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –º–µ–Ω—é
        menu_text = TradeBotUtils.get_trade_menu_text(callback.from_user.id)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å —É—á–µ—Ç–æ–º —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        await callback.message.edit_text(
            menu_text,
            reply_markup=get_trade_menu(settings_info['complete']),
            parse_mode='HTML'
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ trade_menu: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –º–µ–Ω—é", show_alert=True)


@router.callback_query(F.data == "trade_strategy_blocked")
async def strategy_blocked(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    if not config.is_user_allowed(callback.from_user.id):
        return

    await callback.answer("üîí –ó–∞–≤–µ—Ä—à–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏", show_alert=True)


@router.callback_query(F.data == "trade_strategy_menu")
async def strategy_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø—É—Å–∫–∞ MACD —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    if not config.is_user_allowed(callback.from_user.id):
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    settings_info = TradeBotUtils.check_settings_completeness(callback.from_user.id)

    if not settings_info['complete']:
        await callback.answer("üîí –ó–∞–≤–µ—Ä—à–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
    if strategy_manager.is_strategy_active(callback.from_user.id):
        await callback.answer("‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è", show_alert=True)
        return

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è MACD —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    confirm_text = TradeBotUtils.get_strategy_confirm_text("macd_full", callback.from_user.id)

    await callback.message.edit_text(
        confirm_text,
        reply_markup=get_strategy_confirm_menu("macd_full"),
        parse_mode='HTML'
    )
    await callback.answer("MACD —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –≤—ã–±—Ä–∞–Ω–∞")


@router.callback_query(F.data.startswith("start_trading_"))
async def start_trading(callback: CallbackQuery):
    """–ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    if not config.is_user_allowed(callback.from_user.id):
        return

    strategy_name = "MACD Full"
    current_time_msk = format_msk_time()

    try:
        logger.info(f"üöÄ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é {strategy_name} –≤ {current_time_msk} –ú–°–ö")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
        await callback.message.edit_text(
            f"üîÑ <b>–ó–∞–ø—É—Å–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {strategy_name}...</b>\n\n"
            f"‚è≥ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...\n"
            f"üìä –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MACD –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—É...\n"
            f"üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Bybit...",
            parse_mode='HTML'
        )
        await callback.answer()

        # –ó–∞–ø—É—Å–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        result = await strategy_manager.start_strategy(callback.from_user.id)

        if result['success']:
            # –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—É—Å–∫
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—Å—Ç–∏–ª —Å—Ç—Ä–∞—Ç–µ–≥–∏—é {strategy_name}")
            await active_trading_menu(callback)

        else:
            # –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞
            error_text = (
                f"‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏</b>\n\n"
                f"üéØ <b>–°—Ç—Ä–∞—Ç–µ–≥–∏—è:</b> {strategy_name}\n"
                f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞:</b> {result['error']}\n\n"
                f"üîß <i>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.</i>"
            )

            await callback.message.edit_text(
                error_text,
                reply_markup=get_back_to_trade_menu(),
                parse_mode='HTML'
            )

            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è {callback.from_user.id}: {result['error']}")

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")

        await callback.message.edit_text(
            f"üö® <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞</b>\n\n"
            f"‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é</b>\n"
            f"üîß <i>–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É</i>\n\n"
            f"<code>–û—à–∏–±–∫–∞: {str(e)}</code>",
            reply_markup=get_back_to_trade_menu(),
            parse_mode='HTML'
        )


@router.callback_query(F.data == "stop_trading")
async def stop_trading(callback: CallbackQuery):
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    if not config.is_user_allowed(callback.from_user.id):
        return

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
        if not strategy_manager.is_strategy_active(callback.from_user.id):
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        strategy_status = strategy_manager.get_strategy_status(callback.from_user.id)
        strategy_name = strategy_status.get('strategy_name', 'MACD Full')
        current_time_msk = format_msk_time()

        logger.info(f"‚èπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é {strategy_name} –≤ {current_time_msk} –ú–°–ö")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
        await callback.message.edit_text(
            f"‚èπÔ∏è <b>–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏...</b>\n\n"
            f"üéØ <b>–°—Ç—Ä–∞—Ç–µ–≥–∏—è:</b> {strategy_name}\n"
            f"‚è≥ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π...\n"
            f"üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤...",
            parse_mode='HTML'
        )
        await callback.answer()

        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        result = await strategy_manager.stop_strategy(callback.from_user.id, "Manual stop by user")

        if result['success']:
            # –£—Å–ø–µ—à–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
            success_text = (
                f"‚èπÔ∏è <b>–°—Ç—Ä–∞—Ç–µ–≥–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞</b>\n\n"
                f"üéØ <b>–°—Ç—Ä–∞—Ç–µ–≥–∏—è:</b> {result['strategy_name']}\n"
                f"‚úÖ <b>–°—Ç–∞—Ç—É—Å:</b> –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º\n\n"
                f"üìä <i>–í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –æ—Å—Ç–∞–ª–∏—Å—å –æ—Ç–∫—Ä—ã—Ç—ã–º–∏.\n"
                f"–£–ø—Ä–∞–≤–ª—è–π—Ç–µ –∏–º–∏ –≤—Ä—É—á–Ω—É—é –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.</i>"
            )

            await callback.message.edit_text(
                success_text,
                reply_markup=get_back_to_trade_menu(),
                parse_mode='HTML'
            )

            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –æ—Å—Ç–∞–Ω–æ–≤–∏–ª —Å—Ç—Ä–∞—Ç–µ–≥–∏—é {result['strategy_name']}")

        else:
            # –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            error_text = (
                f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏</b>\n\n"
                f"‚ùå <b>–û—à–∏–±–∫–∞:</b> {result['error']}\n\n"
                f"üîß <i>–°—Ç—Ä–∞—Ç–µ–≥–∏—è –º–æ–≥–ª–∞ –±—ã—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —á–∞—Å—Ç–∏—á–Ω–æ</i>"
            )

            await callback.message.edit_text(
                error_text,
                reply_markup=get_back_to_trade_menu(),
                parse_mode='HTML'
            )

            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è {callback.from_user.id}: {result['error']}")

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")

        await callback.message.edit_text(
            f"üö® <b>–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏</b>\n\n"
            f"‚ùå <code>{str(e)}</code>\n\n"
            f"üîß <i>–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É</i>",
            reply_markup=get_back_to_trade_menu(),
            parse_mode='HTML'
        )


@router.callback_query(F.data == "active_trading_menu")
async def active_trading_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é –∞–∫—Ç–∏–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ - –ø–æ–∫–∞–∑ —Å—Ç–∞—Ç—É—Å–∞"""
    if not config.is_user_allowed(callback.from_user.id):
        return

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
        if not strategy_manager.is_strategy_active(callback.from_user.id):
            await callback.message.edit_text(
                "‚ùå <b>–ê–∫—Ç–∏–≤–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</b>\n\n"
                "üîÑ <i>–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ —Ç–æ—Ä–≥–æ–≤–æ–µ –º–µ–Ω—é –¥–ª—è –∑–∞–ø—É—Å–∫–∞</i>",
                reply_markup=get_back_to_trade_menu(),
                parse_mode='HTML'
            )
            await callback.answer()
            return

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        status_text = TradeBotUtils.get_trade_menu_text(callback.from_user.id)

        await callback.message.edit_text(
            status_text,
            reply_markup=get_active_trading_menu(),
            parse_mode='HTML'
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ active_trading_menu: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞", show_alert=True)


@router.callback_query(F.data == "trade_statistics")
async def trade_statistics(callback: CallbackQuery):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    if not config.is_user_allowed(callback.from_user.id):
        return

    stats_text = TradeBotUtils.get_statistics_text(callback.from_user.id)

    await callback.message.edit_text(
        stats_text,
        reply_markup=get_statistics_menu(),
        parse_mode='HTML'
    )
    await callback.answer()


@router.callback_query(F.data == "trade_balance")
async def trade_balance(callback: CallbackQuery):
    """–ë–∞–ª–∞–Ω—Å —Å—á—ë—Ç–∞ - —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    if not config.is_user_allowed(callback.from_user.id):
        return

    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        await callback.message.edit_text(
            "üí∞ <b>–ë–∞–ª–∞–Ω—Å —Å—á—ë—Ç–∞ Bybit</b>\n\n"
            "üîÑ <b>–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...</b>\n\n"
            "‚è≥ <i>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit API...</i>",
            parse_mode='HTML'
        )
        await callback.answer()

        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
        balance_text = await TradeBotUtils.get_balance_text(callback.from_user.id)

        await callback.message.edit_text(
            balance_text,
            reply_markup=get_balance_menu(),
            parse_mode='HTML'
        )

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ trade_balance: {e}")

        error_text = (
            f"üí∞ <b>–ë–∞–ª–∞–Ω—Å —Å—á—ë—Ç–∞ Bybit</b>\n\n"
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞</b>\n\n"
            f"üîß <i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API</i>"
        )

        await callback.message.edit_text(
            error_text,
            reply_markup=get_balance_menu(),
            parse_mode='HTML'
        )


@router.callback_query(F.data == "trade_history")
async def trade_history(callback: CallbackQuery):
    """–ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫"""
    if not config.is_user_allowed(callback.from_user.id):
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫ –∏–∑ –ë–î
    trades = db.get_user_trades_history(callback.from_user.id, limit=10)

    if trades:
        history_text = "üìã <b>–ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫</b>\n\n"

        for trade in trades[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5
            side_emoji = "üìà" if trade['side'] == 'LONG' else "üìâ"
            status_emoji = "‚úÖ" if trade['status'] == 'closed' else "üîÑ"

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º P&L
            pnl_text = ""
            if trade['pnl'] is not None:
                try:
                    from src.utils.helpers import format_pnl
                    pnl_formatted = format_pnl(trade['pnl'], with_currency=False)
                    pnl_text = f"\n{pnl_formatted} USDT"
                except (ImportError, AttributeError):
                    # Fallback –µ—Å–ª–∏ helpers –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                    pnl_emoji = "üíö" if trade['pnl'] > 0 else "üíî" if trade['pnl'] < 0 else "üíô"
                    pnl_text = f"\n{pnl_emoji} P&L: {trade['pnl']:.2f} USDT"

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            try:
                from src.utils.helpers import format_quantity
                quantity_formatted = format_quantity(trade['quantity'])
            except (ImportError, AttributeError):
                quantity_formatted = str(trade['quantity'])

            history_text += (
                f"{status_emoji} {side_emoji} <b>{trade['symbol']}</b>\n"
                f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity_formatted}\n"
                f"üìÖ –û—Ç–∫—Ä—ã—Ç–∞: {trade['opened_at'][:16] if trade['opened_at'] else 'N/A'}"
                f"{pnl_text}\n\n"
            )

        if len(trades) > 5:
            history_text += f"<i>... –∏ –µ—â–µ {len(trades) - 5} —Å–¥–µ–ª–æ–∫</i>\n\n"
    else:
        history_text = (
            "üìã <b>–ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫</b>\n\n"
            "üìù <i>–°–¥–µ–ª–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç</i>\n\n"
            "üí° <i>–ü–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∑–¥–µ—Å—å –±—É–¥—É—Ç\n"
            "–æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤—Å–µ –≤–∞—à–∏ —Å–¥–µ–ª–∫–∏</i>\n\n"
        )

    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –ú–°–ö
    update_time_msk = format_msk_time()
    history_text += f"üîÑ <i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {update_time_msk} –ú–°–ö</i>"

    await callback.message.edit_text(
        history_text,
        reply_markup=get_trade_history_menu(),
        parse_mode='HTML'
    )
    await callback.answer()


@router.callback_query(F.data == "refresh_trade_history")
async def refresh_trade_history(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫"""
    if not config.is_user_allowed(callback.from_user.id):
        return

    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        await callback.answer("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏...")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        await callback.message.edit_text(
            "üìã <b>–ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫</b>\n\n"
            "üîÑ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏...</b>\n\n"
            "‚è≥ <i>–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã...</i>",
            parse_mode='HTML'
        )

        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
        await asyncio.sleep(0.5)

        # –í—ã–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
        await trade_history(callback)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è {callback.from_user.id}: {e}")

        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        error_text = (
            f"üìã <b>–ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫</b>\n\n"
            f"‚ùå <b>–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏</b>\n\n"
            f"üîß <i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥</i>\n\n"
            f"üîÑ <i>–í—Ä–µ–º—è: {format_msk_time()} –ú–°–ö</i>"
        )

        await callback.message.edit_text(
            error_text,
            reply_markup=get_trade_history_menu(),
            parse_mode='HTML'
        )


@router.callback_query(F.data == "refresh_balance")
async def refresh_balance(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ - —Å —Ä–µ–∞–ª—å–Ω—ã–º –ø–æ–ª—É—á–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö"""
    if not config.is_user_allowed(callback.from_user.id):
        return

    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        await callback.answer("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞...")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        await callback.message.edit_text(
            "üí∞ <b>–ë–∞–ª–∞–Ω—Å —Å—á—ë—Ç–∞ Bybit</b>\n\n"
            "üîÑ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞...</b>\n\n"
            "‚è≥ <i>–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å –±–∏—Ä–∂–∏...</i>",
            parse_mode='HTML'
        )

        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
        await asyncio.sleep(0.5)

        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
        balance_text = await TradeBotUtils.get_balance_text(callback.from_user.id)

        await callback.message.edit_text(
            balance_text,
            reply_markup=get_balance_menu(),
            parse_mode='HTML'
        )

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è {callback.from_user.id}: {e}")

        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        error_text = (
            f"üí∞ <b>–ë–∞–ª–∞–Ω—Å —Å—á—ë—Ç–∞ Bybit</b>\n\n"
            f"‚ùå <b>–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞</b>\n\n"
            f"üîß <i>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É\n"
            f"–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–µ–π</i>\n\n"
            f"üîÑ <i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥</i>"
        )

        await callback.message.edit_text(
            error_text,
            reply_markup=get_balance_menu(),
            parse_mode='HTML'
        )