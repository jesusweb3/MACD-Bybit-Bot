# src/bot/handlers/settings/settings.py
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from src.bot.keyboards.settings_menu import (
    get_settings_menu, get_api_menu, get_leverage_menu,
    get_timeframes_menu, get_timeframe_selection, get_back_to_settings,
    get_tp_sl_menu, get_back_to_tp_sl
)
from src.bot.states.user_states import SettingsStates
from src.database.database import db
from src.utils.logger import logger

router = Router()


def get_progress_bar(filled: int, total: int) -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞"""
    if total == 0:
        return ""

    filled_blocks = "‚¨ú" * filled
    empty_blocks = "‚¨õ" * (total - filled)
    return filled_blocks + empty_blocks


def count_filled_settings(user_settings: dict, telegram_id: int) -> tuple[int, int]:
    """–ü–æ–¥—Å—á–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    if not user_settings:
        return 0, 8

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö
    api_filled = bool(
        user_settings.get('bybit_api_key') and user_settings.get('bybit_secret_key'))

    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø–æ–¥—Å—á–µ—Ç
    filled_settings = []
    if api_filled:
        filled_settings.append('api')
    if user_settings.get('trading_pair'):
        filled_settings.append('pair')
    if user_settings.get('leverage'):
        filled_settings.append('leverage')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
    position_size_info = db.get_position_size_info(telegram_id)
    if position_size_info and position_size_info.get('value') is not None and position_size_info.get('value') > 0:
        filled_settings.append('position_size')

    # TP/SL —Ç–µ–ø–µ—Ä—å —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ –æ–¥–Ω—É –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
    tp_sl_info = db.get_tp_sl_info(telegram_id)
    if tp_sl_info['enabled'] and tp_sl_info['take_profit'] and tp_sl_info['stop_loss']:
        filled_settings.append('tp_sl')

    if user_settings.get('entry_timeframe'):
        filled_settings.append('entry_tf')
    if user_settings.get('exit_timeframe'):
        filled_settings.append('exit_tf')
    if user_settings.get('bot_duration_hours'):
        filled_settings.append('duration')

    filled_count = len(filled_settings)
    total_count = 8

    return filled_count, total_count


def format_setting_display(value, setting_name: str = "") -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è API —Å—Ç–∞—Ç—É—Å–∞
    if setting_name == "api_status":
        return "‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ" if value else "‚Äî"

    # –û–±—ã—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    if value is None or value == "" or (isinstance(value, (int, float)) and value == 0):
        return "‚Äî"

    if setting_name in ["leverage"]:
        return f"{value}x"
    elif setting_name in ["bot_duration_hours"]:
        return f"{value}—á"
    else:
        return str(value)


def parse_position_size_input(user_input: str) -> dict:
    """–ü–∞—Ä—Å–∏–Ω–≥ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏"""
    try:
        text = user_input.strip().upper()

        if text.endswith('%'):
            # –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –±–∞–ª–∞–Ω—Å–∞
            try:
                percent = float(text[:-1])
                if 1 <= percent <= 100:
                    return {
                        'success': True,
                        'type': 'percentage',
                        'value': percent,
                        'display': f"{percent}%"
                    }
                else:
                    return {
                        'success': False,
                        'error': '–ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1% –¥–æ 100%'
                    }
            except ValueError:
                return {
                    'success': False,
                    'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞'
                }

        elif text.endswith('USDT'):
            # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞
            try:
                amount = float(text[:-4])
                if amount > 0:
                    return {
                        'success': True,
                        'type': 'fixed_usdt',
                        'value': amount,
                        'display': f"{amount}USDT"
                    }
                else:
                    return {
                        'success': False,
                        'error': '–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0'
                    }
            except ValueError:
                return {
                    'success': False,
                    'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã'
                }
        else:
            return {
                'success': False,
                'error': '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: 15% –∏–ª–∏ 100USDT'
            }

    except Exception as e:
        return {
            'success': False,
            'error': f'–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {str(e)}'
        }


async def show_settings_menu(callback: CallbackQuery):
    user_settings = db.get_user_settings(callback.from_user.id)

    if not user_settings:
        settings_text = "‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    else:
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        filled_count, total_count = count_filled_settings(user_settings, callback.from_user.id)
        progress_bar = get_progress_bar(filled_count, total_count)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å API –∫–ª—é—á–µ–π
        api_status = bool(
            user_settings.get('bybit_api_key') and user_settings.get('bybit_secret_key'))

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–º–µ—Ä–µ –ø–æ–∑–∏—Ü–∏–∏
        position_size_info = db.get_position_size_info(callback.from_user.id)
        position_size_display = position_size_info.get('display', '‚Äî')

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ TP/SL
        tp_sl_info = db.get_tp_sl_info(callback.from_user.id)
        tp_sl_display = tp_sl_info.get('display', '‚Äî')

        settings_text = (
            f"üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n\n"
            f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã: {filled_count}/{total_count} {progress_bar}\n\n"
            f"üîë API –∫–ª—é—á–∏: {format_setting_display(api_status, 'api_status')}\n"
            f"üí∞ –ü–∞—Ä–∞: {format_setting_display(user_settings.get('trading_pair'))}\n"
            f"‚ö° –ü–ª–µ—á–æ: {format_setting_display(user_settings.get('leverage'), 'leverage')}\n"
            f"üìä –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {position_size_display}\n"
            f"‚öôÔ∏è TP/SL: {tp_sl_display}\n"
            f"‚è±Ô∏è –¢–§ –≤—Ö–æ–¥–∞: {format_setting_display(user_settings.get('entry_timeframe'))}\n"
            f"‚è±Ô∏è –¢–§ –≤—ã—Ö–æ–¥–∞: {format_setting_display(user_settings.get('exit_timeframe'))}\n"
            f"üïí –†–∞–±–æ—Ç–∞: {format_setting_display(user_settings.get('bot_duration_hours'), 'bot_duration_hours')}"
        )

    await callback.message.edit_text(settings_text, reply_markup=get_settings_menu())


async def show_settings_menu_after_update(message: Message, message_id: int):
    user_settings = db.get_user_settings(message.from_user.id)

    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    filled_count, total_count = count_filled_settings(user_settings, message.from_user.id)
    progress_bar = get_progress_bar(filled_count, total_count)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å API –∫–ª—é—á–µ–π
    api_status = bool(
        user_settings.get('bybit_api_key') and user_settings.get('bybit_secret_key'))

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–º–µ—Ä–µ –ø–æ–∑–∏—Ü–∏–∏
    position_size_info = db.get_position_size_info(message.from_user.id)
    position_size_display = position_size_info.get('display', '‚Äî')

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ TP/SL
    tp_sl_info = db.get_tp_sl_info(message.from_user.id)
    tp_sl_display = tp_sl_info.get('display', '‚Äî')

    settings_text = (
        f"üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n\n"
        f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã: {filled_count}/{total_count} {progress_bar}\n\n"
        f"üîë API –∫–ª—é—á–∏: {format_setting_display(api_status, 'api_status')}\n"
        f"üí∞ –ü–∞—Ä–∞: {format_setting_display(user_settings.get('trading_pair'))}\n"
        f"‚ö° –ü–ª–µ—á–æ: {format_setting_display(user_settings.get('leverage'), 'leverage')}\n"
        f"üìä –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {position_size_display}\n"
        f"‚öôÔ∏è TP/SL: {tp_sl_display}\n"
        f"‚è±Ô∏è –¢–§ –≤—Ö–æ–¥–∞: {format_setting_display(user_settings.get('entry_timeframe'))}\n"
        f"‚è±Ô∏è –¢–§ –≤—ã—Ö–æ–¥–∞: {format_setting_display(user_settings.get('exit_timeframe'))}\n"
        f"üïí –†–∞–±–æ—Ç–∞: {format_setting_display(user_settings.get('bot_duration_hours'), 'bot_duration_hours')}"
    )

    await message.bot.edit_message_text(
        settings_text,
        chat_id=message.chat.id,
        message_id=message_id,
        reply_markup=get_settings_menu()
    )


@router.callback_query(F.data == "settings")
async def settings_menu(callback: CallbackQuery):
    await show_settings_menu(callback)
    await callback.answer()


@router.callback_query(F.data == "settings_tp_sl")
async def tp_sl_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ TP/SL"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ TP/SL
    tp_sl_info = db.get_tp_sl_info(callback.from_user.id)

    enabled = tp_sl_info['enabled']
    take_profit = tp_sl_info['take_profit']
    stop_loss = tp_sl_info['stop_loss']

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ç–µ–∫—É—â–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    status_text = "üü¢ –í–∫–ª—é—á–µ–Ω–æ" if enabled else "üî¥ –í—ã–∫–ª—é—á–µ–Ω–æ"

    tp_text = f"{take_profit} –ø—É–Ω–∫—Ç–æ–≤" if take_profit else "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    sl_text = f"{stop_loss} –ø—É–Ω–∫—Ç–æ–≤" if stop_loss else "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

    menu_text = (
        f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ TP/SL\n\n"
        f"–°—Ç–∞—Ç—É—Å: {status_text}\n\n"
        f"üéØ –¢–µ–π–∫ –ø—Ä–æ—Ñ–∏—Ç: {tp_text}\n"
        f"üõë –°—Ç–æ–ø –ª–æ—Å—Å: {sl_text}\n\n"
        f"üí° TP/SL —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –≤ –ø—É–Ω–∫—Ç–∞—Ö –æ—Ç —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞.\n"
        f"–ù–∞–ø—Ä–∏–º–µ—Ä: –µ—Å–ª–∏ —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞ 100, TP=20 –ø—É–Ω–∫—Ç–æ–≤, —Ç–æ –≤—ã—Ö–æ–¥ –ø–æ 120."
    )

    await callback.message.edit_text(
        menu_text,
        reply_markup=get_tp_sl_menu(is_enabled=enabled)
    )
    await callback.answer()


@router.callback_query(F.data == "tp_sl_enable")
async def enable_tp_sl(callback: CallbackQuery):
    """–í–∫–ª—é—á–µ–Ω–∏–µ TP/SL"""
    db.update_tp_sl_settings(callback.from_user.id, enabled=True)
    await callback.answer("‚úÖ TP/SL –≤–∫–ª—é—á–µ–Ω–æ")
    logger.info(f"User {callback.from_user.id} enabled TP/SL")
    await tp_sl_menu(callback)


@router.callback_query(F.data == "tp_sl_disable")
async def disable_tp_sl(callback: CallbackQuery):
    """–í—ã–∫–ª—é—á–µ–Ω–∏–µ TP/SL"""
    db.update_tp_sl_settings(callback.from_user.id, enabled=False)
    await callback.answer("‚úÖ TP/SL –≤—ã–∫–ª—é—á–µ–Ω–æ")
    logger.info(f"User {callback.from_user.id} disabled TP/SL")
    await tp_sl_menu(callback)


@router.callback_query(F.data == "set_take_profit")
async def set_take_profit(callback: CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–π–∫ –ø—Ä–æ—Ñ–∏—Ç–∞"""
    tp_sl_info = db.get_tp_sl_info(callback.from_user.id)
    current_tp = tp_sl_info.get('take_profit', 0)

    prompt_text = (
        "üéØ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–π–∫ –ø—Ä–æ—Ñ–∏—Ç (–≤ –ø—É–Ω–∫—Ç–∞—Ö —Ü–µ–Ω—ã):\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 50 (–¥–ª—è BTC = +50 USD)"
    )

    if current_tp:
        prompt_text += f"\n\n–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {current_tp} –ø—É–Ω–∫—Ç–æ–≤"

    await callback.message.edit_text(
        prompt_text,
        reply_markup=get_back_to_tp_sl()
    )
    await state.set_state(SettingsStates.waiting_for_take_profit)
    await state.update_data(message_id=callback.message.message_id)
    await callback.answer()


@router.message(SettingsStates.waiting_for_take_profit)
async def process_take_profit(message: Message, state: FSMContext):
    data = await state.get_data()
    message_id = data.get('message_id')
    await message.delete()

    try:
        take_profit = float(message.text.strip())
        if take_profit <= 0:
            await message.bot.edit_message_text(
                "‚ùå –¢–µ–π–∫ –ø—Ä–æ—Ñ–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                chat_id=message.chat.id,
                message_id=message_id,
                reply_markup=get_back_to_tp_sl()
            )
            return
    except ValueError:
        await message.bot.edit_message_text(
            "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            chat_id=message.chat.id,
            message_id=message_id,
            reply_markup=get_back_to_tp_sl()
        )
        return

    db.update_tp_sl_settings(message.from_user.id, take_profit=take_profit)
    await state.clear()
    logger.info(f"User {message.from_user.id} set take profit: {take_profit}")

    await message.bot.edit_message_text(
        f"‚úÖ –¢–µ–π–∫ –ø—Ä–æ—Ñ–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {take_profit} –ø—É–Ω–∫—Ç–æ–≤",
        chat_id=message.chat.id,
        message_id=message_id
    )

    import asyncio
    await asyncio.sleep(1)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é TP/SL
    tp_sl_info = db.get_tp_sl_info(message.from_user.id)
    enabled = tp_sl_info['enabled']
    take_profit = tp_sl_info['take_profit']
    stop_loss = tp_sl_info['stop_loss']

    status_text = "üü¢ –í–∫–ª—é—á–µ–Ω–æ" if enabled else "üî¥ –í—ã–∫–ª—é—á–µ–Ω–æ"
    tp_text = f"{take_profit} –ø—É–Ω–∫—Ç–æ–≤" if take_profit else "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    sl_text = f"{stop_loss} –ø—É–Ω–∫—Ç–æ–≤" if stop_loss else "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

    menu_text = (
        f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ TP/SL\n\n"
        f"–°—Ç–∞—Ç—É—Å: {status_text}\n\n"
        f"üéØ –¢–µ–π–∫ –ø—Ä–æ—Ñ–∏—Ç: {tp_text}\n"
        f"üõë –°—Ç–æ–ø –ª–æ—Å—Å: {sl_text}\n\n"
        f"üí° TP/SL —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –≤ –ø—É–Ω–∫—Ç–∞—Ö –æ—Ç —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞."
    )

    await message.bot.edit_message_text(
        menu_text,
        chat_id=message.chat.id,
        message_id=message_id,
        reply_markup=get_tp_sl_menu(is_enabled=enabled)
    )


@router.callback_query(F.data == "set_stop_loss")
async def set_stop_loss(callback: CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–æ–ø –ª–æ—Å—Å–∞"""
    tp_sl_info = db.get_tp_sl_info(callback.from_user.id)
    current_sl = tp_sl_info.get('stop_loss', 0)

    prompt_text = (
        "üõë –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–ø –ª–æ—Å—Å (–≤ –ø—É–Ω–∫—Ç–∞—Ö —Ü–µ–Ω—ã):\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 75 (–¥–ª—è BTC = -75 USD)"
    )

    if current_sl:
        prompt_text += f"\n\n–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {current_sl} –ø—É–Ω–∫—Ç–æ–≤"

    await callback.message.edit_text(
        prompt_text,
        reply_markup=get_back_to_tp_sl()
    )
    await state.set_state(SettingsStates.waiting_for_stop_loss)
    await state.update_data(message_id=callback.message.message_id)
    await callback.answer()


@router.message(SettingsStates.waiting_for_stop_loss)
async def process_stop_loss(message: Message, state: FSMContext):
    data = await state.get_data()
    message_id = data.get('message_id')
    await message.delete()

    try:
        stop_loss = float(message.text.strip())
        if stop_loss <= 0:
            await message.bot.edit_message_text(
                "‚ùå –°—Ç–æ–ø –ª–æ—Å—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                chat_id=message.chat.id,
                message_id=message_id,
                reply_markup=get_back_to_tp_sl()
            )
            return
    except ValueError:
        await message.bot.edit_message_text(
            "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            chat_id=message.chat.id,
            message_id=message_id,
            reply_markup=get_back_to_tp_sl()
        )
        return

    db.update_tp_sl_settings(message.from_user.id, stop_loss=stop_loss)
    await state.clear()
    logger.info(f"User {message.from_user.id} set stop loss: {stop_loss}")

    await message.bot.edit_message_text(
        f"‚úÖ –°—Ç–æ–ø –ª–æ—Å—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {stop_loss} –ø—É–Ω–∫—Ç–æ–≤",
        chat_id=message.chat.id,
        message_id=message_id
    )

    import asyncio
    await asyncio.sleep(1)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é TP/SL
    tp_sl_info = db.get_tp_sl_info(message.from_user.id)
    enabled = tp_sl_info['enabled']
    take_profit = tp_sl_info['take_profit']
    stop_loss = tp_sl_info['stop_loss']

    status_text = "üü¢ –í–∫–ª—é—á–µ–Ω–æ" if enabled else "üî¥ –í—ã–∫–ª—é—á–µ–Ω–æ"
    tp_text = f"{take_profit} –ø—É–Ω–∫—Ç–æ–≤" if take_profit else "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    sl_text = f"{stop_loss} –ø—É–Ω–∫—Ç–æ–≤" if stop_loss else "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

    menu_text = (
        f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ TP/SL\n\n"
        f"–°—Ç–∞—Ç—É—Å: {status_text}\n\n"
        f"üéØ –¢–µ–π–∫ –ø—Ä–æ—Ñ–∏—Ç: {tp_text}\n"
        f"üõë –°—Ç–æ–ø –ª–æ—Å—Å: {sl_text}\n\n"
        f"üí° TP/SL —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –≤ –ø—É–Ω–∫—Ç–∞—Ö –æ—Ç —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞."
    )

    await message.bot.edit_message_text(
        menu_text,
        chat_id=message.chat.id,
        message_id=message_id,
        reply_markup=get_tp_sl_menu(is_enabled=enabled)
    )


@router.callback_query(F.data == "settings_api")
async def api_menu(callback: CallbackQuery):
    user_settings = db.get_user_settings(callback.from_user.id)

    api_key_status = "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" if (
            user_settings and user_settings.get('bybit_api_key')) else "‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    secret_key_status = "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" if (
            user_settings and user_settings.get('bybit_secret_key')) else "‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

    api_text = (
        f"üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API\n\n"
        f"API –∫–ª—é—á: {api_key_status}\n"
        f"Secret –∫–ª—é—á: {secret_key_status}\n\n"
        f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª—é—á–∏ —Å –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ —Ç–æ—Ä–≥–æ–≤–ª—é"
    )

    await callback.message.edit_text(api_text, reply_markup=get_api_menu())
    await callback.answer()


@router.callback_query(F.data == "set_api_key")
async def set_api_key(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üîë –í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á:\n\n"
        "‚ö†Ô∏è –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–ª—é—á –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ —Ç–æ—Ä–≥–æ–≤–ª—é",
        reply_markup=get_back_to_settings()
    )
    await state.set_state(SettingsStates.waiting_for_api_key)
    await state.update_data(message_id=callback.message.message_id)
    await callback.answer()


@router.message(SettingsStates.waiting_for_api_key)
async def process_api_key(message: Message, state: FSMContext):
    api_key = message.text.strip()
    data = await state.get_data()
    message_id = data.get('message_id')
    await message.delete()

    if len(api_key) < 10:
        await message.bot.edit_message_text(
            "‚ùå API –∫–ª—é—á —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            chat_id=message.chat.id,
            message_id=message_id,
            reply_markup=get_back_to_settings()
        )
        return

    db.update_user_settings(message.from_user.id, bybit_api_key=api_key)
    await state.clear()
    logger.info(f"User {message.from_user.id} updated API key")

    user_settings = db.get_user_settings(message.from_user.id)
    api_key_status = "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" if user_settings.get('bybit_api_key') else "‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    secret_key_status = "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" if user_settings.get('bybit_secret_key') else "‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

    api_text = (
        f"üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API\n\n"
        f"API –∫–ª—é—á: {api_key_status}\n"
        f"Secret –∫–ª—é—á: {secret_key_status}\n\n"
        f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª—é—á–∏ —Å –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ —Ç–æ—Ä–≥–æ–≤–ª—é\n\n"
        f"‚úÖ API –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!"
    )

    await message.bot.edit_message_text(
        api_text,
        chat_id=message.chat.id,
        message_id=message_id,
        reply_markup=get_api_menu()
    )


@router.callback_query(F.data == "set_secret_key")
async def set_secret_key(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üîê –í–≤–µ–¥–∏—Ç–µ Secret –∫–ª—é—á:\n\n"
        "‚ö†Ô∏è –≠—Ç–æ—Ç –∫–ª—é—á –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ",
        reply_markup=get_back_to_settings()
    )
    await state.set_state(SettingsStates.waiting_for_secret_key)
    await state.update_data(message_id=callback.message.message_id)
    await callback.answer()


@router.message(SettingsStates.waiting_for_secret_key)
async def process_secret_key(message: Message, state: FSMContext):
    secret_key = message.text.strip()
    data = await state.get_data()
    message_id = data.get('message_id')
    await message.delete()

    if len(secret_key) < 10:
        await message.bot.edit_message_text(
            "‚ùå Secret –∫–ª—é—á —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            chat_id=message.chat.id,
            message_id=message_id,
            reply_markup=get_back_to_settings()
        )
        return

    db.update_user_settings(message.from_user.id, bybit_secret_key=secret_key)
    await state.clear()
    logger.info(f"User {message.from_user.id} updated secret key")

    user_settings = db.get_user_settings(message.from_user.id)
    api_key_status = "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" if user_settings.get('bybit_api_key') else "‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    secret_key_status = "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" if user_settings.get('bybit_secret_key') else "‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

    api_text = (
        f"üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API\n\n"
        f"API –∫–ª—é—á: {api_key_status}\n"
        f"Secret –∫–ª—é—á: {secret_key_status}\n\n"
        f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª—é—á–∏ —Å –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ —Ç–æ—Ä–≥–æ–≤–ª—é\n\n"
        f"‚úÖ Secret –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!"
    )

    await message.bot.edit_message_text(
        api_text,
        chat_id=message.chat.id,
        message_id=message_id,
        reply_markup=get_api_menu()
    )


@router.callback_query(F.data == "settings_pair")
async def set_trading_pair(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üí∞ –í–≤–µ–¥–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: BTCUSDT, ETHUSDT):",
        reply_markup=get_back_to_settings()
    )
    await state.set_state(SettingsStates.waiting_for_trading_pair)
    await state.update_data(message_id=callback.message.message_id)
    await callback.answer()


@router.message(SettingsStates.waiting_for_trading_pair)
async def process_trading_pair(message: Message, state: FSMContext):
    pair = message.text.strip().upper()
    data = await state.get_data()
    message_id = data.get('message_id')
    await message.delete()

    if not pair or len(pair) < 5:
        await message.bot.edit_message_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–∞—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ (–Ω–∞–ø—Ä–∏–º–µ—Ä: BTCUSDT):",
            chat_id=message.chat.id,
            message_id=message_id,
            reply_markup=get_back_to_settings()
        )
        return

    db.update_user_settings(message.from_user.id, trading_pair=pair)
    await state.clear()
    logger.info(f"User {message.from_user.id} set trading pair: {pair}")
    await show_settings_menu_after_update(message, message_id)


@router.callback_query(F.data == "settings_leverage")
async def leverage_menu(callback: CallbackQuery):
    await callback.message.edit_text(
        "‚ö° –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–µ—á–æ (–æ—Ç 3x –¥–æ 10x):",
        reply_markup=get_leverage_menu()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("leverage_"))
async def process_leverage(callback: CallbackQuery):
    leverage = int(callback.data.split("_")[1])

    if leverage < 3 or leverage > 10:
        await callback.answer("‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –ø–ª–µ—á–æ", show_alert=True)
        return

    db.update_user_settings(callback.from_user.id, leverage=leverage)
    await callback.answer(f"‚úÖ –ü–ª–µ—á–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {leverage}x")
    logger.info(f"User {callback.from_user.id} set leverage: {leverage}")
    await show_settings_menu(callback)


@router.callback_query(F.data == "settings_position_size")
async def set_position_size(callback: CallbackQuery, state: FSMContext):
    position_size_info = db.get_position_size_info(callback.from_user.id)
    current_display = position_size_info.get('display', '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')

    await callback.message.edit_text(
        f"üìä –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏, –ø—Ä–∏–º–µ—Ä:\n"
        f"15%\n"
        f"100USDT\n\n"
        f"–¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä: {current_display}",
        reply_markup=get_back_to_settings()
    )
    await state.set_state(SettingsStates.waiting_for_position_size)
    await state.update_data(message_id=callback.message.message_id)
    await callback.answer()


@router.message(SettingsStates.waiting_for_position_size)
async def process_position_size(message: Message, state: FSMContext):
    data = await state.get_data()
    message_id = data.get('message_id')
    await message.delete()

    parse_result = parse_position_size_input(message.text)

    if not parse_result['success']:
        await message.bot.edit_message_text(
            f"‚ùå {parse_result['error']}\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:\n"
            f"15%\n"
            f"100USDT",
            chat_id=message.chat.id,
            message_id=message_id,
            reply_markup=get_back_to_settings()
        )
        return

    db.update_position_size(
        telegram_id=message.from_user.id,
        size_type=parse_result['type'],
        size_value=parse_result['value']
    )

    await state.clear()
    logger.info(f"User {message.from_user.id} set position size: {parse_result['display']}")
    await show_settings_menu_after_update(message, message_id)


@router.callback_query(F.data == "settings_timeframes")
async def timeframes_menu(callback: CallbackQuery):
    user_settings = db.get_user_settings(callback.from_user.id)
    entry_tf = user_settings.get('entry_timeframe') if user_settings else None
    exit_tf = user_settings.get('exit_timeframe') if user_settings else None

    entry_text = entry_tf if entry_tf else "‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    exit_text = exit_tf if exit_tf else "‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

    await callback.message.edit_text(
        f"‚è±Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤\n\n"
        f"üìà –¢–§ –≤—Ö–æ–¥–∞: {entry_text}\n"
        f"üìâ –¢–§ –≤—ã—Ö–æ–¥–∞: {exit_text}\n\n"
        f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –¢–§: 5m, 15m, 45m, 50m, 55m, 1h, 2h, 3h, 4h",
        reply_markup=get_timeframes_menu()
    )
    await callback.answer()


@router.callback_query(F.data == "set_entry_timeframe")
async def set_entry_timeframe(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üìà –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ø–æ–∑–∏—Ü–∏—é:\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ: 5m, 15m, 45m, 50m, 55m, 1h, 2h, 3h, 4h",
        reply_markup=get_timeframe_selection()
    )
    await state.update_data(setting_type="entry", message_id=callback.message.message_id)
    await callback.answer()


@router.callback_query(F.data == "set_exit_timeframe")
async def set_exit_timeframe(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üìâ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏:\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ: 5m, 15m, 45m, 50m, 55m, 1h, 2h, 3h, 4h",
        reply_markup=get_timeframe_selection()
    )
    await state.update_data(setting_type="exit", message_id=callback.message.message_id)
    await callback.answer()


@router.callback_query(F.data.startswith("tf_"))
async def process_timeframe(callback: CallbackQuery, state: FSMContext):
    timeframe = callback.data.split("_")[1]
    data = await state.get_data()
    setting_type = data.get("setting_type")

    if setting_type == "entry":
        db.update_user_settings(callback.from_user.id, entry_timeframe=timeframe)
        await callback.answer(f"‚úÖ –¢–§ –≤—Ö–æ–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {timeframe}")
        logger.info(f"User {callback.from_user.id} set entry timeframe: {timeframe}")
    elif setting_type == "exit":
        db.update_user_settings(callback.from_user.id, exit_timeframe=timeframe)
        await callback.answer(f"‚úÖ –¢–§ –≤—ã—Ö–æ–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {timeframe}")
        logger.info(f"User {callback.from_user.id} set exit timeframe: {timeframe}")

    await state.clear()

    user_settings = db.get_user_settings(callback.from_user.id)
    entry_tf = user_settings.get('entry_timeframe') if user_settings else None
    exit_tf = user_settings.get('exit_timeframe') if user_settings else None

    entry_text = entry_tf if entry_tf else "‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    exit_text = exit_tf if exit_tf else "‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

    await callback.message.edit_text(
        f"‚è±Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤\n\n"
        f"üìà –¢–§ –≤—Ö–æ–¥–∞: {entry_text}\n"
        f"üìâ –¢–§ –≤—ã—Ö–æ–¥–∞: {exit_text}\n\n"
        f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –¢–§: 5m, 15m, 45m, 50m, 55m, 1h, 2h, 3h, 4h",
        reply_markup=get_timeframes_menu()
    )


@router.callback_query(F.data == "settings_duration")
async def set_bot_duration(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üïí –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –≤ —á–∞—Å–∞—Ö:\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 168 (–Ω–µ–¥–µ–ª—è), 24 (—Å—É—Ç–∫–∏)",
        reply_markup=get_back_to_settings()
    )
    await state.set_state(SettingsStates.waiting_for_bot_duration)
    await state.update_data(message_id=callback.message.message_id)
    await callback.answer()


@router.message(SettingsStates.waiting_for_bot_duration)
async def process_bot_duration(message: Message, state: FSMContext):
    data = await state.get_data()
    message_id = data.get('message_id')
    await message.delete()

    try:
        duration = int(message.text.strip())
        if duration <= 0:
            await message.bot.edit_message_text(
                "‚ùå –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                chat_id=message.chat.id,
                message_id=message_id,
                reply_markup=get_back_to_settings()
            )
            return
    except ValueError:
        await message.bot.edit_message_text(
            "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ —á–∞—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            chat_id=message.chat.id,
            message_id=message_id,
            reply_markup=get_back_to_settings()
        )
        return

    db.update_user_settings(message.from_user.id, bot_duration_hours=duration)
    await state.clear()
    logger.info(f"User {message.from_user.id} set bot duration: {duration} hours")
    await show_settings_menu_after_update(message, message_id)