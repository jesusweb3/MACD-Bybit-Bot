# src/bot/handlers/settings/settings.py
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from src.bot.keyboards.settings_menu import (
    get_settings_menu, get_api_menu, get_leverage_menu,
    get_timeframe_menu, get_back_to_settings
)
from src.bot.states.user_states import SettingsStates
from src.database.database import db
from src.utils.logger import logger

router = Router()


def get_progress_bar(filled: int, total: int) -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞"""
    if total == 0:
        return ""

    filled_blocks = "‚¨ú" * filled
    empty_blocks = "‚¨õ" * (total - filled)
    return filled_blocks + empty_blocks


def count_filled_settings(user_settings: dict, telegram_id: int) -> tuple[int, int]:
    """–ü–æ–¥—Å—á–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    if not user_settings:
        return 0, 5

    filled_settings = []

    # API –∫–ª—é—á–∏
    if user_settings.get('bybit_api_key') and user_settings.get('bybit_secret_key'):
        filled_settings.append('api')

    # –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
    if user_settings.get('trading_pair'):
        filled_settings.append('pair')

    # –ü–ª–µ—á–æ
    if user_settings.get('leverage'):
        filled_settings.append('leverage')

    # –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
    position_size_info = db.get_position_size_info(telegram_id)
    if position_size_info and position_size_info.get('value') is not None and position_size_info.get('value') > 0:
        filled_settings.append('position_size')

    # –¢–∞–π–º—Ñ—Ä–µ–π–º
    if user_settings.get('timeframe'):
        filled_settings.append('timeframe')

    filled_count = len(filled_settings)
    total_count = 5

    return filled_count, total_count


def format_setting_display(value, setting_name: str = "") -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if setting_name == "api_status":
        return "‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ" if value else "‚Äî"

    if value is None or value == "" or (isinstance(value, (int, float)) and value == 0):
        return "‚Äî"

    if setting_name in ["leverage"]:
        return f"{value}x"
    else:
        return str(value)


def parse_position_size_input(user_input: str) -> dict:
    """–ü–∞—Ä—Å–∏–Ω–≥ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏"""
    try:
        text = user_input.strip().upper()

        if text.endswith('%'):
            try:
                percent = float(text[:-1])
                if 1 <= percent <= 100:
                    return {
                        'success': True,
                        'type': 'percentage',
                        'value': percent,
                        'display': f"{percent}%"
                    }
                else:
                    return {
                        'success': False,
                        'error': '–ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1% –¥–æ 100%'
                    }
            except ValueError:
                return {
                    'success': False,
                    'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞'
                }

        elif text.endswith('USDT'):
            try:
                amount = float(text[:-4])
                if amount > 0:
                    return {
                        'success': True,
                        'type': 'fixed_usdt',
                        'value': amount,
                        'display': f"{amount}USDT"
                    }
                else:
                    return {
                        'success': False,
                        'error': '–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0'
                    }
            except ValueError:
                return {
                    'success': False,
                    'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã'
                }
        else:
            return {
                'success': False,
                'error': '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: 15% –∏–ª–∏ 100USDT'
            }

    except Exception as e:
        return {
            'success': False,
            'error': f'–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {str(e)}'
        }


async def show_settings_menu(callback: CallbackQuery):
    user_settings = db.get_user_settings(callback.from_user.id)

    if not user_settings:
        settings_text = "‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    else:
        filled_count, total_count = count_filled_settings(user_settings, callback.from_user.id)
        progress_bar = get_progress_bar(filled_count, total_count)

        # API —Å—Ç–∞—Ç—É—Å
        api_status = bool(user_settings.get('bybit_api_key') and user_settings.get('bybit_secret_key'))

        # –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
        position_size_info = db.get_position_size_info(callback.from_user.id)
        position_size_display = position_size_info.get('display', '‚Äî')

        settings_text = (
            f"üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n\n"
            f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã: {filled_count}/{total_count} {progress_bar}\n\n"
            f"üîë API –∫–ª—é—á–∏: {format_setting_display(api_status, 'api_status')}\n"
            f"üí∞ –ü–∞—Ä–∞: {format_setting_display(user_settings.get('trading_pair'))}\n"
            f"‚ö° –ü–ª–µ—á–æ: {format_setting_display(user_settings.get('leverage'), 'leverage')}\n"
            f"üìä –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {position_size_display}\n"
            f"‚è±Ô∏è –¢–∞–π–º—Ñ—Ä–µ–π–º: {format_setting_display(user_settings.get('timeframe'))}"
        )

    await callback.message.edit_text(settings_text, reply_markup=get_settings_menu())


async def show_settings_menu_after_update(message: Message, message_id: int):
    user_settings = db.get_user_settings(message.from_user.id)

    filled_count, total_count = count_filled_settings(user_settings, message.from_user.id)
    progress_bar = get_progress_bar(filled_count, total_count)

    # API —Å—Ç–∞—Ç—É—Å
    api_status = bool(user_settings.get('bybit_api_key') and user_settings.get('bybit_secret_key'))

    # –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
    position_size_info = db.get_position_size_info(message.from_user.id)
    position_size_display = position_size_info.get('display', '‚Äî')

    settings_text = (
        f"üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n\n"
        f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã: {filled_count}/{total_count} {progress_bar}\n\n"
        f"üîë API –∫–ª—é—á–∏: {format_setting_display(api_status, 'api_status')}\n"
        f"üí∞ –ü–∞—Ä–∞: {format_setting_display(user_settings.get('trading_pair'))}\n"
        f"‚ö° –ü–ª–µ—á–æ: {format_setting_display(user_settings.get('leverage'), 'leverage')}\n"
        f"üìä –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {position_size_display}\n"
        f"‚è±Ô∏è –¢–∞–π–º—Ñ—Ä–µ–π–º: {format_setting_display(user_settings.get('timeframe'))}"
    )

    await message.bot.edit_message_text(
        settings_text,
        chat_id=message.chat.id,
        message_id=message_id,
        reply_markup=get_settings_menu()
    )


@router.callback_query(F.data == "settings")
async def settings_menu(callback: CallbackQuery):
    await show_settings_menu(callback)
    await callback.answer()


# API –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@router.callback_query(F.data == "settings_api")
async def api_menu(callback: CallbackQuery):
    user_settings = db.get_user_settings(callback.from_user.id)

    api_key_status = "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" if (
            user_settings and user_settings.get('bybit_api_key')) else "‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    secret_key_status = "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" if (
            user_settings and user_settings.get('bybit_secret_key')) else "‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

    api_text = (
        f"üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API\n\n"
        f"API –∫–ª—é—á: {api_key_status}\n"
        f"Secret –∫–ª—é—á: {secret_key_status}\n\n"
        f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª—é—á–∏ —Å –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ —Ç–æ—Ä–≥–æ–≤–ª—é"
    )

    await callback.message.edit_text(api_text, reply_markup=get_api_menu())
    await callback.answer()


@router.callback_query(F.data == "set_api_key")
async def set_api_key(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üîë –í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á:\n\n"
        "‚ö†Ô∏è –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–ª—é—á –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ —Ç–æ—Ä–≥–æ–≤–ª—é",
        reply_markup=get_back_to_settings()
    )
    await state.set_state(SettingsStates.waiting_for_api_key)
    await state.update_data(message_id=callback.message.message_id)
    await callback.answer()


@router.message(SettingsStates.waiting_for_api_key)
async def process_api_key(message: Message, state: FSMContext):
    api_key = message.text.strip()
    data = await state.get_data()
    message_id = data.get('message_id')
    await message.delete()

    if len(api_key) < 10:
        await message.bot.edit_message_text(
            "‚ùå API –∫–ª—é—á —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            chat_id=message.chat.id,
            message_id=message_id,
            reply_markup=get_back_to_settings()
        )
        return

    db.update_user_settings(message.from_user.id, bybit_api_key=api_key)
    await state.clear()
    logger.info(f"‚öôÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ–±–Ω–æ–≤–∏–ª API –∫–ª—é—á")

    user_settings = db.get_user_settings(message.from_user.id)
    api_key_status = "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" if user_settings.get('bybit_api_key') else "‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    secret_key_status = "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" if user_settings.get('bybit_secret_key') else "‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

    api_text = (
        f"üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API\n\n"
        f"API –∫–ª—é—á: {api_key_status}\n"
        f"Secret –∫–ª—é—á: {secret_key_status}\n\n"
        f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª—é—á–∏ —Å –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ —Ç–æ—Ä–≥–æ–≤–ª—é\n\n"
        f"‚úÖ API –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!"
    )

    await message.bot.edit_message_text(
        api_text,
        chat_id=message.chat.id,
        message_id=message_id,
        reply_markup=get_api_menu()
    )


@router.callback_query(F.data == "set_secret_key")
async def set_secret_key(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üîê –í–≤–µ–¥–∏—Ç–µ Secret –∫–ª—é—á:\n\n"
        "‚ö†Ô∏è –≠—Ç–æ—Ç –∫–ª—é—á –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ",
        reply_markup=get_back_to_settings()
    )
    await state.set_state(SettingsStates.waiting_for_secret_key)
    await state.update_data(message_id=callback.message.message_id)
    await callback.answer()


@router.message(SettingsStates.waiting_for_secret_key)
async def process_secret_key(message: Message, state: FSMContext):
    secret_key = message.text.strip()
    data = await state.get_data()
    message_id = data.get('message_id')
    await message.delete()

    if len(secret_key) < 10:
        await message.bot.edit_message_text(
            "‚ùå Secret –∫–ª—é—á —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            chat_id=message.chat.id,
            message_id=message_id,
            reply_markup=get_back_to_settings()
        )
        return

    db.update_user_settings(message.from_user.id, bybit_secret_key=secret_key)
    await state.clear()
    logger.info(f"‚öôÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ–±–Ω–æ–≤–∏–ª Secret –∫–ª—é—á")

    user_settings = db.get_user_settings(message.from_user.id)
    api_key_status = "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" if user_settings.get('bybit_api_key') else "‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    secret_key_status = "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" if user_settings.get('bybit_secret_key') else "‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

    api_text = (
        f"üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API\n\n"
        f"API –∫–ª—é—á: {api_key_status}\n"
        f"Secret –∫–ª—é—á: {secret_key_status}\n\n"
        f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª—é—á–∏ —Å –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ —Ç–æ—Ä–≥–æ–≤–ª—é\n\n"
        f"‚úÖ Secret –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!"
    )

    await message.bot.edit_message_text(
        api_text,
        chat_id=message.chat.id,
        message_id=message_id,
        reply_markup=get_api_menu()
    )


@router.callback_query(F.data == "settings_pair")
async def set_trading_pair(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üí∞ –í–≤–µ–¥–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: BTCUSDT, ETHUSDT):",
        reply_markup=get_back_to_settings()
    )
    await state.set_state(SettingsStates.waiting_for_trading_pair)
    await state.update_data(message_id=callback.message.message_id)
    await callback.answer()


@router.message(SettingsStates.waiting_for_trading_pair)
async def process_trading_pair(message: Message, state: FSMContext):
    pair = message.text.strip().upper()
    data = await state.get_data()
    message_id = data.get('message_id')
    await message.delete()

    if not pair or len(pair) < 5:
        await message.bot.edit_message_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–∞—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ (–Ω–∞–ø—Ä–∏–º–µ—Ä: BTCUSDT):",
            chat_id=message.chat.id,
            message_id=message_id,
            reply_markup=get_back_to_settings()
        )
        return

    db.update_user_settings(message.from_user.id, trading_pair=pair)
    await state.clear()
    logger.info(f"‚öôÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —É—Å—Ç–∞–Ω–æ–≤–∏–ª —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É: {pair}")
    await show_settings_menu_after_update(message, message_id)


@router.callback_query(F.data == "settings_leverage")
async def leverage_menu(callback: CallbackQuery):
    await callback.message.edit_text(
        "‚ö° –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–µ—á–æ (–æ—Ç 3x –¥–æ 10x):",
        reply_markup=get_leverage_menu()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("leverage_"))
async def process_leverage(callback: CallbackQuery):
    leverage = int(callback.data.split("_")[1])

    if leverage < 3 or leverage > 10:
        await callback.answer("‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –ø–ª–µ—á–æ", show_alert=True)
        return

    db.update_user_settings(callback.from_user.id, leverage=leverage)
    await callback.answer(f"‚úÖ –ü–ª–µ—á–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {leverage}x")
    logger.info(f"‚öôÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} —É—Å—Ç–∞–Ω–æ–≤–∏–ª –ø–ª–µ—á–æ: {leverage}x")
    await show_settings_menu(callback)


@router.callback_query(F.data == "settings_position_size")
async def set_position_size(callback: CallbackQuery, state: FSMContext):
    position_size_info = db.get_position_size_info(callback.from_user.id)
    current_display = position_size_info.get('display', '‚Äî')

    await callback.message.edit_text(
        f"üìä –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏, –ø—Ä–∏–º–µ—Ä:\n"
        f"15%\n"
        f"100USDT\n\n"
        f"–¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä: {current_display}",
        reply_markup=get_back_to_settings()
    )
    await state.set_state(SettingsStates.waiting_for_position_size)
    await state.update_data(message_id=callback.message.message_id)
    await callback.answer()


@router.message(SettingsStates.waiting_for_position_size)
async def process_position_size(message: Message, state: FSMContext):
    data = await state.get_data()
    message_id = data.get('message_id')
    await message.delete()

    parse_result = parse_position_size_input(message.text)

    if not parse_result['success']:
        await message.bot.edit_message_text(
            f"‚ùå {parse_result['error']}\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:\n"
            f"15%\n"
            f"100USDT",
            chat_id=message.chat.id,
            message_id=message_id,
            reply_markup=get_back_to_settings()
        )
        return

    db.update_position_size(
        telegram_id=message.from_user.id,
        size_type=parse_result['type'],
        size_value=parse_result['value']
    )

    await state.clear()
    logger.info(f"‚öôÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —É—Å—Ç–∞–Ω–æ–≤–∏–ª —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {parse_result['display']}")
    await show_settings_menu_after_update(message, message_id)


@router.callback_query(F.data == "settings_timeframe")
async def timeframe_menu(callback: CallbackQuery):
    """–£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –µ–¥–∏–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞"""
    user_settings = db.get_user_settings(callback.from_user.id)
    current_timeframe = user_settings.get('timeframe') if user_settings else None

    current_text = current_timeframe if current_timeframe else "‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

    await callback.message.edit_text(
        f"‚è±Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º –¥–ª—è MACD —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏\n\n"
        f"üìä –¢–µ–∫—É—â–∏–π: {current_text}\n\n"
        f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ: 5m, 45m",
        reply_markup=get_timeframe_menu()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("tf_"))
async def process_timeframe(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞"""
    timeframe = callback.data.split("_")[1]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
    if timeframe not in ["5m", "45m"]:
        await callback.answer("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º", show_alert=True)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –µ–¥–∏–Ω—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º
    db.update_user_settings(callback.from_user.id, timeframe=timeframe)
    await callback.answer(f"‚úÖ –¢–∞–π–º—Ñ—Ä–µ–π–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {timeframe}")
    logger.info(f"‚öôÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} —É—Å—Ç–∞–Ω–æ–≤–∏–ª —Ç–∞–π–º—Ñ—Ä–µ–π–º: {timeframe}")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
    await show_settings_menu(callback)