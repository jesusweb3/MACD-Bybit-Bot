# src/bot/utils/trade_utils.py
from typing import Dict, Any
from ...database.database import db
from ...utils.logger import logger
from ...utils.helpers import format_msk_time
from ...exchange.bybit import BybitClient


class TradeBotStatus:
    """–°—Ç–∞—Ç—É—Å—ã —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
    WAITING = "waiting"
    TRADING = "trading"
    STOPPED = "stopped"
    ERROR = "error"


class TradeBotUtils:
    """–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ —Å MACD Full —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π"""

    @staticmethod
    def check_settings_completeness(telegram_id: int) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_settings = db.get_user_settings(telegram_id)

        if not user_settings:
            return {
                'complete': False,
                'missing_count': 5,
                'total_count': 5,
                'missing_settings': [
                    'API –∫–ª—é—á–∏', '–¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞', '–ü–ª–µ—á–æ', '–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏', '–¢–∞–π–º—Ñ—Ä–µ–π–º'
                ]
            }

        missing_settings = []

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á–∏
        if not (user_settings.get('bybit_api_key') and user_settings.get('bybit_secret_key')):
            missing_settings.append('API –∫–ª—é—á–∏')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É
        if not user_settings.get('trading_pair'):
            missing_settings.append('–¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–µ—á–æ
        if not user_settings.get('leverage'):
            missing_settings.append('–ü–ª–µ—á–æ')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
        position_size_info = db.get_position_size_info(telegram_id)
        if not position_size_info.get('value') or position_size_info.get('value') <= 0:
            missing_settings.append('–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º
        timeframe = user_settings.get('timeframe')
        if not timeframe or timeframe not in ['5m', '45m']:
            missing_settings.append('–¢–∞–π–º—Ñ—Ä–µ–π–º')

        total_count = 5
        missing_count = len(missing_settings)
        complete = missing_count == 0

        return {
            'complete': complete,
            'missing_count': missing_count,
            'total_count': total_count,
            'missing_settings': missing_settings,
            'progress': total_count - missing_count
        }

    @staticmethod
    def get_trade_menu_text(telegram_id: int) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –º–µ–Ω—é"""
        from ...strategy import strategy_manager

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings_info = TradeBotUtils.check_settings_completeness(telegram_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
        is_strategy_active = strategy_manager.is_strategy_active(telegram_id)

        if is_strategy_active:
            # –ï—Å–ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∞–∫—Ç–∏–≤–Ω–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π —Å—Ç–∞—Ç—É—Å
            strategy_status = strategy_manager.get_strategy_status(telegram_id)
            strategy_name = strategy_status.get('strategy_name', 'MACD Full')

            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            user_settings = db.get_user_settings(telegram_id)
            trading_pair = user_settings.get('trading_pair', 'Unknown') if user_settings else 'Unknown'
            leverage = user_settings.get('leverage', 'Unknown') if user_settings else 'Unknown'
            timeframe = user_settings.get('timeframe', 'Unknown') if user_settings else 'Unknown'

            # –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
            position_size_info = db.get_position_size_info(telegram_id)
            position_size = position_size_info.get('display', 'Unknown')

            text = (
                f"ü§ñ <b>–¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç MACD</b>\n\n"
                f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> üöÄ –°—Ç—Ä–∞—Ç–µ–≥–∏—è –∑–∞–ø—É—â–µ–Ω–∞!\n\n"
                f"üéØ <b>–°—Ç—Ä–∞—Ç–µ–≥–∏—è:</b> {strategy_name}\n"
                f"üí∞ <b>–ü–∞—Ä–∞:</b> {trading_pair}\n"
                f"‚ö° <b>–ü–ª–µ—á–æ:</b> {leverage}x\n"
                f"üìä <b>–†–∞–∑–º–µ—Ä:</b> {position_size}\n"
                f"‚è±Ô∏è <b>–¢–∞–π–º—Ñ—Ä–µ–π–º:</b> {timeframe}"
            )

        else:
            # –ï—Å–ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫
            if settings_info['complete']:
                settings_status = "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã"
                settings_emoji = "üü¢"
                bot_status = "‚è≥ –û–∂–∏–¥–∞–µ—Ç –∑–∞–ø—É—Å–∫–∞"
            else:
                settings_status = f"‚ùå –ù–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã ({settings_info['progress']}/{settings_info['total_count']})"
                settings_emoji = "üî¥"
                bot_status = "‚öôÔ∏è –û–∂–∏–¥–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"

            text = (
                f"ü§ñ <b>–¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç MACD</b>\n\n"
                f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {bot_status}\n"
                f"{settings_emoji} <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b> {settings_status}\n\n"
            )

            if settings_info['complete']:
                # –ö–æ–≥–¥–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
                text += f"üéØ <b>–ì–æ—Ç–æ–≤ –∫ —Ç–æ—Ä–≥–æ–≤–ª–µ!</b> –ó–∞–ø—É—Å—Ç–∏—Ç–µ MACD Full —Å—Ç—Ä–∞—Ç–µ–≥–∏—é."
            else:
                # –ö–æ–≥–¥–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –Ω—É–∂–Ω–æ –¥–æ–¥–µ–ª–∞—Ç—å
                text += (
                    f"‚ö†Ô∏è <b>–ó–∞–≤–µ—Ä—à–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b> "
                )

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                missing_short = settings_info['missing_settings'][:3]
                text += ", ".join(missing_short)

                if len(settings_info['missing_settings']) > 3:
                    remaining = len(settings_info['missing_settings']) - 3
                    text += f" –∏ –µ—â—ë {remaining}"

        return text

    @staticmethod
    def get_strategy_confirm_text(strategy_name: str, telegram_id: int) -> str:
        """–¢–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è MACD Full —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_settings = db.get_user_settings(telegram_id)

        if not user_settings:
            return "‚ùå –û—à–∏–±–∫–∞: –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
        trading_pair = user_settings.get('trading_pair', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞')
        leverage = user_settings.get('leverage', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
        timeframe = user_settings.get('timeframe', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')

        # –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
        position_size_info = db.get_position_size_info(telegram_id)
        position_size = position_size_info.get('display', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')

        text = (
            f"üöÄ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞</b>\n\n"
            f"üéØ <b>–°—Ç—Ä–∞—Ç–µ–≥–∏—è:</b> MACD Full (Long + Short)\n\n"
            f"<b>üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ—Ä–≥–æ–≤–ª–∏:</b>\n"
            f"üí∞ –ü–∞—Ä–∞: {trading_pair}\n"
            f"‚ö° –ü–ª–µ—á–æ: {leverage}x\n"
            f"üìä –†–∞–∑–º–µ—Ä: {position_size}\n"
            f"‚è±Ô∏è –¢–∞–π–º—Ñ—Ä–µ–π–º: {timeframe}\n\n"
            f"‚ùó <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!"
        )

        return text

    @staticmethod
    def get_statistics_text(telegram_id: int) -> str:
        """–¢–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        from ...strategy import strategy_manager

        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫ –∏–∑ –ë–î
        trades = db.get_user_trades_history(telegram_id, limit=100)

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_trades = len(trades)
        total_pnl = 0.0
        profitable_trades = 0
        losing_trades = 0

        for trade in trades:
            if trade['status'] == 'closed' and trade['pnl'] is not None:
                total_pnl += trade['pnl']
                if trade['pnl'] > 0:
                    profitable_trades += 1
                elif trade['pnl'] < 0:
                    losing_trades += 1

        closed_trades = profitable_trades + losing_trades
        win_rate = (profitable_trades / closed_trades * 100) if closed_trades > 0 else 0

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã
        user_settings = db.get_user_settings(telegram_id)
        trading_pair = user_settings.get('trading_pair') if user_settings else None

        # –°—Ç–∞—Ç—É—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        is_active = strategy_manager.is_strategy_active(telegram_id)
        strategy_status_text = ""

        if is_active:
            strategy_status = strategy_manager.get_strategy_status(telegram_id)
            strategy_status_text = (
                f"\nüü¢ <b>–ê–∫—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è:</b> {strategy_status.get('strategy_name', 'MACD Full')}"
            )

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º P&L —Å –ø–æ–º–æ—â—å—é helpers
        from ...utils.helpers import format_pnl, format_percentage
        pnl_formatted = format_pnl(total_pnl, with_currency=False)
        win_rate_formatted = format_percentage(win_rate, 1)

        # –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –ú–°–ö
        update_time_msk = format_msk_time()

        return (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏</b>\n\n"
            f"{pnl_formatted} USDT\n"
            f"üî¢ <b>–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫:</b> {total_trades}\n"
            f"‚úÖ <b>–ó–∞–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫:</b> {closed_trades}\n"
            f"üìà <b>–ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö:</b> {profitable_trades} ({win_rate_formatted})\n"
            f"üìâ <b>–£–±—ã—Ç–æ—á–Ω—ã—Ö:</b> {losing_trades}"
            f"{strategy_status_text}\n\n"
            f"üîÑ <i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {update_time_msk} –ú–°–ö</i>"
        )

    @staticmethod
    async def get_balance_text(telegram_id: int) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å—á—ë—Ç–∞ —á–µ—Ä–µ–∑ Bybit API"""
        from ...strategy import strategy_manager

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        user_settings = db.get_user_settings(telegram_id)

        if not user_settings or not user_settings.get('bybit_api_key') or not user_settings.get('bybit_secret_key'):
            return (
                f"üí∞ <b>–ë–∞–ª–∞–Ω—Å —Å—á—ë—Ç–∞ Bybit</b>\n\n"
                f"‚ùå <b>API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã</b>\n\n"
                f"üîß <i>–ù–∞—Å—Ç—Ä–æ–π—Ç–µ API –∫–ª—é—á–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫\n"
                f"–¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞</i>"
            )

        # –°–æ–∑–¥–∞–µ–º Bybit –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
        api_key = user_settings.get('bybit_api_key')
        secret_key = user_settings.get('bybit_secret_key')

        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º async context manager –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞–º–∏
            async with BybitClient(api_key, secret_key) as bybit_client:
                # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
                balance_result = await bybit_client.balance.get_balance()

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                total_usdt = balance_result.get('total_usdt', 0.0)
                free_usdt = balance_result.get('free_usdt', 0.0)
                used_usdt = balance_result.get('used_usdt', 0.0)

                # –≠–º–æ–¥–∑–∏ –¥–ª—è –±–∞–ª–∞–Ω—Å–∞
                from ...utils.helpers import get_balance_emoji, format_balance
                balance_emoji = get_balance_emoji(total_usdt)

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–∞
                total_formatted = format_balance(total_usdt)
                free_formatted = format_balance(free_usdt)
                used_formatted = format_balance(used_usdt)

                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                strategy_text = ""
                is_active = strategy_manager.is_strategy_active(telegram_id)

                if is_active:
                    strategy_status = strategy_manager.get_strategy_status(telegram_id)
                    position_size_info = db.get_position_size_info(telegram_id)
                    position_size = position_size_info.get('display', 'Unknown')

                    strategy_text = (
                        f"\nü§ñ <b>–ê–∫—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è:</b> {strategy_status.get('strategy_name', 'MACD Full')}\n"
                        f"üìä <b>–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏:</b> {position_size}"
                    )

                # –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –ú–°–ö
                update_time_msk = format_msk_time()

                result_text = (
                    f"üí∞ <b>–ë–∞–ª–∞–Ω—Å —Å—á—ë—Ç–∞ Bybit</b>\n\n"
                    f"{balance_emoji} <b>–û–±—â–∏–π –±–∞–ª–∞–Ω—Å:</b> {total_formatted} USDT\n"
                    f"‚úÖ <b>–î–æ—Å—Ç—É–ø–Ω–æ:</b> {free_formatted} USDT\n"
                    f"üîí <b>–í –ø–æ–∑–∏—Ü–∏—è—Ö:</b> {used_formatted} USDT\n\n"
                    f"üîÑ <i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {update_time_msk} –ú–°–ö</i>"
                    f"{strategy_text}"
                )

                return result_text

        except Exception as e:
            error_msg = str(e).lower()
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è {telegram_id}: {e}")

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if "api" in error_msg and ("key" in error_msg or "sign" in error_msg):
                error_text = (
                    f"üí∞ <b>–ë–∞–ª–∞–Ω—Å —Å—á—ë—Ç–∞ Bybit</b>\n\n"
                    f"üîë <b>–û—à–∏–±–∫–∞ API –∫–ª—é—á–µ–π</b>\n\n"
                    f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ API –∫–ª—é—á–∏ –∏–ª–∏ –ø–æ–¥–ø–∏—Å—å\n"
                    f"üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–ª—é—á–µ–π –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö\n"
                    f"‚ö†Ô∏è –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–ª—é—á–∏ –∏–º–µ—é—Ç –ø—Ä–∞–≤–∞ –Ω–∞ —á—Ç–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"
                )
            elif "network" in error_msg or "connection" in error_msg or "timeout" in error_msg:
                error_text = (
                    f"üí∞ <b>–ë–∞–ª–∞–Ω—Å —Å—á—ë—Ç–∞ Bybit</b>\n\n"
                    f"üåê <b>–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</b>\n\n"
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Bybit\n"
                    f"üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥"
                )
            else:
                error_text = (
                    f"üí∞ <b>–ë–∞–ª–∞–Ω—Å —Å—á—ë—Ç–∞ Bybit</b>\n\n"
                    f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞</b>\n\n"
                    f"‚ùå {str(e)[:100]}{'...' if len(str(e)) > 100 else ''}\n"
                    f"üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–µ–π"
                )

            return error_text

    @staticmethod
    def get_active_strategy_info(telegram_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        from ...strategy import strategy_manager

        if not strategy_manager.is_strategy_active(telegram_id):
            return {
                'is_active': False,
                'strategy_name': None,
                'message': '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏'
            }

        strategy_status = strategy_manager.get_strategy_status(telegram_id)

        return {
            'is_active': True,
            'strategy_name': strategy_status.get('strategy_name'),
            'symbol': strategy_status.get('symbol'),
            'position_size': strategy_status.get('position_size'),
            'start_time': strategy_status.get('start_time'),
            'strategy_id': strategy_status.get('strategy_id')
        }