# src/exchange/binance.py
import aiohttp
import asyncio
import json
import websockets.asyncio.client
import websockets.exceptions
from typing import Dict, Any, List, Optional, Callable

from ..utils.logger import logger


class BinanceClient:
    """
    Binance Futures API –∏ WebSocket –∫–ª–∏–µ–Ω—Ç –¥–ª—è real-time —Ä–µ–∂–∏–º–∞

    –ò–∑–º–µ–Ω–µ–Ω–∏—è:
    - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∏–Ω—É—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    - –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ real-time —Ä–µ–∂–∏–º–∞ –¥–ª—è MACD —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    """

    def __init__(self):
        self.base_url = "https://fapi.binance.com"
        self.ws_url = "wss://fstream.binance.com/ws"
        self.timeout = aiohttp.ClientTimeout(total=15)  # –£–≤–µ–ª–∏—á–∏–ª–∏ timeout –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        self.session: Optional[aiohttp.ClientSession] = None
        self.ws_connection: Optional[Any] = None
        self.ws_callbacks: Dict[str, Callable] = {}
        self.is_ws_running = False

        # Real-time —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.messages_received = 0
        self.connection_restarts = 0
        self.last_message_time: Optional[float] = None

    async def _get_session(self) -> aiohttp.ClientSession:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ HTTP —Å–µ—Å—Å–∏–∏"""
        if self.session is None or self.session.closed:
            self.session = aiohttp.ClientSession(timeout=self.timeout)
        return self.session

    async def _make_request(self, endpoint: str, params: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–∞ –∫ Binance API"""
        session = await self._get_session()
        url = f"{self.base_url}{endpoint}"

        try:
            async with session.get(url, params=params) as response:
                if response.status != 200:
                    error_text = await response.text()
                    raise Exception(f"Binance API error {response.status}: {error_text}")

                data: Dict[str, Any] = await response.json()
                return data

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞ {endpoint}: {e}")
            raise

    def _convert_timeframe(self, timeframe: str) -> str:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ –≤ —Ñ–æ—Ä–º–∞—Ç Binance
        –¢–µ–ø–µ—Ä—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º 1m –¥–ª—è real-time —Ä–µ–∂–∏–º–∞
        """
        # –ú–∞–ø–ø–∏–Ω–≥ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
        timeframe_map = {
            '1m': '1m',  # –û—Å–Ω–æ–≤–Ω–æ–π –¥–ª—è real-time
            '5m': '5m',
            '15m': '15m'
        }

        converted = timeframe_map.get(timeframe, timeframe)

        if converted not in ['1m', '5m', '15m']:
            logger.warning(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º: {timeframe}, –∏—Å–ø–æ–ª—å–∑—É–µ–º 1m")
            return '1m'

        return converted

    async def get_klines(self, symbol: str, interval: str, limit: int = 500) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–≤–µ—á–µ–π —á–µ—Ä–µ–∑ REST API
        –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è real-time —Ä–µ–∂–∏–º–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π 1m
        """
        try:
            binance_interval = self._convert_timeframe(interval)
            logger.info(f"–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º {limit} —Å–≤–µ—á–µ–π {symbol} {binance_interval} –¥–ª—è real-time —Ä–µ–∂–∏–º–∞")

            params = {
                'symbol': symbol,
                'interval': binance_interval,
                'limit': min(limit, 1500)  # Binance –ª–∏–º–∏—Ç
            }

            response = await self._make_request('/fapi/v1/klines', params)

            klines = []
            for kline_data in response:
                kline = {
                    'timestamp': int(kline_data[0]),
                    'open': float(kline_data[1]),
                    'high': float(kline_data[2]),
                    'low': float(kline_data[3]),
                    'close': float(kline_data[4]),
                    'volume': float(kline_data[5]),
                    'close_time': int(kline_data[6]),
                    'quote_volume': float(kline_data[7]),
                    'trades_count': int(kline_data[8])
                }
                klines.append(kline)

            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(klines)} —Å–≤–µ—á–µ–π –¥–ª—è {symbol} (real-time —Ä–µ–∂–∏–º)")
            return klines

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ—á–µ–π {symbol} {interval}: {e}")
            return []

    async def start_kline_stream(self, symbol: str, interval: str, callback: Callable[[Dict[str, Any]], None]):
        """
        –ó–∞–ø—É—Å–∫ WebSocket –ø–æ—Ç–æ–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è real-time —Å–≤–µ—á–µ–π
        –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –º–∏–Ω—É—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        """
        try:
            binance_interval = self._convert_timeframe(interval)
            stream_name = f"{symbol.lower()}@kline_{binance_interval}"

            self.ws_callbacks[stream_name] = callback

            if not self.is_ws_running:
                await self._start_websocket()

            await self._subscribe_stream(stream_name)
            logger.info(f"üöÄ –ó–∞–ø—É—â–µ–Ω real-time –ø–æ—Ç–æ–∫: {stream_name}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ real-time –ø–æ—Ç–æ–∫–∞ {symbol} {interval}: {e}")
            raise

    async def _start_websocket(self):
        """–ó–∞–ø—É—Å–∫ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å—é"""
        try:
            logger.info("üîó –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è real-time —Ä–µ–∂–∏–º–∞...")

            self.ws_connection = await websockets.asyncio.client.connect(
                self.ws_url,
                ping_interval=20,  # Ping –∫–∞–∂–¥—ã–µ 20 —Å–µ–∫—É–Ω–¥
                ping_timeout=10,  # Timeout –¥–ª—è ping
                close_timeout=10  # Timeout –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
            )

            self.is_ws_running = True
            logger.info("‚úÖ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            asyncio.create_task(self._handle_websocket_messages())

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            self.is_ws_running = False
            raise

    async def _subscribe_stream(self, stream_name: str):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ WebSocket –ø–æ—Ç–æ–∫"""
        try:
            if not self.ws_connection:
                raise Exception("WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

            subscribe_message = {
                "method": "SUBSCRIBE",
                "params": [stream_name],
                "id": 1
            }

            await self.ws_connection.send(json.dumps(subscribe_message))
            logger.info(f"üì° –ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ real-time –ø–æ—Ç–æ–∫: {stream_name}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –ø–æ—Ç–æ–∫ {stream_name}: {e}")
            raise

    async def _handle_websocket_messages(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å—é"""
        reconnect_attempts = 0
        max_reconnect_attempts = 5

        while self.is_ws_running:
            try:
                if not self.ws_connection:
                    logger.warning("WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ, –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
                    await self._reconnect_websocket()
                    reconnect_attempts += 1

                    if reconnect_attempts >= max_reconnect_attempts:
                        logger.error(
                            f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ({max_reconnect_attempts})")
                        break

                    continue

                try:
                    # –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å timeout
                    message = await asyncio.wait_for(self.ws_connection.recv(), timeout=60.0)

                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
                    reconnect_attempts = 0
                    self.messages_received += 1
                    self.last_message_time = asyncio.get_event_loop().time()

                    data = json.loads(message)

                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π
                    if 'k' in data:
                        await self._process_kline_message(data)

                    # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 100 —Å–æ–æ–±—â–µ–Ω–∏–π
                    if self.messages_received % 100 == 0:
                        logger.debug(f"üìä Real-time —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {self.messages_received} —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—É—á–µ–Ω–æ")

                except asyncio.TimeoutError:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ping –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                    if self.ws_connection:
                        try:
                            await self.ws_connection.ping()
                            logger.debug("üì° WebSocket ping –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                        except:
                            logger.warning("WebSocket ping failed, —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ")
                            self.ws_connection = None

                except websockets.exceptions.ConnectionClosed:
                    logger.warning("WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ —É–¥–∞–ª–µ–Ω–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–æ–π")
                    self.ws_connection = None

                except json.JSONDecodeError as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                    continue

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
                await asyncio.sleep(5)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π

        logger.info("WebSocket –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω")

    async def _reconnect_websocket(self):
        """–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ WebSocket —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π"""
        try:
            self.connection_restarts += 1
            logger.info(f"üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ WebSocket (–ø–æ–ø—ã—Ç–∫–∞ #{self.connection_restarts})...")

            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
            await asyncio.sleep(2)

            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
            if self.ws_connection:
                try:
                    await self.ws_connection.close()
                except:
                    pass
                self.ws_connection = None

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            await self._start_websocket()

            # –ü–µ—Ä–µ–ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –≤—Å–µ –ø–æ—Ç–æ–∫–∏
            for stream_name in list(self.ws_callbacks.keys()):
                await self._subscribe_stream(stream_name)

            logger.info("‚úÖ WebSocket –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket: {e}")

    async def _process_kline_message(self, data: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–≤–µ—á–∏ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è real-time)"""
        try:
            kline_data = data['k']

            # –í real-time —Ä–µ–∂–∏–º–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–∫—Ä—ã—Ç—ã–µ —Å–≤–µ—á–∏
            if not kline_data['x']:
                return

            symbol = kline_data['s']
            interval = kline_data['i']
            stream_name = f"{symbol.lower()}@kline_{interval}"

            kline = {
                'symbol': symbol,
                'interval': interval,
                'timestamp': int(kline_data['t']),
                'open': float(kline_data['o']),
                'high': float(kline_data['h']),
                'low': float(kline_data['l']),
                'close': float(kline_data['c']),
                'volume': float(kline_data['v']),
                'close_time': int(kline_data['T']),
                'is_closed': kline_data['x']
            }

            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –º–∏–Ω—É—Ç–Ω—ã—Ö —Å–≤–µ—á–µ–π –≤ debug —Ä–µ–∂–∏–º–µ
            if interval == '1m':
                logger.debug(f"üìä Real-time 1m —Å–≤–µ—á–∞: {symbol} —Ü–µ–Ω–∞={kline['close']}")

            if stream_name in self.ws_callbacks:
                callback = self.ws_callbacks[stream_name]
                try:
                    if asyncio.iscoroutinefunction(callback):
                        await callback(kline)
                    else:
                        callback(kline)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ callback –¥–ª—è {stream_name}: {e}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ kline —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    async def stop_kline_stream(self, symbol: str, interval: str):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ç–æ–∫–∞ —Å–≤–µ—á–µ–π"""
        try:
            binance_interval = self._convert_timeframe(interval)
            stream_name = f"{symbol.lower()}@kline_{binance_interval}"

            if self.ws_connection:
                unsubscribe_message = {
                    "method": "UNSUBSCRIBE",
                    "params": [stream_name],
                    "id": 2
                }
                await self.ws_connection.send(json.dumps(unsubscribe_message))

            if stream_name in self.ws_callbacks:
                del self.ws_callbacks[stream_name]

            logger.info(f"‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω real-time –ø–æ—Ç–æ–∫: {stream_name}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Ç–æ–∫–∞ {symbol} {interval}: {e}")

    async def get_symbol_info(self, symbol: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä–µ"""
        try:
            response = await self._make_request('/fapi/v1/exchangeInfo')

            for symbol_info in response.get('symbols', []):
                if symbol_info['symbol'] == symbol:
                    return {
                        'symbol': symbol_info['symbol'],
                        'status': symbol_info['status'],
                        'base_asset': symbol_info['baseAsset'],
                        'quote_asset': symbol_info['quoteAsset'],
                        'price_precision': symbol_info['pricePrecision'],
                        'quantity_precision': symbol_info['quantityPrecision']
                    }

            return {}

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ {symbol}: {e}")
            return {}

    async def test_connection(self) -> bool:
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Binance API"""
        try:
            await self._make_request('/fapi/v1/ping')
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Binance API —É—Å–ø–µ—à–Ω–æ (real-time —Ä–µ–∂–∏–º)")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Binance API: {e}")
            return False

    def get_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        return {
            'messages_received': self.messages_received,
            'connection_restarts': self.connection_restarts,
            'is_connected': self.is_ws_running and self.ws_connection is not None,
            'active_streams': len(self.ws_callbacks),
            'last_message_time': self.last_message_time
        }

    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        try:
            logger.info("üîí –ó–∞–∫—Ä—ã–≤–∞–µ–º Binance –∫–ª–∏–µ–Ω—Ç (real-time —Ä–µ–∂–∏–º)...")

            self.is_ws_running = False

            if self.ws_connection:
                try:
                    await self.ws_connection.close()
                except:
                    pass
                self.ws_connection = None

            if self.session and not self.session.closed:
                await self.session.close()

            self.ws_callbacks.clear()

            # –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = self.get_statistics()
            logger.info(
                f"üìä Finalized stats: {stats['messages_received']} messages, {stats['connection_restarts']} reconnects")
            logger.info("‚úÖ Binance –∫–ª–∏–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è Binance –∫–ª–∏–µ–Ω—Ç–∞: {e}")


__all__ = ['BinanceClient']