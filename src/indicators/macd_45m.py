# src/indicators/macd_45m.py
import asyncio
import json
import pandas as pd
import numpy as np
from datetime import datetime, timezone, timedelta
from typing import Dict, Any, List, Optional, Callable, Union, Awaitable
from binance.client import Client
from binance.websocket.um_futures.websocket_client import UMFuturesWebsocketClient
from ..utils.logger import logger


class MACD45mIndicator:
    """
    MACD –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–ª—è 45-–º–∏–Ω—É—Ç–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
    –°—Ç—Ä–æ–∏—Ç 45m —Å–≤–µ—á–∏ –∏–∑ 15m –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–µ—Ç–∫–µ
    """

    def __init__(self, symbol: str, limit: int = 200):
        self.symbol = symbol.upper()
        self.limit = limit
        self.klines_45m: List[float] = []
        self.macd_data: List[Dict[str, Any]] = []
        self.ws_client: Optional[UMFuturesWebsocketClient] = None
        self.current_45m_start: Optional[datetime] = None
        self.last_45m_start: Optional[datetime] = None
        self.current_45m_candle: Optional[Dict[str, Any]] = None

        # MACD –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.fast_period = 12
        self.slow_period = 26
        self.signal_period = 7

        # Callback —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤
        self.callbacks: List[
            Union[Callable[[Dict[str, Any]], None], Callable[[Dict[str, Any]], Awaitable[None]]]
        ] = []

        # –§–ª–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.is_running = False

        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è MACD –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π
        self.last_macd_line: Optional[float] = None
        self.last_signal_line: Optional[float] = None

        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.total_updates = 0

        # –î–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è MACD (—Ä–∞–∑ –≤ 60 —Å–µ–∫—É–Ω–¥)
        self.last_macd_display_time = None
        self.macd_display_interval = 60  # –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å MACD —Ä–∞–∑ –≤ 60 —Å–µ–∫—É–Ω–¥

    def add_callback(self, callback: Union[
        Callable[[Dict[str, Any]], None], Callable[[Dict[str, Any]], Awaitable[None]]]):
        """–î–æ–±–∞–≤–∏—Ç—å callback –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤"""
        self.callbacks.append(callback)

    def get_45m_interval_start(self, timestamp: datetime) -> datetime:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—á–∞–ª–æ 45–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
        if timestamp.tzinfo is None:
            timestamp = timestamp.replace(tzinfo=timezone.utc)

        day_start = timestamp.replace(hour=0, minute=0, second=0, microsecond=0)
        minutes_from_start = (timestamp - day_start).total_seconds() / 60
        interval_number = int(minutes_from_start // 45)
        interval_start = day_start + timedelta(minutes=interval_number * 45)

        return interval_start

    def get_historical_data(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Å–≤–µ–∂–∏—Ö –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            client = Client()

            logger.info(f"üìà –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é {self.symbol} –¥–ª—è 45m MACD")

            # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è Binance
            server_time = client.get_server_time()
            now = pd.to_datetime(server_time['serverTime'], unit='ms', utc=True)
            logger.info(f"[SYNC] –°–µ—Ä–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è Binance: {now}")

            self.current_45m_start = self.get_45m_interval_start(now)
            self.last_45m_start = self.current_45m_start

            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ 15–º —Å–≤–µ—á–∏
            klines_15m = client.futures_klines(
                symbol=self.symbol,
                interval='15m',
                limit=self.limit * 3 + 10
            )

            df = pd.DataFrame(klines_15m, columns=[
                'timestamp', 'open', 'high', 'low', 'close', 'volume',
                'close_time', 'quote_volume', 'trades', 'taker_buy_volume',
                'taker_buy_quote_volume', 'ignore'
            ])

            for col in ['open', 'high', 'low', 'close', 'volume']:
                df[col] = df[col].astype(float)

            df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms', utc=True)

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ 45–º —Å–≤–µ—á–∏
            self.convert_15m_to_45m(df)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
            self.show_interval_analysis(now)

            # –î–æ—Ñ–æ—Ä–º–∏—Ä–æ–≤—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
            self.complete_current_interval(client, now)

            logger.info("=" * 60)
            logger.info(f"–ó–ê–ì–†–£–ñ–ï–ù–û: {len(self.klines_45m)} –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö 45–º —Å–≤–µ—á–µ–π")
            logger.info("=" * 60)

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π MACD
            self.calculate_macd()

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise

    def show_interval_analysis(self, now: datetime):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤"""
        last_complete_interval = self.current_45m_start - timedelta(minutes=45)
        time_in_interval = (now - self.current_45m_start).total_seconds() / 60

        logger.info("=" * 60)
        logger.info("–ê–ù–ê–õ–ò–ó –ò–ù–¢–ï–†–í–ê–õ–û–í:")
        logger.info(f"–¢–µ–∫—É—â–µ–µ UTC –≤—Ä–µ–º—è: {now.strftime('%H:%M:%S')}")
        logger.info(
            f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–ª–Ω—ã–π 45–º –∏–Ω—Ç–µ—Ä–≤–∞–ª: {last_complete_interval.strftime('%H:%M')} - "
            f"{(last_complete_interval + timedelta(minutes=45)).strftime('%H:%M')}"
        )
        logger.info(
            f"–¢–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {self.current_45m_start.strftime('%H:%M')} - "
            f"{(self.current_45m_start + timedelta(minutes=45)).strftime('%H:%M')}"
        )
        logger.info(f"–ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ç–µ–∫—É—â–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ: {time_in_interval:.1f} –º–∏–Ω—É—Ç")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å–µ—Ç–∫–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
        logger.info(f"–ü–†–û–í–ï–†–ö–ê –°–ï–¢–ö–ò 45–ú:")
        for i in range(-2, 3):
            test_interval = self.current_45m_start + timedelta(minutes=i * 45)
            logger.info(
                f"  –ò–Ω—Ç–µ—Ä–≤–∞–ª {i}: {test_interval.strftime('%H:%M')} - "
                f"{(test_interval + timedelta(minutes=45)).strftime('%H:%M')}"
            )

        logger.info("=" * 60)

    def convert_15m_to_45m(self, df_15m: pd.DataFrame):
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ 15–º –≤ 45–º"""
        self.klines_45m = []
        grouped_candles = {}

        for _, row in df_15m.iterrows():
            interval_start = self.get_45m_interval_start(row['timestamp'])

            if interval_start not in grouped_candles:
                grouped_candles[interval_start] = []

            grouped_candles[interval_start].append(row)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ 45–º —Å–≤–µ—á–∏ (–∏—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª)
        for interval_start in sorted(grouped_candles.keys()):
            candles = grouped_candles[interval_start]

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª - –æ–Ω –±—É–¥–µ—Ç –¥–æ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –æ—Ç–¥–µ–ª—å–Ω–æ
            if interval_start >= self.current_45m_start:
                continue

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–ø–æ–ª–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
            if len(candles) < 3:
                continue

            candle_45m = {
                'timestamp': interval_start,
                'open': candles[0]['open'],
                'high': max(c['high'] for c in candles),
                'low': min(c['low'] for c in candles),
                'close': candles[-1]['close'],
                'volume': sum(c['volume'] for c in candles)
            }

            self.klines_45m.append(candle_45m['close'])

    def complete_current_interval(self, client: Client, now: datetime):
        """–î–æ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ 45–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞"""
        try:
            time_in_interval = (now - self.current_45m_start).total_seconds() / 60
            completed_5m_candles = int(time_in_interval // 5)

            logger.info(f"DEBUG: –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ: {time_in_interval:.1f} –º–∏–Ω—É—Ç")
            logger.info(f"DEBUG: –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö 5–º —Å–≤–µ—á–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å: {completed_5m_candles}")

            if completed_5m_candles == 0:
                logger.info("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ 5–º —Å–≤–µ—á–∏: 0 (–ø–µ—Ä–≤–∞—è 5–º —Å–≤–µ—á–∞ –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞)")
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Ü–µ–Ω—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
                self.current_45m_candle = {'close': 0.0, 'high': 0.0, 'low': 999999.0, 'open': 0.0, 'volume': 0.0}
                self.klines_45m.append(0.0)
                return

            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ 5–º —Å–≤–µ—á–∏
            start_time = int(self.current_45m_start.timestamp() * 1000)

            klines_5m = client.futures_klines(
                symbol=self.symbol,
                interval='5m',
                startTime=start_time,
                limit=completed_5m_candles
            )

            logger.info(f"DEBUG: Binance –≤–µ—Ä–Ω—É–ª {len(klines_5m)} —Å–≤–µ—á–µ–π (–∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ {completed_5m_candles})")

            if klines_5m:
                # –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π
                klines_to_use = klines_5m[:completed_5m_candles]

                self.current_45m_candle = {
                    'open': float(klines_to_use[0][1]),
                    'high': max(float(k[2]) for k in klines_to_use),
                    'low': min(float(k[3]) for k in klines_to_use),
                    'close': float(klines_to_use[-1][4]),
                    'volume': sum(float(k[5]) for k in klines_to_use)
                }

                self.klines_45m.append(self.current_45m_candle['close'])

                last_completed_time = self.current_45m_start + timedelta(minutes=completed_5m_candles * 5)
                logger.info(f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ 5–º —Å–≤–µ—á–∏: {len(klines_to_use)} —à—Ç (—Ç–æ–ª—å–∫–æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ)")
                logger.info(
                    f"–ü–µ—Ä–∏–æ–¥ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {self.current_45m_start.strftime('%H:%M')} - "
                    f"{last_completed_time.strftime('%H:%M')}"
                )
            else:
                logger.info("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ 5–º —Å–≤–µ—á–∏: 0 (–Ω–µ –Ω–∞–π–¥–µ–Ω—ã)")
                self.current_45m_candle = {'close': 0.0, 'high': 0.0, 'low': 999999.0, 'open': 0.0, 'volume': 0.0}
                self.klines_45m.append(0.0)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞: {e}")

    def update_current_45m_candle(self, price: float, high: float, low: float, volume: float):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π 45–º —Å–≤–µ—á–∏"""
        if self.current_45m_candle is None:
            self.current_45m_candle = {
                'open': price,
                'high': price,
                'low': price,
                'close': price,
                'volume': volume
            }
        else:
            if self.current_45m_candle['open'] == 0.0:
                self.current_45m_candle['open'] = price

            self.current_45m_candle['high'] = max(self.current_45m_candle['high'], high)
            self.current_45m_candle['low'] = min(self.current_45m_candle['low'], low) if self.current_45m_candle[
                                                                                             'low'] != 999999.0 else low
            self.current_45m_candle['close'] = price
            self.current_45m_candle['volume'] += volume

    def check_45m_interval_change(self, timestamp: datetime) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–º–µ–Ω—ã 45–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞"""
        current_interval = self.get_45m_interval_start(timestamp)

        if current_interval != self.last_45m_start:
            # –ù–æ–≤—ã–π 45–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞—á–∞–ª—Å—è!
            logger.info(
                f"[–ù–û–í–´–ô 45–ú –ò–ù–¢–ï–†–í–ê–õ] {self.last_45m_start.strftime('%H:%M')} -> "
                f"{current_interval.strftime('%H:%M')}"
            )

            # –§–∏–∫—Å–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é 45–º —Å–≤–µ—á—É
            if self.current_45m_candle and self.current_45m_candle['close'] != 0.0:
                logger.info(f"[–§–ò–ö–°–ê–¶–ò–Ø 45–ú] Close: {self.current_45m_candle['close']}")

            # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é 45–º —Å–≤–µ—á—É
            self.last_45m_start = current_interval
            self.current_45m_start = current_interval
            self.current_45m_candle = None

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –ø—É—Å—Ç—É—é —Å–≤–µ—á—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
            self.klines_45m.append(0.0)

            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞
            if len(self.klines_45m) > self.limit + 50:
                self.klines_45m = self.klines_45m[-self.limit:]
                logger.info(f"[–û–ë–†–ï–ó–ö–ê] –ú–∞—Å—Å–∏–≤ –æ–±—Ä–µ–∑–∞–Ω –¥–æ {len(self.klines_45m)} —Å–≤–µ—á–µ–π")

            return True
        return False

    @staticmethod
    def calculate_ema(prices: np.ndarray, period: int) -> np.ndarray:
        """–†–∞—Å—á–µ—Ç EMA —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é"""
        prices = np.array(prices, dtype=np.float64)

        if len(prices) < period:
            return np.full_like(prices, np.nan, dtype=np.float64)

        ema = np.full_like(prices, np.nan, dtype=np.float64)
        alpha = np.float64(2.0) / np.float64(period + 1.0)

        first_valid = period - 1
        for i in range(len(prices)):
            if not np.isnan(prices[i]) and prices[i] != 0:
                first_valid = max(i, period - 1)
                break

        if first_valid >= len(prices):
            return ema

        if first_valid + period <= len(prices):
            valid_window = prices[first_valid - period + 1:first_valid + 1]
            if not np.any(np.isnan(valid_window)) and not np.any(valid_window == 0):
                ema[first_valid] = np.mean(valid_window, dtype=np.float64)
            elif first_valid < len(prices):
                ema[first_valid] = prices[first_valid]

        for i in range(first_valid + 1, len(prices)):
            if not np.isnan(prices[i]) and prices[i] != 0 and not np.isnan(ema[i - 1]):
                ema[i] = alpha * prices[i] + (np.float64(1.0) - alpha) * ema[i - 1]

        return ema

    def calculate_macd(self) -> Optional[Dict[str, Any]]:
        """–†–∞—Å—á–µ—Ç MACD —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é"""
        if len(self.klines_45m) < 32:
            return None

        prices = np.array(self.klines_45m, dtype=np.float64)

        ema12 = self.calculate_ema(prices, 12)
        ema26 = self.calculate_ema(prices, 26)

        macd_line = np.full_like(prices, np.nan, dtype=np.float64)

        for i in range(len(prices)):
            if not np.isnan(ema12[i]) and not np.isnan(ema26[i]):
                macd_line[i] = ema12[i] - ema26[i]

        first_macd_idx = None
        for i in range(len(macd_line)):
            if not np.isnan(macd_line[i]):
                first_macd_idx = i
                break

        if first_macd_idx is None or len(macd_line) - first_macd_idx < 7:
            return None

        valid_macd = macd_line[first_macd_idx:]
        signal_ema = self.calculate_ema(valid_macd, 7)

        signal_line = np.full_like(prices, np.nan, dtype=np.float64)
        signal_line[first_macd_idx:] = signal_ema

        current_price = float(prices[-1])
        current_macd = float(macd_line[-1]) if not np.isnan(macd_line[-1]) else 0.0
        current_signal = float(signal_line[-1]) if not np.isnan(signal_line[-1]) else 0.0
        current_histogram = current_macd - current_signal

        if np.isnan(current_macd) or np.isnan(current_signal):
            return None

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–µ–∑ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è —Å –µ—â–µ –±–æ–ª—å—à–µ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é
        macd_data = {
            'timestamp': datetime.now(),
            'price': current_price,
            'macd_line': current_macd,
            'signal_line': current_signal,
            'histogram': current_histogram,
            'timeframe': '45m'
        }

        self.macd_data.append(macd_data)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞–ª—ã
        signal = self.detect_macd_signals(current_macd, current_signal, macd_data)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º MACD –∑–Ω–∞—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ 60 —Å–µ–∫—É–Ω–¥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        current_time = datetime.now()
        should_display = False

        if self.last_macd_display_time is None:
            should_display = True
        else:
            time_since_display = (current_time - self.last_macd_display_time).total_seconds()
            if time_since_display >= self.macd_display_interval:
                should_display = True

        if should_display:
            # –û–∫—Ä—É–≥–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é TradingView
            display_price = round(current_price, 2)
            display_macd = round(current_macd, 2)
            display_signal = round(current_signal, 2)
            display_histogram = round(current_histogram, 2)

            # –ö–†–ò–¢–ò–ß–ù–ê–Ø –û–¢–õ–ê–î–ö–ê - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ü–µ–Ω 45–º —Å–≤–µ—á–µ–π —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏
            logger.info(
                f"[–ö–†–ò–¢–ò–ß] –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ü–µ–Ω 45–º: {self.klines_45m[-5:] if len(self.klines_45m) >= 5 else self.klines_45m}")

            logger.info(
                f"üìä MACD 45m: –¶–µ–Ω–∞: {display_price} | "
                f"MACD: {display_macd} | "
                f"Signal: {display_signal} | "
                f"Hist: {display_histogram}"
            )

            self.last_macd_display_time = current_time

        return macd_data

    def detect_macd_signals(self, current_macd: float, current_signal: float,
                            macd_data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ MACD –ø—Ä–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–∏ –ª–∏–Ω–∏–π"""
        if self.last_macd_line is None or self.last_signal_line is None:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –≤—ã—Ö–æ–¥–∏–º
            self.last_macd_line = current_macd
            self.last_signal_line = current_signal
            return None

        signal = None

        # –ü–ï–†–ï–°–ï–ß–ï–ù–ò–ï –°–ù–ò–ó–£ –í–í–ï–†–•: –±—ã—á–∏–π —Å–∏–≥–Ω–∞–ª
        if (self.last_macd_line < self.last_signal_line and
                current_macd > current_signal):

            signal = {
                'type': 'buy',
                'timeframe': '45m',
                'timestamp': macd_data['timestamp'],
                'price': macd_data['price'],
                'macd_line': current_macd,
                'signal_line': current_signal,
                'histogram': macd_data['histogram'],
                'crossover_type': 'bullish'
            }

        # –ü–ï–†–ï–°–ï–ß–ï–ù–ò–ï –°–í–ï–†–•–£ –í–ù–ò–ó: –º–µ–¥–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª
        elif (self.last_macd_line > self.last_signal_line and
              current_macd < current_signal):

            signal = {
                'type': 'sell',
                'timeframe': '45m',
                'timestamp': macd_data['timestamp'],
                'price': macd_data['price'],
                'macd_line': current_macd,
                'signal_line': current_signal,
                'histogram': macd_data['histogram'],
                'crossover_type': 'bearish'
            }

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        self.last_macd_line = current_macd
        self.last_signal_line = current_signal

        if signal:
            logger.info(f"üéØ –ü–ï–†–ï–°–ï–ß–ï–ù–ò–ï MACD 45m! {signal['crossover_type'].upper()} —Å–∏–≥–Ω–∞–ª {signal['type'].upper()}")

            # –í—ã–∑—ã–≤–∞–µ–º callback'–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ
            self._call_callbacks_safe(signal)

        return signal

    async def _call_callbacks(self, signal: Dict[str, Any]):
        """–í—ã–∑–æ–≤ –≤—Å–µ—Ö callback —Ñ—É–Ω–∫—Ü–∏–π"""
        for callback in self.callbacks:
            try:
                if asyncio.iscoroutinefunction(callback):
                    await callback(signal)
                else:
                    callback(signal)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ callback: {e}")

    def _call_callbacks_safe(self, signal: Dict[str, Any]):
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–∑–æ–≤ callback —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        for callback in self.callbacks:
            try:
                if asyncio.iscoroutinefunction(callback):
                    # –î–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö callback —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ —Ç–µ–∫—É—â–µ–º event loop
                    try:
                        loop = asyncio.get_event_loop()
                        if loop.is_running():
                            # –ï—Å–ª–∏ event loop —É–∂–µ –∑–∞–ø—É—â–µ–Ω, —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
                            asyncio.create_task(callback(signal))
                        else:
                            # –ï—Å–ª–∏ event loop –Ω–µ –∑–∞–ø—É—â–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –∫–æ—Ä—É—Ç–∏–Ω—É
                            asyncio.run(callback(signal))
                    except RuntimeError:
                        # –ï—Å–ª–∏ –Ω–µ—Ç event loop, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
                        asyncio.run(callback(signal))
                else:
                    # –î–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö callback –≤—ã–∑—ã–≤–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é
                    callback(signal)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ callback: {e}")

    def handle_kline_message(self, _, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π —Å 5–º –¥–∞–Ω–Ω—ã–º–∏"""
        try:
            data = json.loads(message)

            if 'k' in data:
                kline = data['k']
                close_price = float(kline['c'])
                high_price = float(kline['h'])
                low_price = float(kline['l'])
                volume = float(kline['v'])
                kline_start_time = pd.to_datetime(int(kline['t']), unit='ms', utc=True)
                is_kline_closed = kline['x']

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–µ–Ω—É 45–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
                interval_changed = self.check_45m_interval_change(kline_start_time)

                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é 45–º —Å–≤–µ—á—É
                self.update_current_45m_candle(close_price, high_price, low_price, volume)

                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É –≤ –º–∞—Å—Å–∏–≤–µ
                if len(self.klines_45m) > 0:
                    self.klines_45m[-1] = close_price

                if is_kline_closed:
                    logger.info(f"[5–ú –°–í–ï–ß–ê –ó–ê–ö–†–´–¢–ê] {kline_start_time.strftime('%H:%M')} | –¶–µ–Ω–∞: {close_price}")

                self.total_updates += 1

                # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º MACD
                self.calculate_macd()

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ WebSocket: {e}")

    def start_websocket(self):
        """–ó–∞–ø—É—Å–∫ WebSocket"""
        try:
            self.ws_client = UMFuturesWebsocketClient(
                on_message=self.handle_kline_message
            )

            self.ws_client.kline(
                symbol=self.symbol.lower(),
                interval='5m'
            )

            logger.info(f"üöÄ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è {self.symbol} 5m (–¥–ª—è 45m –∞–≥—Ä–µ–≥–∞—Ü–∏–∏)")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            raise

    def stop_websocket(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ WebSocket"""
        if self.ws_client:
            try:
                self.ws_client.stop()
                logger.info("‚èπÔ∏è WebSocket 45m —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è WebSocket: {e}")

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞"""
        if self.is_running:
            logger.warning("‚ö†Ô∏è MACD 45m –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return

        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ MACD 45m –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞: {self.symbol}")
        logger.info("–ò—Å—Ç–æ—Ä–∏—è: 15m —Å–≤–µ—á–∏ -> 45m —Ç–∞–π–º—Ñ—Ä–µ–π–º")
        logger.info("Live –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: 5m —Å–≤–µ—á–∏ —Å –∞–≥—Ä–µ–≥–∞—Ü–∏–µ–π –≤ 45m")

        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
            self.get_historical_data()

            # –ó–∞–ø—É—Å–∫–∞–µ–º WebSocket
            self.start_websocket()

            self.is_running = True
            logger.info("‚úÖ MACD 45m –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ MACD 45m –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞: {e}")
            await self.stop()
            raise

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞"""
        if not self.is_running:
            return

        logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ MACD 45m –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞...")

        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º WebSocket
            self.stop_websocket()

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.last_macd_line = None
            self.last_signal_line = None

            self.is_running = False
            logger.info(f"‚úÖ MACD 45m –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {self.total_updates} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π)")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ MACD 45m –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞: {e}")

    def get_current_macd_values(self) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π MACD"""
        if not self.macd_data:
            return None

        return self.macd_data[-1]

    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞"""
        return {
            'symbol': self.symbol,
            'timeframe': '45m',
            'is_running': self.is_running,
            'klines_count': len(self.klines_45m),
            'callbacks_count': len(self.callbacks),
            'total_updates': self.total_updates,
            'has_macd_data': len(self.macd_data) > 0,
            'current_45m_start': self.current_45m_start.isoformat() if self.current_45m_start else None
        }