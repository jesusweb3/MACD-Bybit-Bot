# src/indicators/macd_5m.py
import asyncio
import json
import pandas as pd
import numpy as np
from datetime import datetime
from typing import Dict, Any, List, Optional, Callable, Union, Awaitable
from binance.client import Client
from binance.websocket.um_futures.websocket_client import UMFuturesWebsocketClient
from ..utils.logger import logger


class MACD5mIndicator:
    """
    MACD –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–ª—è 5-–º–∏–Ω—É—Ç–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä—è–º—ã–µ 5m —Å–≤–µ—á–∏ –æ—Ç Binance
    """

    def __init__(self, symbol: str, limit: int = 200):
        self.symbol = symbol.upper()
        self.limit = limit
        self.klines_data: List[float] = []
        self.macd_data: List[Dict[str, Any]] = []
        self.ws_client: Optional[UMFuturesWebsocketClient] = None

        # MACD –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.fast_period = 12
        self.slow_period = 26
        self.signal_period = 7

        # Callback —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤
        self.callbacks: List[
            Union[Callable[[Dict[str, Any]], None], Callable[[Dict[str, Any]], Awaitable[None]]]
        ] = []

        # –§–ª–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.is_running = False

        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è MACD –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π
        self.last_macd_line: Optional[float] = None
        self.last_signal_line: Optional[float] = None

        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.total_updates = 0

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        self.last_sync_time = None
        self.sync_interval = 300  # –†–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

        # –î–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è MACD (—Ä–∞–∑ –≤ 60 —Å–µ–∫—É–Ω–¥)
        self.last_macd_display_time = None
        self.macd_display_interval = 60  # –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å MACD —Ä–∞–∑ –≤ 60 —Å–µ–∫—É–Ω–¥

    def add_callback(self, callback: Union[
        Callable[[Dict[str, Any]], None], Callable[[Dict[str, Any]], Awaitable[None]]]):
        """–î–æ–±–∞–≤–∏—Ç—å callback –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤"""
        self.callbacks.append(callback)

    def get_historical_data(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Å–≤–µ–∂–∏—Ö –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            client = Client()

            logger.info(f"üìà –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é {self.symbol} –¥–ª—è 5m MACD")

            # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è Binance –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            server_time = client.get_server_time()
            logger.info(f"[SYNC] –°–µ—Ä–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è Binance: {pd.to_datetime(server_time['serverTime'], unit='ms')}")

            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ 5m —Å–≤–µ—á–∏ —Å —É—á–µ—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            klines = client.futures_klines(
                symbol=self.symbol,
                interval='5m',
                limit=self.limit
            )

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame
            df = pd.DataFrame(klines, columns=[
                'timestamp', 'open', 'high', 'low', 'close', 'volume',
                'close_time', 'quote_volume', 'trades', 'taker_buy_volume',
                'taker_buy_quote_volume', 'ignore'
            ])

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
            df['close'] = df['close'].astype(float)
            df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
            df['close_time'] = pd.to_datetime(df['close_time'], unit='ms')

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–≤–µ—á–∞—Ö
            logger.info(f"[HISTORY] –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–≤–µ—á–∏:")
            for i in range(3):
                idx = -(3 - i)
                candle = df.iloc[idx]
                logger.info(f"  {candle['timestamp']} - {candle['close_time']}: {candle['close']}")

            # –ù–ï —É–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–≤–µ—á—É - –æ–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–∫—Ä—ã—Ç–æ–π
            self.klines_data = df['close'].tolist()
            self.last_sync_time = datetime.now()

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Ü–µ–Ω –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.info(f"[DEBUG] –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Ü–µ–Ω: {self.klines_data[-5:]}")

            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.klines_data)} –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö 5m —Å–≤–µ—á–µ–π")

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π MACD
            self.calculate_macd()

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise

    @staticmethod
    def calculate_ema(prices: np.ndarray, period: int) -> np.ndarray:
        """–†–∞—Å—á–µ—Ç EMA —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é"""
        prices = np.array(prices, dtype=np.float64)  # –ü–æ–≤—ã—à–µ–Ω–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å

        if len(prices) < period:
            return np.full_like(prices, np.nan, dtype=np.float64)

        ema = np.full_like(prices, np.nan, dtype=np.float64)
        alpha = np.float64(2.0) / np.float64(period + 1.0)

        # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π –Ω–µ-NaN —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        first_valid = period - 1
        for i in range(len(prices)):
            if not np.isnan(prices[i]):
                first_valid = max(i, period - 1)
                break

        if first_valid >= len(prices):
            return ema

        # –ü–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ EMA = SMA –ø–µ—Ä–≤—ã—Ö period –∑–Ω–∞—á–µ–Ω–∏–π
        if first_valid + period <= len(prices):
            valid_window = prices[first_valid - period + 1:first_valid + 1]
            if not np.any(np.isnan(valid_window)):
                ema[first_valid] = np.mean(valid_window, dtype=np.float64)
            elif first_valid < len(prices):
                ema[first_valid] = prices[first_valid]

        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —Ñ–æ—Ä–º—É–ª–µ EMA —Å –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é
        for i in range(first_valid + 1, len(prices)):
            if not np.isnan(prices[i]) and not np.isnan(ema[i - 1]):
                ema[i] = alpha * prices[i] + (np.float64(1.0) - alpha) * ema[i - 1]

        return ema

    def calculate_macd(self) -> Optional[Dict[str, Any]]:
        """–†–∞—Å—á–µ—Ç MACD —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ TradingView/Binance"""
        if len(self.klines_data) < 32:  # 26 + 7 - 1
            return None

        prices = np.array(self.klines_data, dtype=np.float64)  # –ü–æ–≤—ã—à–µ–Ω–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º EMA12 –∏ EMA26 —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é
        ema12 = self.calculate_ema(prices, 12)
        ema26 = self.calculate_ema(prices, 26)

        # MACD Line = EMA12 - EMA26 (–±–µ–∑ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è)
        macd_line = np.full_like(prices, np.nan, dtype=np.float64)

        # MACD —Å—á–∏—Ç–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–∞–º, –≥–¥–µ –µ—Å—Ç—å –æ–±–∞ EMA
        for i in range(len(prices)):
            if not np.isnan(ema12[i]) and not np.isnan(ema26[i]):
                macd_line[i] = ema12[i] - ema26[i]

        # Signal Line = EMA7 –æ—Ç MACD (—Ç–æ–ª—å–∫–æ –æ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π MACD)
        first_macd_idx = None
        for i in range(len(macd_line)):
            if not np.isnan(macd_line[i]):
                first_macd_idx = i
                break

        if first_macd_idx is None or len(macd_line) - first_macd_idx < 7:
            return None

        # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—É—é —á–∞—Å—Ç—å MACD –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ Signal
        valid_macd = macd_line[first_macd_idx:]
        signal_ema = self.calculate_ema(valid_macd, 7)

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Signal –≤ –ø–æ–ª–Ω—ã–π –º–∞—Å—Å–∏–≤
        signal_line = np.full_like(prices, np.nan, dtype=np.float64)
        signal_line[first_macd_idx:] = signal_ema

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ë–ï–ó –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
        current_price = float(prices[-1])
        current_macd = float(macd_line[-1]) if not np.isnan(macd_line[-1]) else 0.0
        current_signal = float(signal_line[-1]) if not np.isnan(signal_line[-1]) else 0.0
        current_histogram = current_macd - current_signal

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏—è –≤–∞–ª–∏–¥–Ω—ã
        if np.isnan(current_macd) or np.isnan(current_signal):
            return None

        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ MACD –ë–ï–ó –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
        macd_data = {
            'timestamp': datetime.now(),
            'price': current_price,  # –ë–µ–∑ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
            'macd_line': current_macd,  # –ë–µ–∑ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
            'signal_line': current_signal,  # –ë–µ–∑ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
            'histogram': current_histogram,  # –ë–µ–∑ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
            'timeframe': '5m'
        }

        self.macd_data.append(macd_data)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞–ª—ã
        signal = self.detect_macd_signals(current_macd, current_signal, macd_data)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º MACD –∑–Ω–∞—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ 60 —Å–µ–∫—É–Ω–¥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        current_time = datetime.now()
        should_display = False

        if self.last_macd_display_time is None:
            should_display = True
        else:
            time_since_display = (current_time - self.last_macd_display_time).total_seconds()
            if time_since_display >= self.macd_display_interval:
                should_display = True

        if should_display:
            # –û–∫—Ä—É–≥–ª—è–µ–º –¢–û–õ–¨–ö–û –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            display_price = round(current_price, 2)
            display_macd = round(current_macd, 2)
            display_signal = round(current_signal, 2)
            display_histogram = round(current_histogram, 2)

            logger.info(
                f"üìä MACD 5m: –¶–µ–Ω–∞: {display_price} | "
                f"MACD: {display_macd} | "
                f"Signal: {display_signal} | "
                f"Hist: {display_histogram}"
            )

            self.last_macd_display_time = current_time

        return macd_data

    def detect_macd_signals(self, current_macd: float, current_signal: float,
                            macd_data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ MACD –ø—Ä–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–∏ –ª–∏–Ω–∏–π"""
        if self.last_macd_line is None or self.last_signal_line is None:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –≤—ã—Ö–æ–¥–∏–º
            self.last_macd_line = current_macd
            self.last_signal_line = current_signal
            return None

        signal = None

        # –ü–ï–†–ï–°–ï–ß–ï–ù–ò–ï –°–ù–ò–ó–£ –í–í–ï–†–•: –±—ã—á–∏–π —Å–∏–≥–Ω–∞–ª
        if (self.last_macd_line < self.last_signal_line and
                current_macd > current_signal):

            signal = {
                'type': 'buy',
                'timeframe': '5m',
                'timestamp': macd_data['timestamp'],
                'price': macd_data['price'],
                'macd_line': current_macd,
                'signal_line': current_signal,
                'histogram': macd_data['histogram'],
                'crossover_type': 'bullish'
            }

        # –ü–ï–†–ï–°–ï–ß–ï–ù–ò–ï –°–í–ï–†–•–£ –í–ù–ò–ó: –º–µ–¥–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª
        elif (self.last_macd_line > self.last_signal_line and
              current_macd < current_signal):

            signal = {
                'type': 'sell',
                'timeframe': '5m',
                'timestamp': macd_data['timestamp'],
                'price': macd_data['price'],
                'macd_line': current_macd,
                'signal_line': current_signal,
                'histogram': macd_data['histogram'],
                'crossover_type': 'bearish'
            }

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        self.last_macd_line = current_macd
        self.last_signal_line = current_signal

        if signal:
            logger.info(f"üéØ –ü–ï–†–ï–°–ï–ß–ï–ù–ò–ï MACD 5m! {signal['crossover_type'].upper()} —Å–∏–≥–Ω–∞–ª {signal['type'].upper()}")

            # –í—ã–∑—ã–≤–∞–µ–º callback'–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ
            self._call_callbacks_safe(signal)

        return signal

    async def _call_callbacks(self, signal: Dict[str, Any]):
        """–í—ã–∑–æ–≤ –≤—Å–µ—Ö callback —Ñ—É–Ω–∫—Ü–∏–π"""
        for callback in self.callbacks:
            try:
                if asyncio.iscoroutinefunction(callback):
                    await callback(signal)
                else:
                    callback(signal)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ callback: {e}")

    def _call_callbacks_safe(self, signal: Dict[str, Any]):
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–∑–æ–≤ callback —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        for callback in self.callbacks:
            try:
                if asyncio.iscoroutinefunction(callback):
                    # –î–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö callback —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ —Ç–µ–∫—É—â–µ–º event loop
                    try:
                        loop = asyncio.get_event_loop()
                        if loop.is_running():
                            # –ï—Å–ª–∏ event loop —É–∂–µ –∑–∞–ø—É—â–µ–Ω, —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
                            asyncio.create_task(callback(signal))
                        else:
                            # –ï—Å–ª–∏ event loop –Ω–µ –∑–∞–ø—É—â–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –∫–æ—Ä—É—Ç–∏–Ω—É
                            asyncio.run(callback(signal))
                    except RuntimeError:
                        # –ï—Å–ª–∏ –Ω–µ—Ç event loop, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
                        asyncio.run(callback(signal))
                else:
                    # –î–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö callback –≤—ã–∑—ã–≤–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é
                    callback(signal)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ callback: {e}")

    def handle_kline_message(self, _, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–≤–µ—á–µ–π"""
        try:
            data = json.loads(message)

            if 'k' in data:
                kline = data['k']
                close_price = float(kline['c'])
                is_kline_closed = kline['x']  # True –µ—Å–ª–∏ —Å–≤–µ—á–∞ –∑–∞–∫—Ä—ã–ª–∞—Å—å

                if is_kline_closed:
                    # –°–≤–µ—á–∞ –∑–∞–∫—Ä—ã–ª–∞—Å—å - –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å–≤–µ—á—É —Å —ç—Ç–æ–π —Ü–µ–Ω–æ–π –∑–∞–∫—Ä—ã—Ç–∏—è
                    self.klines_data.append(close_price)
                    logger.info(
                        f"[–ù–û–í–ê–Ø –°–í–ï–ß–ê] –í—Ä–µ–º—è: {pd.to_datetime(kline['t'], unit='ms')} | "
                        f"–ó–∞–∫—Ä—ã—Ç–∏–µ: {close_price} | –í—Å–µ–≥–æ —Å–≤–µ—á–µ–π: {len(self.klines_data)}"
                    )

                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                    if len(self.klines_data) > self.limit + 50:
                        self.klines_data = self.klines_data[-self.limit:]
                        logger.info(f"[–û–ë–†–ï–ó–ö–ê] –ú–∞—Å—Å–∏–≤ –æ–±—Ä–µ–∑–∞–Ω –¥–æ {len(self.klines_data)} —Å–≤–µ—á–µ–π")
                else:
                    # –°–≤–µ—á–∞ –µ—â—ë –∏–¥—ë—Ç - –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É
                    if len(self.klines_data) > 0:
                        self.klines_data[-1] = close_price
                    else:
                        # –ü–µ—Ä–≤–∞—è —Å–≤–µ—á–∞ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
                        self.klines_data.append(close_price)

                self.total_updates += 1

                # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º MACD —Å –∫–∞–∂–¥—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
                self.calculate_macd()

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    def start_websocket(self):
        """–ó–∞–ø—É—Å–∫ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        try:
            self.ws_client = UMFuturesWebsocketClient(
                on_message=self.handle_kline_message
            )

            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ 5m kline –¥–∞–Ω–Ω—ã–µ
            self.ws_client.kline(
                symbol=self.symbol.lower(),
                interval='5m'
            )

            logger.info(f"üöÄ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è {self.symbol} 5m")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            raise

    def stop_websocket(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if self.ws_client:
            try:
                self.ws_client.stop()
                logger.info("‚èπÔ∏è WebSocket 5m —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è WebSocket: {e}")

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞"""
        if self.is_running:
            logger.warning("‚ö†Ô∏è MACD 5m –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return

        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ MACD 5m –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞: {self.symbol}")

        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
            self.get_historical_data()

            # –ó–∞–ø—É—Å–∫–∞–µ–º WebSocket
            self.start_websocket()

            self.is_running = True
            logger.info("‚úÖ MACD 5m –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ MACD 5m –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞: {e}")
            await self.stop()
            raise

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞"""
        if not self.is_running:
            return

        logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ MACD 5m –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞...")

        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º WebSocket
            self.stop_websocket()

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.last_macd_line = None
            self.last_signal_line = None

            self.is_running = False
            logger.info(f"‚úÖ MACD 5m –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {self.total_updates} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π)")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ MACD 5m –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞: {e}")

    def get_current_macd_values(self) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π MACD"""
        if not self.macd_data:
            return None

        return self.macd_data[-1]

    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞"""
        return {
            'symbol': self.symbol,
            'timeframe': '5m',
            'is_running': self.is_running,
            'klines_count': len(self.klines_data),
            'callbacks_count': len(self.callbacks),
            'total_updates': self.total_updates,
            'has_macd_data': len(self.macd_data) > 0
        }