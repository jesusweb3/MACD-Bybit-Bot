# src/indicators/macd.py
import pandas as pd
import asyncio
from typing import Dict, Any, List, Optional, Callable, Union, Awaitable
from datetime import datetime, timezone, timedelta
from ..exchange.binance import BinanceClient
from ..utils.logger import logger


class MACDIndicator:
    """
    MACD –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–≤—É—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
    - –¢–∞–π–º—Ñ—Ä–µ–π–º –≤—Ö–æ–¥–∞: –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—Ö–æ–¥–∞ –≤ –ø–æ–∑–∏—Ü–∏—é
    - –¢–∞–π–º—Ñ—Ä–µ–π–º –≤—ã—Ö–æ–¥–∞: –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏
    """

    def __init__(self, symbol: str, entry_timeframe: str, exit_timeframe: str,
                 fast_period: int = 12, slow_period: int = 26, signal_period: int = 9,
                 min_history: int = 100):
        """
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (BTCUSDT)
            entry_timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º –¥–ª—è –≤—Ö–æ–¥–∞ (45m, 1h –∏ —Ç.–¥.)
            exit_timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º –¥–ª—è –≤—ã—Ö–æ–¥–∞ (15m, 30m –∏ —Ç.–¥.)
            fast_period: –ü–µ—Ä–∏–æ–¥ –±—ã—Å—Ç—Ä–æ–π EMA (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 12)
            slow_period: –ü–µ—Ä–∏–æ–¥ –º–µ–¥–ª–µ–Ω–Ω–æ–π EMA (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 26)
            signal_period: –ü–µ—Ä–∏–æ–¥ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 9)
            min_history: –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
        """
        self.symbol = symbol
        self.entry_timeframe = entry_timeframe
        self.exit_timeframe = exit_timeframe
        self.fast_period = fast_period
        self.slow_period = slow_period
        self.signal_period = signal_period
        self.min_history = min_history

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–≤–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
        self.dual_timeframe = entry_timeframe != exit_timeframe

        # –ö–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        self.binance_client = BinanceClient()

        # –ò—Å—Ç–æ—Ä–∏—è —Å–≤–µ—á–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
        self.entry_klines: List[Dict[str, Any]] = []
        self.exit_klines: List[Dict[str, Any]] = []

        # DataFrame –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤ MACD
        self.entry_df: Optional[pd.DataFrame] = None
        self.exit_df: Optional[pd.DataFrame] = None

        # Callback —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤
        self.entry_callbacks: List[
            Union[Callable[[Dict[str, Any]], None], Callable[[Dict[str, Any]], Awaitable[None]]]] = []
        self.exit_callbacks: List[
            Union[Callable[[Dict[str, Any]], None], Callable[[Dict[str, Any]], Awaitable[None]]]] = []

        # –§–ª–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.is_running = False
        self.entry_stream_active = False
        self.exit_stream_active = False

        # –ö–µ—à –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Å–≤–µ—á–µ–π
        self.custom_klines_cache: Dict[str, List[Dict[str, Any]]] = {}

        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
        self.custom_timeframes = {
            '45m': {'base': '15m', 'count': 3},  # 3 —Å–≤–µ—á–∏ –ø–æ 15–º
            '50m': {'base': '5m', 'count': 10},  # 10 —Å–≤–µ—á–µ–π –ø–æ 5–º
            '55m': {'base': '5m', 'count': 11},  # 11 —Å–≤–µ—á–µ–π –ø–æ 5–º
            '3h': {'base': '1h', 'count': 3},  # 3 —Å–≤–µ—á–∏ –ø–æ 1—á
            '4h': {'base': '1h', 'count': 4}  # 4 —Å–≤–µ—á–∏ –ø–æ 1—á
        }

        logger.info(f"MACD –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è {symbol}")
        logger.info(f"–¢–∞–π–º—Ñ—Ä–µ–π–º –≤—Ö–æ–¥–∞: {entry_timeframe}")
        logger.info(f"–¢–∞–π–º—Ñ—Ä–µ–π–º –≤—ã—Ö–æ–¥–∞: {exit_timeframe}")
        logger.info(f"–†–µ–∂–∏–º: {'Dual TF' if self.dual_timeframe else 'Single TF'}")
        logger.info(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã MACD: {fast_period}, {slow_period}, {signal_period}")

    def add_entry_callback(self, callback: Union[
        Callable[[Dict[str, Any]], None], Callable[[Dict[str, Any]], Awaitable[None]]]):
        """–î–æ–±–∞–≤–∏—Ç—å callback –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤ –≤—Ö–æ–¥–∞"""
        self.entry_callbacks.append(callback)

    def add_exit_callback(self, callback: Union[
        Callable[[Dict[str, Any]], None], Callable[[Dict[str, Any]], Awaitable[None]]]):
        """–î–æ–±–∞–≤–∏—Ç—å callback –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤ –≤—ã—Ö–æ–¥–∞"""
        self.exit_callbacks.append(callback)

    def _is_custom_timeframe(self, timeframe: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º –∫–∞—Å—Ç–æ–º–Ω—ã–º"""
        return timeframe in self.custom_timeframes

    @staticmethod
    def _get_timeframe_minutes(timeframe: str) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∏–Ω—É—Ç –≤ —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ"""
        if timeframe.endswith('m'):
            return int(timeframe[:-1])
        elif timeframe.endswith('h'):
            return int(timeframe[:-1]) * 60
        return 0

    def _get_custom_interval_start_times(self, custom_tf: str) -> List[datetime]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω –Ω–∞—á–∞–ª–∞ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤

        Args:
            custom_tf: –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º (45m, 50m, 55m)

        Returns:
            –°–ø–∏—Å–æ–∫ –≤—Ä–µ–º–µ–Ω –Ω–∞—á–∞–ª–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è
        """
        custom_minutes = self._get_timeframe_minutes(custom_tf)

        # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–æ–ª—É–Ω–æ—á–∏ UTC
        day_start = datetime.now(timezone.utc).replace(hour=0, minute=0, second=0, microsecond=0)

        start_times = []
        current_time = day_start

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Å–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è
        while current_time.day == day_start.day:
            start_times.append(current_time)
            current_time += timedelta(minutes=custom_minutes)

        return start_times

    def _find_current_custom_interval(self, current_time: datetime, custom_tf: str) -> tuple[datetime, datetime]:
        """
        –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞

        Args:
            current_time: –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
            custom_tf: –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º

        Returns:
            –ö–æ—Ä—Ç–µ–∂ (–Ω–∞—á–∞–ª–æ_–∏–Ω—Ç–µ—Ä–≤–∞–ª–∞, –∫–æ–Ω–µ—Ü_–∏–Ω—Ç–µ—Ä–≤–∞–ª–∞)
        """
        custom_minutes = self._get_timeframe_minutes(custom_tf)

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–Ω—è
        start_times = self._get_custom_interval_start_times(custom_tf)

        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        for i, start_time in enumerate(start_times):
            end_time = start_time + timedelta(minutes=custom_minutes)

            if start_time <= current_time < end_time:
                return start_time, end_time

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ —Ç–µ–∫—É—â–µ–º –¥–Ω–µ, –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –Ω–∞—á–∞–ª–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è
        next_day_start = current_time.replace(hour=0, minute=0, second=0, microsecond=0) + timedelta(days=1)
        return next_day_start, next_day_start + timedelta(minutes=custom_minutes)

    def _should_complete_custom_kline(self, kline_time: datetime, custom_tf: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ª–∂–Ω–∞ –ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è –∫–∞—Å—Ç–æ–º–Ω–∞—è —Å–≤–µ—á–∞

        Args:
            kline_time: –í—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è –±–∞–∑–æ–≤–æ–π —Å–≤–µ—á–∏
            custom_tf: –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º

        Returns:
            True –µ—Å–ª–∏ –∫–∞—Å—Ç–æ–º–Ω–∞—è —Å–≤–µ—á–∞ –¥–æ–ª–∂–Ω–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è
        """
        interval_start, interval_end = self._find_current_custom_interval(kline_time, custom_tf)

        # –ö–∞—Å—Ç–æ–º–Ω–∞—è —Å–≤–µ—á–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è, –µ—Å–ª–∏ –±–∞–∑–æ–≤–∞—è —Å–≤–µ—á–∞ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –≤ –∫–æ–Ω—Ü–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        # –£—á–∏—Ç—ã–≤–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å (30 —Å–µ–∫—É–Ω–¥)
        time_diff = abs((kline_time - interval_end).total_seconds())

        should_complete = time_diff <= 30  # 30 —Å–µ–∫—É–Ω–¥ –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å

        if should_complete:
            logger.info(f"üïí –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–π —Å–≤–µ—á–∏ {custom_tf}")
            logger.info(f"   –ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval_start.strftime('%H:%M')} - {interval_end.strftime('%H:%M')}")
            logger.info(f"   –í—Ä–µ–º—è –±–∞–∑–æ–≤–æ–π —Å–≤–µ—á–∏: {kline_time.strftime('%H:%M:%S')}")

        return should_complete

    @staticmethod
    def calculate_ema(data: pd.Series, period: int) -> pd.Series:
        """–†–∞—Å—á–µ—Ç —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π —Å–∫–æ–ª—å–∑—è—â–µ–π —Å—Ä–µ–¥–Ω–µ–π"""
        return data.ewm(span=period, adjust=False).mean()

    def calculate_macd(self, df: pd.DataFrame) -> pd.DataFrame:
        """
        –†–∞—Å—á–µ—Ç MACD –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞

        Returns:
            DataFrame —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏: macd_line, signal_line, histogram
        """
        if len(df) < self.slow_period:
            return pd.DataFrame()

        # –ö–æ–ø–∏—Ä—É–µ–º DataFrame
        result_df = df.copy()

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º EMA
        fast_ema = self.calculate_ema(df['close'], self.fast_period)
        slow_ema = self.calculate_ema(df['close'], self.slow_period)

        # MACD –ª–∏–Ω–∏—è = –±—ã—Å—Ç—Ä–∞—è EMA - –º–µ–¥–ª–µ–Ω–Ω–∞—è EMA
        result_df['macd_line'] = fast_ema - slow_ema

        # –°–∏–≥–Ω–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è = EMA –æ—Ç MACD –ª–∏–Ω–∏–∏
        result_df['signal_line'] = self.calculate_ema(result_df['macd_line'], self.signal_period)

        # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ = MACD –ª–∏–Ω–∏—è - —Å–∏–≥–Ω–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
        result_df['histogram'] = result_df['macd_line'] - result_df['signal_line']

        return result_df

    def detect_macd_signals(self, df: pd.DataFrame, timeframe_type: str) -> Optional[Dict[str, Any]]:
        """
        –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ MACD - –¢–û–õ–¨–ö–û –ø—Ä–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–∏ –ª–∏–Ω–∏–π

        Args:
            df: DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏ MACD
            timeframe_type: 'entry' –∏–ª–∏ 'exit'

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Å–∏–≥–Ω–∞–ª–æ–º –∏–ª–∏ None (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–∏!)
        """
        if len(df) < 2:
            return None

        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
        current = df.iloc[-1]
        previous = df.iloc[-2]

        signal = None

        # –ü–ï–†–ï–°–ï–ß–ï–ù–ò–ï –°–ù–ò–ó–£ –í–í–ï–†–•: –±—ã—á–∏–π —Å–∏–≥–Ω–∞–ª
        # –ü—Ä–µ–¥—ã–¥—É—â–∞—è: MACD –±—ã–ª –ù–ò–ñ–ï —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏
        # –¢–µ–∫—É—â–∞—è: MACD —Å—Ç–∞–ª –í–´–®–ï —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏
        if (previous['macd_line'] < previous['signal_line'] and
                current['macd_line'] > current['signal_line']):

            signal = {
                'type': 'buy' if timeframe_type == 'entry' else 'exit_short',
                'timeframe': self.entry_timeframe if timeframe_type == 'entry' else self.exit_timeframe,
                'timeframe_type': timeframe_type,
                'timestamp': current['timestamp'],
                'price': current['close'],
                'macd_line': current['macd_line'],
                'signal_line': current['signal_line'],
                'histogram': current['histogram'],
                'crossover_type': 'bullish'
            }

        # –ü–ï–†–ï–°–ï–ß–ï–ù–ò–ï –°–í–ï–†–•–£ –í–ù–ò–ó: –º–µ–¥–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª
        # –ü—Ä–µ–¥—ã–¥—É—â–∞—è: MACD –±—ã–ª –í–´–®–ï —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏
        # –¢–µ–∫—É—â–∞—è: MACD —Å—Ç–∞–ª –ù–ò–ñ–ï —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏
        elif (previous['macd_line'] > previous['signal_line'] and
              current['macd_line'] < current['signal_line']):

            signal = {
                'type': 'sell' if timeframe_type == 'entry' else 'exit_long',
                'timeframe': self.entry_timeframe if timeframe_type == 'entry' else self.exit_timeframe,
                'timeframe_type': timeframe_type,
                'timestamp': current['timestamp'],
                'price': current['close'],
                'macd_line': current['macd_line'],
                'signal_line': current['signal_line'],
                'histogram': current['histogram'],
                'crossover_type': 'bearish'
            }

        # –ï—Å–ª–∏ –Ω–µ—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
        return signal

    @staticmethod
    def klines_to_dataframe(klines: List[Dict[str, Any]]) -> pd.DataFrame:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ —Å–≤–µ—á–µ–π –≤ DataFrame"""
        if not klines:
            return pd.DataFrame()

        df = pd.DataFrame(klines)
        df['datetime'] = pd.to_datetime(df['timestamp'], unit='ms', utc=True)
        df = df.sort_values('timestamp').reset_index(drop=True)

        return df

    async def load_historical_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–æ–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤"""
        logger.info(f"–ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è {self.symbol}")

        if self._is_custom_timeframe(self.entry_timeframe):
            # –î–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Å–≤–µ—á–∏
            config = self.custom_timeframes[self.entry_timeframe]
            base_timeframe = config['base']

            logger.info(
                f"–ó–∞–≥—Ä—É–∂–∞–µ–º {self.min_history * config['count']} –±–∞–∑–æ–≤—ã—Ö —Å–≤–µ—á–µ–π {base_timeframe} –¥–ª—è {self.entry_timeframe}")
            base_klines = await self.binance_client.get_klines(
                self.symbol, base_timeframe, self.min_history * config['count']
            )

            if not base_klines:
                raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {base_timeframe}")

            # –°—Ç—Ä–æ–∏–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Å–≤–µ—á–∏ –∏–∑ –±–∞–∑–æ–≤—ã—Ö
            self.entry_klines = self._build_historical_custom_klines(base_klines, self.entry_timeframe)

        else:
            # –û–±—ã—á–Ω—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º
            logger.info(f"–ó–∞–≥—Ä—É–∂–∞–µ–º {self.min_history} —Å–≤–µ—á–µ–π –¥–ª—è –≤—Ö–æ–¥–∞ ({self.entry_timeframe})")
            self.entry_klines = await self.binance_client.get_klines(
                self.symbol, self.entry_timeframe, self.min_history
            )

        if not self.entry_klines:
            raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {self.entry_timeframe}")

        # –ï—Å–ª–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã —Ä–∞–∑–Ω—ã–µ, –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã—Ö–æ–¥–∞
        if self.dual_timeframe:
            if self._is_custom_timeframe(self.exit_timeframe):
                # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è exit —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
                config = self.custom_timeframes[self.exit_timeframe]
                base_timeframe = config['base']

                base_klines = await self.binance_client.get_klines(
                    self.symbol, base_timeframe, self.min_history * config['count']
                )

                if not base_klines:
                    raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {base_timeframe}")

                self.exit_klines = self._build_historical_custom_klines(base_klines, self.exit_timeframe)
            else:
                logger.info(f"–ó–∞–≥—Ä—É–∂–∞–µ–º {self.min_history} —Å–≤–µ—á–µ–π –¥–ª—è –≤—ã—Ö–æ–¥–∞ ({self.exit_timeframe})")
                self.exit_klines = await self.binance_client.get_klines(
                    self.symbol, self.exit_timeframe, self.min_history
                )

            if not self.exit_klines:
                raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {self.exit_timeframe}")
        else:
            # –ï—Å–ª–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ –¥–∞–Ω–Ω—ã–µ
            self.exit_klines = self.entry_klines.copy()

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ DataFrame
        self.entry_df = MACDIndicator.klines_to_dataframe(self.entry_klines)
        self.exit_df = MACDIndicator.klines_to_dataframe(self.exit_klines)

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ MACD
        self.entry_df = self.calculate_macd(self.entry_df)
        self.exit_df = self.calculate_macd(self.exit_df)

        logger.info(f"‚úÖ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: –≤—Ö–æ–¥={len(self.entry_df)}, –≤—ã—Ö–æ–¥={len(self.exit_df)}")

    def _build_historical_custom_klines(self, base_klines: List[Dict[str, Any]], custom_tf: str) -> List[
        Dict[str, Any]]:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Å–≤–µ—á–µ–π –∏–∑ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –±–∞–∑–æ–≤—ã—Ö —Å–≤–µ—á–µ–π"""
        if not base_klines:
            return []

        config = self.custom_timeframes[custom_tf]
        custom_minutes = self._get_timeframe_minutes(custom_tf)

        custom_klines = []
        current_group = []

        for kline in base_klines:
            kline_time = datetime.fromtimestamp(kline['timestamp'] / 1000, tz=timezone.utc)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫ –∫–∞–∫–æ–º—É –∫–∞—Å—Ç–æ–º–Ω–æ–º—É –∏–Ω—Ç–µ—Ä–≤–∞–ª—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è —ç—Ç–∞ —Å–≤–µ—á–∞
            interval_start, interval_end = self._find_current_custom_interval(kline_time, custom_tf)

            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏ —É –Ω–∞—Å –µ—Å—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Å–≤–µ—á–∏ - –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π
            if current_group:
                last_kline_time = datetime.fromtimestamp(current_group[-1]['timestamp'] / 1000, tz=timezone.utc)
                last_interval_start, _ = self._find_current_custom_interval(last_kline_time, custom_tf)

                if interval_start != last_interval_start:
                    # –ù–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª - –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π
                    if len(current_group) > 0:
                        merged = self._merge_klines(current_group)
                        if merged:
                            custom_klines.append(merged)
                    current_group = []

            # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–µ—á—É –≤ —Ç–µ–∫—É—â—É—é –≥—Ä—É–ø–ø—É
            current_group.append(kline)

        # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≥—Ä—É–ø–ø—É
        if current_group:
            merged = self._merge_klines(current_group)
            if merged:
                custom_klines.append(merged)

        logger.info(f"–ü–æ—Å—Ç—Ä–æ–µ–Ω–æ {len(custom_klines)} –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Å–≤–µ—á–µ–π {custom_tf} –∏–∑ {len(base_klines)} –±–∞–∑–æ–≤—ã—Ö")
        return custom_klines

    @staticmethod
    def _merge_klines(klines: List[Dict[str, Any]]) -> Dict[str, Any]:
        """–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–≤–µ—á–µ–π –≤ –æ–¥–Ω—É –∫–∞—Å—Ç–æ–º–Ω—É—é"""
        if not klines:
            return {}

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        klines.sort(key=lambda x: x['timestamp'])

        merged = {
            'timestamp': klines[0]['timestamp'],
            'open': klines[0]['open'],
            'high': max(k['high'] for k in klines),
            'low': min(k['low'] for k in klines),
            'close': klines[-1]['close'],
            'volume': sum(k['volume'] for k in klines),
            'close_time': klines[-1]['close_time'],
            'quote_volume': sum(k.get('quote_volume', 0) for k in klines),
            'trades_count': sum(k.get('trades_count', 0) for k in klines)
        }

        return merged

    async def entry_kline_callback(self, kline: Dict[str, Any]):
        """Callback –¥–ª—è –Ω–æ–≤—ã—Ö —Å–≤–µ—á–µ–π —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ –≤—Ö–æ–¥–∞"""
        try:
            if self._is_custom_timeframe(self.entry_timeframe):
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º
                await self._process_custom_kline_entry(kline)
            else:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º
                await self._process_standard_kline_entry(kline)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ entry_kline_callback: {e}")

    async def _process_standard_kline_entry(self, kline: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–π —Å–≤–µ—á–∏ –¥–ª—è –≤—Ö–æ–¥–∞"""
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å–≤–µ—á—É
        self.entry_klines.append(kline)

        # –û–±–Ω–æ–≤–ª—è–µ–º DataFrame
        self.entry_df = MACDIndicator.klines_to_dataframe(self.entry_klines[-self.min_history:])
        self.entry_df = self.calculate_macd(self.entry_df)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞–ª—ã –¢–û–õ–¨–ö–û –ø—Ä–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–∏
        signal = self.detect_macd_signals(self.entry_df, 'entry')

        if signal:
            logger.info(f"üéØ –ü–ï–†–ï–°–ï–ß–ï–ù–ò–ï! –°–∏–≥–Ω–∞–ª –≤—Ö–æ–¥–∞: {signal['type']} –Ω–∞ {signal['timeframe']}")
            logger.info(f"   –¢–∏–ø –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è: {signal['crossover_type']}")
            logger.info(
                f"   –¶–µ–Ω–∞: {signal['price']}, MACD: {signal['macd_line']:.6f} ‚Üí Signal: {signal['signal_line']:.6f}")

            # –í—ã–∑—ã–≤–∞–µ–º –≤—Å–µ callback'–∏ –¥–ª—è –≤—Ö–æ–¥–∞
            for callback in self.entry_callbacks:
                try:
                    if asyncio.iscoroutinefunction(callback):
                        await callback(signal)
                    else:
                        callback(signal)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ entry callback: {e}")

    async def _process_custom_kline_entry(self, base_kline: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞–∑–æ–≤–æ–π —Å–≤–µ—á–∏ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ –≤—Ö–æ–¥–∞"""
        cache_key = f"{self.symbol}_{self.entry_timeframe}_entry"

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–µ—à –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if cache_key not in self.custom_klines_cache:
            self.custom_klines_cache[cache_key] = []

        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é —Å–≤–µ—á—É –≤ –∫–µ—à
        self.custom_klines_cache[cache_key].append(base_kline)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—É—é —Å–≤–µ—á—É
        base_kline_time = datetime.fromtimestamp(base_kline['close_time'] / 1000, tz=timezone.utc)

        if self._should_complete_custom_kline(base_kline_time, self.entry_timeframe):
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é —Å–≤–µ—á—É
            cached_klines = self.custom_klines_cache[cache_key]

            if cached_klines:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é —Å–≤–µ—á—É
                custom_kline = self._merge_klines(cached_klines)

                if custom_kline:
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫ –∏—Å—Ç–æ—Ä–∏–∏
                    self.entry_klines.append(custom_kline)

                    # –û–±–Ω–æ–≤–ª—è–µ–º DataFrame
                    self.entry_df = MACDIndicator.klines_to_dataframe(self.entry_klines[-self.min_history:])
                    self.entry_df = self.calculate_macd(self.entry_df)

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞–ª—ã
                    signal = self.detect_macd_signals(self.entry_df, 'entry')

                    if signal:
                        logger.info(f"üéØ –ü–ï–†–ï–°–ï–ß–ï–ù–ò–ï! –°–∏–≥–Ω–∞–ª –≤—Ö–æ–¥–∞: {signal['type']} –Ω–∞ {signal['timeframe']}")
                        logger.info(f"   –¢–∏–ø –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è: {signal['crossover_type']}")
                        logger.info(
                            f"   –¶–µ–Ω–∞: {signal['price']}, MACD: {signal['macd_line']:.6f} ‚Üí Signal: {signal['signal_line']:.6f}")

                        # –í—ã–∑—ã–≤–∞–µ–º –≤—Å–µ callback'–∏ –¥–ª—è –≤—Ö–æ–¥–∞
                        for callback in self.entry_callbacks:
                            try:
                                if asyncio.iscoroutinefunction(callback):
                                    await callback(signal)
                                else:
                                    callback(signal)
                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ –≤ entry callback: {e}")

                # –û—á–∏—â–∞–µ–º –∫–µ—à –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
                self.custom_klines_cache[cache_key] = []

    async def exit_kline_callback(self, kline: Dict[str, Any]):
        """Callback –¥–ª—è –Ω–æ–≤—ã—Ö —Å–≤–µ—á–µ–π —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ –≤—ã—Ö–æ–¥–∞"""
        try:
            # –î–ª—è Single TF —Ä–µ–∂–∏–º–∞ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º exit callback –æ—Ç–¥–µ–ª—å–Ω–æ
            if not self.dual_timeframe:
                return

            if self._is_custom_timeframe(self.exit_timeframe):
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º
                await self._process_custom_kline_exit(kline)
            else:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º
                await self._process_standard_kline_exit(kline)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ exit_kline_callback: {e}")

    async def _process_standard_kline_exit(self, kline: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–π —Å–≤–µ—á–∏ –¥–ª—è –≤—ã—Ö–æ–¥–∞"""
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å–≤–µ—á—É
        self.exit_klines.append(kline)

        # –û–±–Ω–æ–≤–ª—è–µ–º DataFrame
        self.exit_df = MACDIndicator.klines_to_dataframe(self.exit_klines[-self.min_history:])
        self.exit_df = self.calculate_macd(self.exit_df)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞–ª—ã –¢–û–õ–¨–ö–û –ø—Ä–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–∏
        signal = self.detect_macd_signals(self.exit_df, 'exit')

        if signal:
            logger.info(f"üö™ –ü–ï–†–ï–°–ï–ß–ï–ù–ò–ï! –°–∏–≥–Ω–∞–ª –≤—ã—Ö–æ–¥–∞: {signal['type']} –Ω–∞ {signal['timeframe']}")
            logger.info(f"   –¢–∏–ø –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è: {signal['crossover_type']}")
            logger.info(
                f"   –¶–µ–Ω–∞: {signal['price']}, MACD: {signal['macd_line']:.6f} ‚Üí Signal: {signal['signal_line']:.6f}")

            # –í—ã–∑—ã–≤–∞–µ–º –≤—Å–µ callback'–∏ –¥–ª—è –≤—ã—Ö–æ–¥–∞
            for callback in self.exit_callbacks:
                try:
                    if asyncio.iscoroutinefunction(callback):
                        await callback(signal)
                    else:
                        callback(signal)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ exit callback: {e}")

    async def _process_custom_kline_exit(self, base_kline: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞–∑–æ–≤–æ–π —Å–≤–µ—á–∏ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ –≤—ã—Ö–æ–¥–∞"""
        cache_key = f"{self.symbol}_{self.exit_timeframe}_exit"

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–µ—à –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if cache_key not in self.custom_klines_cache:
            self.custom_klines_cache[cache_key] = []

        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é —Å–≤–µ—á—É –≤ –∫–µ—à
        self.custom_klines_cache[cache_key].append(base_kline)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—É—é —Å–≤–µ—á—É
        base_kline_time = datetime.fromtimestamp(base_kline['close_time'] / 1000, tz=timezone.utc)

        if self._should_complete_custom_kline(base_kline_time, self.exit_timeframe):
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é —Å–≤–µ—á—É
            cached_klines = self.custom_klines_cache[cache_key]

            if cached_klines:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é —Å–≤–µ—á—É
                custom_kline = self._merge_klines(cached_klines)

                if custom_kline:
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫ –∏—Å—Ç–æ—Ä–∏–∏
                    self.exit_klines.append(custom_kline)

                    # –û–±–Ω–æ–≤–ª—è–µ–º DataFrame
                    self.exit_df = MACDIndicator.klines_to_dataframe(self.exit_klines[-self.min_history:])
                    self.exit_df = self.calculate_macd(self.exit_df)

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞–ª—ã
                    signal = self.detect_macd_signals(self.exit_df, 'exit')

                    if signal:
                        logger.info(f"üö™ –ü–ï–†–ï–°–ï–ß–ï–ù–ò–ï! –°–∏–≥–Ω–∞–ª –≤—ã—Ö–æ–¥–∞: {signal['type']} –Ω–∞ {signal['timeframe']}")
                        logger.info(f"   –¢–∏–ø –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è: {signal['crossover_type']}")
                        logger.info(
                            f"   –¶–µ–Ω–∞: {signal['price']}, MACD: {signal['macd_line']:.6f} ‚Üí Signal: {signal['signal_line']:.6f}")

                        # –í—ã–∑—ã–≤–∞–µ–º –≤—Å–µ callback'–∏ –¥–ª—è –≤—ã—Ö–æ–¥–∞
                        for callback in self.exit_callbacks:
                            try:
                                if asyncio.iscoroutinefunction(callback):
                                    await callback(signal)
                                else:
                                    callback(signal)
                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ –≤ exit callback: {e}")

                # –û—á–∏—â–∞–µ–º –∫–µ—à –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
                self.custom_klines_cache[cache_key] = []

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞"""
        if self.is_running:
            logger.warning("MACD –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return

        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º MACD –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–ª—è {self.symbol}")

        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
            await self.load_historical_data()

            # –ó–∞–ø—É—Å–∫–∞–µ–º WebSocket –ø–æ—Ç–æ–∫–∏
            logger.info("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º WebSocket –ø–æ—Ç–æ–∫–∏...")

            # –°–æ–∑–¥–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–±–µ—Ä—Ç–∫–∏ –¥–ª—è async callback'–æ–≤
            def entry_wrapper(kline: Dict[str, Any]) -> None:
                asyncio.create_task(self.entry_kline_callback(kline))

            def exit_wrapper(kline: Dict[str, Any]) -> None:
                asyncio.create_task(self.exit_kline_callback(kline))

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π –±–∞–∑–æ–≤—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º –Ω—É–∂–µ–Ω –¥–ª—è entry
            if self._is_custom_timeframe(self.entry_timeframe):
                base_entry_tf = self.custom_timeframes[self.entry_timeframe]['base']
            else:
                base_entry_tf = self.entry_timeframe

            # –ü–æ—Ç–æ–∫ –¥–ª—è –≤—Ö–æ–¥–∞
            await self.binance_client.start_kline_stream(
                self.symbol, base_entry_tf, entry_wrapper
            )
            self.entry_stream_active = True

            # –ü–æ—Ç–æ–∫ –¥–ª—è –≤—ã—Ö–æ–¥–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã —Ä–∞–∑–Ω—ã–µ)
            if self.dual_timeframe:
                if self._is_custom_timeframe(self.exit_timeframe):
                    base_exit_tf = self.custom_timeframes[self.exit_timeframe]['base']
                else:
                    base_exit_tf = self.exit_timeframe

                # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–∞–∑–æ–≤—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã —Ä–∞–∑–Ω—ã–µ
                if base_exit_tf != base_entry_tf:
                    await self.binance_client.start_kline_stream(
                        self.symbol, base_exit_tf, exit_wrapper
                    )

                self.exit_stream_active = True
            else:
                # –ï—Å–ª–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ, exit_stream —Å—á–∏—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º
                # –Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –ø–æ—Ç–æ–∫ —á—Ç–æ –∏ –¥–ª—è entry
                self.exit_stream_active = True

            self.is_running = True
            logger.info("‚úÖ MACD –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ MACD –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞: {e}")
            await self.stop()
            raise

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞"""
        if not self.is_running:
            return

        logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º MACD –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä...")

        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã
            if self._is_custom_timeframe(self.entry_timeframe):
                base_entry_tf = self.custom_timeframes[self.entry_timeframe]['base']
            else:
                base_entry_tf = self.entry_timeframe

            if self.dual_timeframe:
                if self._is_custom_timeframe(self.exit_timeframe):
                    base_exit_tf = self.custom_timeframes[self.exit_timeframe]['base']
                else:
                    base_exit_tf = self.exit_timeframe
            else:
                base_exit_tf = base_entry_tf

            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫–∏
            if self.entry_stream_active:
                await self.binance_client.stop_kline_stream(self.symbol, base_entry_tf)
                self.entry_stream_active = False

            if self.dual_timeframe and self.exit_stream_active and base_exit_tf != base_entry_tf:
                await self.binance_client.stop_kline_stream(self.symbol, base_exit_tf)
                self.exit_stream_active = False

            # –û—á–∏—â–∞–µ–º –∫–µ—à–∏
            self.custom_klines_cache.clear()

            self.is_running = False
            logger.info("‚úÖ MACD –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ MACD –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞: {e}")

    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        await self.stop()
        await self.binance_client.close()
        logger.info("üîí MACD –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–∫—Ä—ã—Ç")

    def get_current_macd_values(self, timeframe_type: str = 'entry') -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π MACD

        Args:
            timeframe_type: 'entry' –∏–ª–∏ 'exit'

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ç–µ–∫—É—â–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∏–ª–∏ None
        """
        df = self.entry_df if timeframe_type == 'entry' else self.exit_df

        if df is None or len(df) == 0:
            return None

        current = df.iloc[-1]

        return {
            'timestamp': current['timestamp'],
            'price': current['close'],
            'macd_line': current['macd_line'],
            'signal_line': current['signal_line'],
            'histogram': current['histogram'],
            'timeframe': self.entry_timeframe if timeframe_type == 'entry' else self.exit_timeframe
        }

    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞"""
        return {
            'symbol': self.symbol,
            'entry_timeframe': self.entry_timeframe,
            'exit_timeframe': self.exit_timeframe,
            'dual_timeframe': self.dual_timeframe,
            'is_running': self.is_running,
            'entry_stream_active': self.entry_stream_active,
            'exit_stream_active': self.exit_stream_active,
            'entry_data_length': len(self.entry_df) if self.entry_df is not None else 0,
            'exit_data_length': len(self.exit_df) if self.exit_df is not None else 0,
            'entry_callbacks': len(self.entry_callbacks),
            'exit_callbacks': len(self.exit_callbacks)
        }