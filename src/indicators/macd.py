# src/indicators/macd.py
import pandas as pd
import asyncio
from typing import Dict, Any, List, Optional, Callable, Union, Awaitable
from datetime import datetime, timezone, timedelta
from ..exchange.binance import BinanceClient
from ..utils.logger import logger


class MACDIndicator:
    """
    MACD –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π real-time –ª–æ–≥–∏–∫–æ–π

    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã: 5m, 45m
    –û–±–Ω–æ–≤–ª–µ–Ω–∏—è: –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É —Å –ø–µ—Ä–µ—Å—á–µ—Ç–æ–º MACD –∏ –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–∏–≥–Ω–∞–ª–æ–≤
    """

    def __init__(self, symbol: str, timeframe: str,
                 fast_period: int = 12, slow_period: int = 26, signal_period: int = 7,
                 min_history: int = 7500):
        """
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (BTCUSDT)
            timeframe: –¶–µ–ª–µ–≤–æ–π —Ç–∞–π–º—Ñ—Ä–µ–π–º –¥–ª—è MACD (5m, 45m)
            fast_period: –ü–µ—Ä–∏–æ–¥ –±—ã—Å—Ç—Ä–æ–π EMA (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 12)
            slow_period: –ü–µ—Ä–∏–æ–¥ –º–µ–¥–ª–µ–Ω–Ω–æ–π EMA (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 26)
            signal_period: –ü–µ—Ä–∏–æ–¥ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 7)
            min_history: –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
        """
        self.symbol = symbol
        self.timeframe = timeframe  # –¶–µ–ª–µ–≤–æ–π —Ç–∞–π–º—Ñ—Ä–µ–π–º (5m –∏–ª–∏ 45m)
        self.fast_period = fast_period
        self.slow_period = slow_period
        self.signal_period = signal_period
        self.min_history = min_history

        # –ö–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–≤—Å–µ–≥–¥–∞ –º–∏–Ω—É—Ç–Ω—ã–µ)
        self.binance_client = BinanceClient()

        # –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–ª–µ–≤—ã—Ö —Å–≤–µ—á–µ–π (5m –∏–ª–∏ 45m)
        self.target_klines: List[Dict[str, Any]] = []
        self.df: Optional[pd.DataFrame] = None

        # –¢–µ–∫—É—â–∞—è —Ñ–æ—Ä–º–∏—Ä—É–µ–º–∞—è —Å–≤–µ—á–∞ —Ü–µ–ª–µ–≤–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
        self.current_target_candle: Optional[Dict[str, Any]] = None
        self.current_target_start_time: Optional[int] = None

        # Callback —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤
        self.callbacks: List[
            Union[Callable[[Dict[str, Any]], None], Callable[[Dict[str, Any]], Awaitable[None]]]] = []

        # –§–ª–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.is_running = False
        self.stream_active = False

        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è MACD –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π
        self.last_macd_line: Optional[float] = None
        self.last_signal_line: Optional[float] = None

        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.total_candles_processed = 0

        logger.info(
            f"üîß MACD –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {symbol} {timeframe} (EMA: {fast_period}/{slow_period}, Signal: {signal_period})")

    def add_callback(self, callback: Union[
        Callable[[Dict[str, Any]], None], Callable[[Dict[str, Any]], Awaitable[None]]]):
        """–î–æ–±–∞–≤–∏—Ç—å callback –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤"""
        self.callbacks.append(callback)

    def _get_timeframe_minutes(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç –≤ —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ"""
        if self.timeframe == "5m":
            return 5
        elif self.timeframe == "45m":
            return 45
        else:
            raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º: {self.timeframe}")

    def _get_target_candle_start_time(self, timestamp_ms: int) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ü–µ–ª–µ–≤–æ–π —Å–≤–µ—á–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ timestamp —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–µ—Ç–∫–æ–π"""
        if self.timeframe == "5m":
            # –î–ª—è 5m: –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ –±–ª–∏–∂–∞–π—à–∏—Ö 5 –º–∏–Ω—É—Ç (00, 05, 10, 15, 20...)
            dt = datetime.fromtimestamp(timestamp_ms / 1000, tz=timezone.utc)
            rounded_minute = (dt.minute // 5) * 5
            start_time = dt.replace(minute=rounded_minute, second=0, microsecond=0)
            return int(start_time.timestamp() * 1000)

        elif self.timeframe == "45m":
            # –î–ª—è 45m: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É —Å–µ—Ç–∫–∏
            return self._get_45m_grid_start_time(timestamp_ms)

        else:
            raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º: {self.timeframe}")

    def _get_45m_grid_start_time(self, timestamp_ms: int) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ 45m —Å–≤–µ—á–∏ –ø–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–µ—Ç–∫–µ"""
        dt = datetime.fromtimestamp(timestamp_ms / 1000, tz=timezone.utc)
        day_start = dt.replace(hour=0, minute=0, second=0, microsecond=0)
        minutes_from_day_start = (dt - day_start).total_seconds() / 60
        interval_index = int(minutes_from_day_start // 45)
        interval_start_minutes = interval_index * 45
        interval_start_time = day_start + timedelta(minutes=interval_start_minutes)
        return int(interval_start_time.timestamp() * 1000)

    @staticmethod
    def calculate_ema(data: pd.Series, period: int) -> pd.Series:
        """–†–∞—Å—á–µ—Ç —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π —Å–∫–æ–ª—å–∑—è—â–µ–π —Å—Ä–µ–¥–Ω–µ–π"""
        return data.ewm(span=period, adjust=False).mean()

    def calculate_macd(self, df: pd.DataFrame) -> pd.DataFrame:
        """–†–∞—Å—á–µ—Ç MACD –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞"""
        if len(df) < self.slow_period:
            return pd.DataFrame()

        result_df = df.copy()

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º EMA
        fast_ema = self.calculate_ema(df['close'], self.fast_period)
        slow_ema = self.calculate_ema(df['close'], self.slow_period)

        # MACD –ª–∏–Ω–∏—è = –±—ã—Å—Ç—Ä–∞—è EMA - –º–µ–¥–ª–µ–Ω–Ω–∞—è EMA
        result_df['macd_line'] = fast_ema - slow_ema

        # –°–∏–≥–Ω–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è = EMA –æ—Ç MACD –ª–∏–Ω–∏–∏
        result_df['signal_line'] = self.calculate_ema(result_df['macd_line'], self.signal_period)

        # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ = MACD –ª–∏–Ω–∏—è - —Å–∏–≥–Ω–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
        result_df['histogram'] = result_df['macd_line'] - result_df['signal_line']

        return result_df

    def detect_macd_signals(self, df: pd.DataFrame) -> Optional[Dict[str, Any]]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ MACD –ø—Ä–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–∏ –ª–∏–Ω–∏–π"""
        if len(df) < 2:
            return None

        current = df.iloc[-1]
        current_macd = current['macd_line']
        current_signal = current['signal_line']

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        if self.last_macd_line is None or self.last_signal_line is None:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –≤—ã—Ö–æ–¥–∏–º
            self.last_macd_line = current_macd
            self.last_signal_line = current_signal
            return None

        signal = None

        # –ü–ï–†–ï–°–ï–ß–ï–ù–ò–ï –°–ù–ò–ó–£ –í–í–ï–†–•: –±—ã—á–∏–π —Å–∏–≥–Ω–∞–ª
        if (self.last_macd_line < self.last_signal_line and
                current_macd > current_signal):

            signal = {
                'type': 'buy',
                'timeframe': self.timeframe,
                'timestamp': current['timestamp'],
                'price': current['close'],
                'macd_line': current_macd,
                'signal_line': current_signal,
                'histogram': current['histogram'],
                'crossover_type': 'bullish'
            }

        # –ü–ï–†–ï–°–ï–ß–ï–ù–ò–ï –°–í–ï–†–•–£ –í–ù–ò–ó: –º–µ–¥–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª
        elif (self.last_macd_line > self.last_signal_line and
              current_macd < current_signal):

            signal = {
                'type': 'sell',
                'timeframe': self.timeframe,
                'timestamp': current['timestamp'],
                'price': current['close'],
                'macd_line': current_macd,
                'signal_line': current_signal,
                'histogram': current['histogram'],
                'crossover_type': 'bearish'
            }

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        self.last_macd_line = current_macd
        self.last_signal_line = current_signal

        return signal

    @staticmethod
    def klines_to_dataframe(klines: List[Dict[str, Any]]) -> pd.DataFrame:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ —Å–≤–µ—á–µ–π –≤ DataFrame"""
        if not klines:
            return pd.DataFrame()

        df = pd.DataFrame(klines)
        df['datetime'] = pd.to_datetime(df['timestamp'], unit='ms', utc=True)
        df = df.sort_values('timestamp').reset_index(drop=True)
        return df

    def _build_45m_candles_from_15m(self, klines_15m: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ 45m —Å–≤–µ—á–µ–π –∏–∑ 15m –ø–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–µ—Ç–∫–µ"""
        if not klines_15m:
            return []

        klines_15m.sort(key=lambda x: x['timestamp'])
        logger.info(f"üìä –°—Ç—Ä–æ–∏–º 45m —Å–≤–µ—á–∏ –∏–∑ {len(klines_15m)} —Å–≤–µ—á–µ–π 15m")

        custom_45m_klines = []
        grouped_klines = {}

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º 15m —Å–≤–µ—á–∏ –ø–æ 45m –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º —Å–æ–≥–ª–∞—Å–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–µ—Ç–∫–µ
        for kline_15m in klines_15m:
            interval_start = self._get_45m_grid_start_time(kline_15m['timestamp'])

            if interval_start not in grouped_klines:
                grouped_klines[interval_start] = []

            grouped_klines[interval_start].append(kline_15m)

        # –°–æ–∑–¥–∞–µ–º 45m —Å–≤–µ—á–∏ —Ç–æ–ª—å–∫–æ –∏–∑ –ø–æ–ª–Ω—ã—Ö –≥—Ä—É–ø–ø (3 —Å–≤–µ—á–∏ –ø–æ 15m)
        for interval_start in sorted(grouped_klines.keys()):
            klines_group = grouped_klines[interval_start]

            if len(klines_group) == 3:
                klines_group.sort(key=lambda x: x['timestamp'])
                is_continuous = True

                for i in range(1, len(klines_group)):
                    expected_time = klines_group[i - 1]['timestamp'] + (15 * 60 * 1000)
                    if abs(klines_group[i]['timestamp'] - expected_time) > (2 * 60 * 1000):
                        is_continuous = False
                        break

                if is_continuous:
                    merged_45m = self._merge_15m_to_45m_candles(klines_group)
                    custom_45m_klines.append(merged_45m)

        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(custom_45m_klines)} –ø–æ–ª–Ω—ã—Ö 45m —Å–≤–µ—á–µ–π")
        return custom_45m_klines

    @staticmethod
    def _merge_15m_to_45m_candles(klines_15m: List[Dict[str, Any]]) -> Dict[str, Any]:
        """–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ç—Ä–µ—Ö 15m —Å–≤–µ—á–µ–π –≤ –æ–¥–Ω—É 45m —Å–≤–µ—á—É"""
        if len(klines_15m) != 3:
            raise ValueError("–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è 45m —Å–≤–µ—á–∏ –Ω—É–∂–Ω–æ —Ä–æ–≤–Ω–æ 3 —Å–≤–µ—á–∏ –ø–æ 15m")

        klines_15m.sort(key=lambda x: x['timestamp'])

        merged = {
            'timestamp': klines_15m[0]['timestamp'],
            'open': klines_15m[0]['open'],
            'high': max(k['high'] for k in klines_15m),
            'low': min(k['low'] for k in klines_15m),
            'close': klines_15m[-1]['close'],
            'volume': sum(k['volume'] for k in klines_15m),
            'close_time': klines_15m[-1]['close_time'],
            'quote_volume': sum(k.get('quote_volume', 0) for k in klines_15m),
            'trades_count': sum(k.get('trades_count', 0) for k in klines_15m)
        }

        return merged

    @staticmethod
    def _merge_1m_candles(klines_1m: List[Dict[str, Any]]) -> Dict[str, Any]:
        """–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –º–∏–Ω—É—Ç–Ω—ã—Ö —Å–≤–µ—á–µ–π –≤ –æ–¥–Ω—É —Ü–µ–ª–µ–≤—É—é —Å–≤–µ—á—É"""
        if not klines_1m:
            raise ValueError("–ù–µ—Ç —Å–≤–µ—á–µ–π –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è")

        klines_1m.sort(key=lambda x: x['timestamp'])

        merged = {
            'timestamp': klines_1m[0]['timestamp'],
            'open': klines_1m[0]['open'],
            'high': max(k['high'] for k in klines_1m),
            'low': min(k['low'] for k in klines_1m),
            'close': klines_1m[-1]['close'],
            'volume': sum(k['volume'] for k in klines_1m),
            'close_time': klines_1m[-1]['close_time'],
            'quote_volume': sum(k.get('quote_volume', 0) for k in klines_1m),
            'trades_count': sum(k.get('trades_count', 0) for k in klines_1m)
        }

        return merged

    async def load_historical_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π —Ç–µ–∫—É—â–µ–π —Å–≤–µ—á–∏"""
        logger.info(f"üìà –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é {self.symbol} –¥–ª—è {self.timeframe} MACD")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        if self.timeframe == '5m':
            historical_klines = await self.binance_client.get_klines(self.symbol, '5m', self.min_history)
        elif self.timeframe == '45m':
            # –î–ª—è 45m –∏—Å–ø–æ–ª—å–∑—É–µ–º 15m –∏ —Å—Ç—Ä–æ–∏–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ
            base_limit = self.min_history * 3 + 50
            base_klines_15m = await self.binance_client.get_klines(self.symbol, '15m', base_limit)
            if not base_klines_15m:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å 15m –¥–∞–Ω–Ω—ã–µ –¥–ª—è 45m")
            historical_klines = self._build_45m_candles_from_15m(base_klines_15m)
        else:
            raise Exception(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º: {self.timeframe}")

        if not historical_klines:
            raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {self.timeframe}")

        self.target_klines = historical_klines

        if len(self.target_klines) < self.min_history:
            logger.warning(
                f"‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–æ {len(self.target_klines)} {self.timeframe} —Å–≤–µ—á–µ–π, –º–µ–Ω—å—à–µ —Ç—Ä–µ–±—É–µ–º—ã—Ö {self.min_history}")

        # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–π —Å–≤–µ—á–∏
        await self._initialize_current_candle_correctly()

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ DataFrame –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º MACD
        self.df = self.klines_to_dataframe(self.target_klines)
        self.df = self.calculate_macd(self.df)

        logger.info(f"‚úÖ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {len(self.df)} —Å–≤–µ—á–µ–π {self.timeframe}")

    async def _initialize_current_candle_correctly(self):
        """–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–π —Å–≤–µ—á–∏ —Å —Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞–ø—Ä–æ—Å–æ–≤"""
        now_ms = int(datetime.now(timezone.utc).timestamp() * 1000)

        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ó–ê–ö–†–´–¢–û–ô –º–∏–Ω—É—Ç–Ω–æ–π —Å–≤–µ—á–∏
        current_time = datetime.fromtimestamp(now_ms / 1000, tz=timezone.utc)
        # –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–∫—Ä—ã—Ç–∞—è —Å–≤–µ—á–∞ –±—ã–ª–∞ –º–∏–Ω—É—Ç—É –Ω–∞–∑–∞–¥
        last_closed_minute = current_time.replace(second=0, microsecond=0) - timedelta(minutes=1)
        last_closed_ms = int(last_closed_minute.timestamp() * 1000)

        # –ö –∫–∞–∫–æ–º—É —Ü–µ–ª–µ–≤–æ–º—É –∏–Ω—Ç–µ—Ä–≤–∞–ª—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–∫—Ä—ã—Ç–∞—è —Å–≤–µ—á–∞
        self.current_target_start_time = self._get_target_candle_start_time(last_closed_ms)

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –ø—Ä–æ—à–ª–æ –≤ —Ç–µ–∫—É—â–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ
        candle_start_time = datetime.fromtimestamp(self.current_target_start_time / 1000, tz=timezone.utc)
        elapsed_seconds = (last_closed_minute - candle_start_time).total_seconds()
        elapsed_minutes = int(elapsed_seconds / 60) + 1  # +1 –ø–æ—Ç–æ–º—É —á—Ç–æ –≤–∫–ª—é—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–∫—Ä—ã—Ç—É—é

        interval_minutes = self._get_timeframe_minutes()

        if 0 < elapsed_minutes < interval_minutes:
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¢–û–ß–ù–û –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            logger.info(f"üîÑ –°–æ–±–∏—Ä–∞–µ–º {elapsed_minutes} –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –º–∏–Ω—É—Ç –≤ —Ç–µ–∫—É—â–µ–º {self.timeframe} –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ")
            await self._collect_missing_minutes_for_current_candle(elapsed_minutes)
        else:
            self.current_target_candle = None

    async def _collect_missing_minutes_for_current_candle(self, elapsed_minutes: int):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¢–û–ß–ù–û –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π"""
        try:
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–æ–≤–Ω–æ —Å—Ç–æ–ª—å–∫–æ, —Å–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ
            recent_1m_klines = await self.binance_client.get_klines(
                self.symbol, '1m', elapsed_minutes
            )

            if not recent_1m_klines:
                self.current_target_candle = None
                return

            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –º–∏–Ω—É—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ —Ç–µ–∫—É—â–µ–º—É –∏–Ω—Ç–µ—Ä–≤–∞–ª—É
            current_interval_minutes = []

            for kline_1m in recent_1m_klines:
                kline_start = self._get_target_candle_start_time(kline_1m['timestamp'])
                if kline_start == self.current_target_start_time:
                    current_interval_minutes.append(kline_1m)

            if current_interval_minutes:
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                current_interval_minutes.sort(key=lambda x: x['timestamp'])

                # –°—Ç—Ä–æ–∏–º —Ç–µ–∫—É—â—É—é —Å–≤–µ—á—É –∏–∑ —ç—Ç–∏—Ö –º–∏–Ω—É—Ç
                self.current_target_candle = self._merge_1m_candles(current_interval_minutes)
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
                self.current_target_candle['timestamp'] = self.current_target_start_time

                logger.info(f"‚úÖ –°–æ–±—Ä–∞–Ω–∞ —Ç–µ–∫—É—â–∞—è {self.timeframe} —Å–≤–µ—á–∞ –∏–∑ {len(current_interval_minutes)} –º–∏–Ω—É—Ç")

            else:
                self.current_target_candle = None

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –º–∏–Ω—É—Ç –¥–ª—è {self.timeframe}: {e}")
            self.current_target_candle = None

    async def kline_callback(self, kline_1m: Dict[str, Any]):
        """Callback –¥–ª—è –Ω–æ–≤—ã—Ö –º–∏–Ω—É—Ç–Ω—ã—Ö —Å–≤–µ—á–µ–π"""
        try:
            await self._process_1m_kline(kline_1m)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ kline_callback: {e}")

    async def _process_1m_kline(self, kline_1m: Dict[str, Any]):
        """–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ - —Å–Ω–∞—á–∞–ª–∞ MACD, –ø–æ—Ç–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞"""
        from ..utils.helpers import format_utc_to_msk

        self.total_candles_processed += 1
        kline_time_msk = format_utc_to_msk(kline_1m['timestamp'])

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫ –∫–∞–∫–æ–π —Ü–µ–ª–µ–≤–æ–π —Å–≤–µ—á–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è —ç—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞—è –º–∏–Ω—É—Ç–Ω–∞—è —Å–≤–µ—á–∞
        target_start_time = self._get_target_candle_start_time(kline_1m['timestamp'])

        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π —Ü–µ–ª–µ–≤–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª - –Ω–∞—á–∏–Ω–∞–µ–º –µ–≥–æ
        if self.current_target_start_time != target_start_time:
            self._start_new_target_candle(target_start_time, kline_1m)
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–ª–µ–≤—É—é —Å–≤–µ—á—É
            self._update_current_target_candle(kline_1m)

        # –°–ù–ê–ß–ê–õ–ê –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è MACD
        await self._recalculate_macd_and_check_signals_every_minute(kline_time_msk)

        # –ü–û–¢–û–ú –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª
        if self._is_last_minute_of_interval(kline_1m['timestamp']):
            await self._complete_target_candle_with_signal()
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–≤–µ—á—É –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            self.current_target_candle = None
            self.current_target_start_time = None

    def _is_last_minute_of_interval(self, timestamp_ms: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–∏–Ω—É—Ç–Ω–∞—è —Å–≤–µ—á–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤ —Ü–µ–ª–µ–≤–æ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ"""
        dt = datetime.fromtimestamp(timestamp_ms / 1000, tz=timezone.utc)

        if self.timeframe == "5m":
            # –î–ª—è 5m –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–∏–Ω—É—Ç—ã: 04, 09, 14, 19, 24, 29, 34, 39, 44, 49, 54, 59
            return dt.minute % 5 == 4

        elif self.timeframe == "45m":
            # –î–ª—è 45m –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ —Å–µ—Ç–∫–µ
            target_start = self._get_45m_grid_start_time(timestamp_ms)
            target_end = target_start + (45 * 60 * 1000)  # +45 –º–∏–Ω—É—Ç
            next_minute = timestamp_ms + (60 * 1000)  # —Å–ª–µ–¥—É—é—â–∞—è –º–∏–Ω—É—Ç–∞

            # –ï—Å–ª–∏ —Å–ª–µ–¥—É—é—â–∞—è –º–∏–Ω—É—Ç–∞ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ - –∑–Ω–∞—á–∏—Ç —Ç–µ–∫—É—â–∞—è –ø–æ—Å–ª–µ–¥–Ω—è—è
            return next_minute >= target_end

        return False

    async def _complete_target_candle_with_signal(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–≤–µ—á–∏ + —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞"""
        if self.current_target_candle is None:
            return

        from ..utils.helpers import format_utc_to_msk

        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        start_time_msk = format_utc_to_msk(self.current_target_candle['timestamp'], "%H:%M")
        end_time_ms = self.current_target_candle['timestamp'] + (self._get_timeframe_minutes() * 60 * 1000)
        end_time_msk = format_utc_to_msk(end_time_ms, "%H:%M")

        logger.info(
            f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω {self.timeframe} –∏–Ω—Ç–µ—Ä–≤–∞–ª: {start_time_msk}-{end_time_msk} –ú–°–ö, —Ü–µ–Ω–∞: {self.current_target_candle['close']}")

        # –ù–û–í–û–ï: –°—Ä–∞–∑—É –ª–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        next_start_time_ms = end_time_ms
        next_end_time_ms = next_start_time_ms + (self._get_timeframe_minutes() * 60 * 1000)
        next_start_msk = format_utc_to_msk(next_start_time_ms, "%H:%M")
        next_end_msk = format_utc_to_msk(next_end_time_ms, "%H:%M")

        logger.info(f"üÜï –ù–∞—á–∞—Ç –Ω–æ–≤—ã–π {self.timeframe} –∏–Ω—Ç–µ—Ä–≤–∞–ª: {next_start_msk}-{next_end_msk} –ú–°–ö")

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.target_klines.append(self.current_target_candle.copy())

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
        if len(self.target_klines) > self.min_history * 2:
            self.target_klines = self.target_klines[-self.min_history:]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Å–≤–µ—á–µ
        await self._check_signals_on_completed_candle()

    async def _check_signals_on_completed_candle(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Å–≤–µ—á–µ"""
        # –°–æ–∑–¥–∞–µ–º DataFrame —Ç–æ–ª—å–∫–æ –∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π
        temp_df = self.klines_to_dataframe(self.target_klines)
        temp_df = self.calculate_macd(temp_df)

        if len(temp_df) < self.slow_period:
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞–ª—ã
        signal = self.detect_macd_signals(temp_df)

        if signal:
            # –ù–ê–ô–î–ï–ù–û –ü–ï–†–ï–°–ï–ß–ï–ù–ò–ï
            logger.info(f"üéØ –ü–ï–†–ï–°–ï–ß–ï–ù–ò–ï MACD! {signal['crossover_type'].upper()} —Å–∏–≥–Ω–∞–ª {signal['type'].upper()}")
            logger.info(
                f"   üìä –¶–µ–Ω–∞: {signal['price']:.2f} | MACD: {signal['macd_line']:.6f} | Signal: {signal['signal_line']:.6f} | Hist: {signal['histogram']:.6f}")
            logger.info(f"   ‚è∞ –í—Ä–µ–º—è: {self._format_utc_to_msk(signal['timestamp'])} –ú–°–ö | TF: {self.timeframe}")

            # –í—ã–∑—ã–≤–∞–µ–º callback'–∏
            for callback in self.callbacks:
                try:
                    if asyncio.iscoroutinefunction(callback):
                        await callback(signal)
                    else:
                        callback(signal)
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ callback: {e}")

    def _start_new_target_candle(self, target_start_time: int, first_kline_1m: Dict[str, Any]):
        """–ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Å–≤–µ—á—É –ë–ï–ó –ª–æ–≥–∞ (–ª–æ–≥ —É–∂–µ –±—ã–ª –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–π)"""
        self.current_target_start_time = target_start_time
        self.current_target_candle = {
            'timestamp': target_start_time,
            'open': first_kline_1m['open'],
            'high': first_kline_1m['high'],
            'low': first_kline_1m['low'],
            'close': first_kline_1m['close'],
            'volume': first_kline_1m['volume'],
            'close_time': first_kline_1m['close_time'],
            'quote_volume': first_kline_1m.get('quote_volume', 0),
            'trades_count': first_kline_1m.get('trades_count', 0)
        }

        # –£–ë–†–ê–õ–ò –õ–û–ì - –æ–Ω —É–∂–µ –±—ã–ª –ø–æ–∫–∞–∑–∞–Ω –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞

    def _update_current_target_candle(self, kline_1m: Dict[str, Any]):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–ª–µ–≤–æ–π —Å–≤–µ—á–∏ –Ω–æ–≤–æ–π –º–∏–Ω—É—Ç–Ω–æ–π —Å–≤–µ—á–µ–π"""
        if self.current_target_candle is None:
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º OHLCV
        self.current_target_candle['high'] = max(self.current_target_candle['high'], kline_1m['high'])
        self.current_target_candle['low'] = min(self.current_target_candle['low'], kline_1m['low'])
        self.current_target_candle['close'] = kline_1m['close']
        self.current_target_candle['volume'] += kline_1m['volume']
        self.current_target_candle['close_time'] = kline_1m['close_time']
        self.current_target_candle['quote_volume'] += kline_1m.get('quote_volume', 0)
        self.current_target_candle['trades_count'] += kline_1m.get('trades_count', 0)

    async def _recalculate_macd_and_check_signals_every_minute(self, kline_time_msk: str):
        """–ü–µ—Ä–µ—Å—á–µ—Ç MACD –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –ö–ê–ñ–î–£–Æ –ú–ò–ù–£–¢–£"""
        if self.current_target_candle is None:
            return

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å —Ç–µ–∫—É—â–µ–π —Ñ–æ—Ä–º–∏—Ä—É–µ–º–æ–π —Å–≤–µ—á–æ–π
        temp_klines = self.target_klines + [self.current_target_candle]

        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—á–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
        recent_klines = temp_klines[-self.min_history:]

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ DataFrame –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º MACD
        temp_df = self.klines_to_dataframe(recent_klines)
        temp_df = self.calculate_macd(temp_df)

        if len(temp_df) < self.slow_period:
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è MACD
        current = temp_df.iloc[-1]
        current_macd = current['macd_line']
        current_signal = current['signal_line']
        current_histogram = current['histogram']
        current_price = current['close']

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞–ª—ã –ö–ê–ñ–î–£–Æ –ú–ò–ù–£–¢–£
        signal = self.detect_macd_signals(temp_df)

        if signal:
            # –ù–ê–ô–î–ï–ù–û –ü–ï–†–ï–°–ï–ß–ï–ù–ò–ï
            logger.info(f"üéØ –ü–ï–†–ï–°–ï–ß–ï–ù–ò–ï MACD! {signal['crossover_type'].upper()} —Å–∏–≥–Ω–∞–ª {signal['type'].upper()}")
            logger.info(
                f"   üìä –¶–µ–Ω–∞: {current_price:.2f} | MACD: {current_macd:.6f} | Signal: {current_signal:.6f} | Hist: {current_histogram:.6f}")
            logger.info(f"   ‚è∞ –í—Ä–µ–º—è: {kline_time_msk} –ú–°–ö | TF: {self.timeframe}")

            # –í—ã–∑—ã–≤–∞–µ–º callback'–∏
            for callback in self.callbacks:
                try:
                    if asyncio.iscoroutinefunction(callback):
                        await callback(signal)
                    else:
                        callback(signal)
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ callback: {e}")
        else:
            # –ü–ï–†–ï–°–ï–ß–ï–ù–ò–Ø –ù–ï–¢ - –ª–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
            logger.info(
                f"üìä –°–í–ï–ß–ê –ü–û–õ–£–ß–ï–ù–ê - –ó–ù–ê–ß–ï–ù–ò–Ø MACD: –¶–µ–Ω–∞: {current_price:.2f} | MACD: {current_macd:.6f} | Signal: {current_signal:.6f} | Hist: {current_histogram:.6f} | –ü–ï–†–ï–°–ï–ß–ï–ù–ò–Ø –ù–ï–¢–£")

    def _format_utc_to_msk(self, timestamp: int, format_str: str = "%H:%M:%S") -> str:
        """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏"""
        from ..utils.helpers import format_utc_to_msk
        return format_utc_to_msk(timestamp, format_str)

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞"""
        if self.is_running:
            logger.warning("MACD –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return

        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ Real-time MACD: {self.symbol} {self.timeframe}")

        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
            await self.load_historical_data()

            # –ó–∞–ø—É—Å–∫–∞–µ–º WebSocket –ø–æ—Ç–æ–∫ –¥–ª—è –º–∏–Ω—É—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            def callback_wrapper(kline: Dict[str, Any]) -> None:
                asyncio.create_task(self.kline_callback(kline))

            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –º–∏–Ω—É—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            await self.binance_client.start_kline_stream(self.symbol, '1m', callback_wrapper)
            self.stream_active = True

            self.is_running = True

            logger.info("‚úÖ Real-time MACD –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Real-time MACD: {e}")
            await self.stop()
            raise

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞"""
        if not self.is_running:
            return

        logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Real-time MACD –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞...")

        try:
            if self.stream_active:
                await self.binance_client.stop_kline_stream(self.symbol, '1m')
                self.stream_active = False

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.current_target_candle = None
            self.current_target_start_time = None
            self.last_macd_line = None
            self.last_signal_line = None

            self.is_running = False
            logger.info(f"‚úÖ MACD –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {self.total_candles_processed} –º–∏–Ω—É—Ç–Ω—ã—Ö —Å–≤–µ—á–µ–π)")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ MACD –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞: {e}")

    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        await self.stop()
        await self.binance_client.close()

    def get_current_macd_values(self) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π MACD"""
        if self.current_target_candle is None:
            return None

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º MACD –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        temp_klines = self.target_klines + [self.current_target_candle]
        temp_df = self.klines_to_dataframe(temp_klines[-self.min_history:])
        temp_df = self.calculate_macd(temp_df)

        if len(temp_df) == 0:
            return None

        current = temp_df.iloc[-1]

        return {
            'timestamp': current['timestamp'],
            'price': current['close'],
            'macd_line': current['macd_line'],
            'signal_line': current['signal_line'],
            'histogram': current['histogram'],
            'timeframe': self.timeframe,
            'is_realtime': True
        }

    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞"""
        status = {
            'symbol': self.symbol,
            'timeframe': self.timeframe,
            'is_running': self.is_running,
            'stream_active': self.stream_active,
            'target_candles_count': len(self.target_klines),
            'has_current_candle': self.current_target_candle is not None,
            'callbacks_count': len(self.callbacks),
            'total_candles_processed': self.total_candles_processed
        }

        if self.current_target_candle:
            current_time = datetime.fromtimestamp(self.current_target_candle['timestamp'] / 1000, tz=timezone.utc)
            status['current_candle_start'] = current_time.strftime('%H:%M:%S UTC')
            status['current_price'] = self.current_target_candle['close']

        return status