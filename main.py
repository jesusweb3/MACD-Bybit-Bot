# main.py
import asyncio
import signal
import sys
from typing import Optional
from src.utils.config import config
from src.utils.logger import logger
from src.utils.helpers import format_msk_time
from src.database.database import db
from src.strategy import strategy_manager


class TradingBot:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ –±–µ–∑ Telegram"""

    def __init__(self):
        self.is_running = False
        self.shutdown_requested = False

    async def startup(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        try:
            start_time_msk = format_msk_time()
            logger.info("=" * 60)
            logger.info(f"üöÄ –ó–ê–ü–£–°–ö –¢–û–†–ì–û–í–û–ì–û –ë–û–¢–ê")
            logger.info(f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {start_time_msk} –ú–°–ö")
            logger.info("=" * 60)

            # –í—ã–≤–æ–¥–∏–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            config.print_config()

            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            db.create_tables()

            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º—Å—è —Å –ë–î
            await strategy_manager.cleanup_and_sync_with_db()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –±—ã–ª–∞ –ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∑–∞–ø—É—â–µ–Ω–∞ —Ä–∞–Ω–µ–µ
            db_status = db.get_strategy_status()
            if db_status.get('is_active'):
                logger.warning("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –≤ –ë–î –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–µ—Å—Å–∏–∏")
                logger.info("üîß –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—É—é...")
                db.set_strategy_inactive("Bot restart - previous session cleanup")

            # –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            db.print_statistics()
            strategy_manager.print_status()

            logger.info("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            logger.info("üéØ –ì–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏...")

            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return False

    async def run_strategy(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π"""
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
            result = await strategy_manager.start_strategy()

            if not result['success']:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é: {result['error']}")
                return False

            logger.info("üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—è –∑–∞–ø—É—â–µ–Ω–∞! –û–∂–∏–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤...")
            self.is_running = True

            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª - –ø—Ä–æ—Å—Ç–æ –∂–¥–µ–º –ø–æ–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç
            while self.is_running and not self.shutdown_requested:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
                if not strategy_manager.is_strategy_active():
                    logger.warning("‚ö†Ô∏è –°—Ç—Ä–∞—Ç–µ–≥–∏—è –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞")
                    break

                # –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥
                await asyncio.sleep(10)

                # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                # (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –Ω–∞–ø—Ä–∏–º–µ—Ä)

            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
            return False

    async def shutdown(self, reason: str = "Normal shutdown"):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        try:
            if self.shutdown_requested:
                return

            self.shutdown_requested = True
            shutdown_time_msk = format_msk_time()

            logger.info("=" * 60)
            logger.info(f"‚èπÔ∏è –û–°–¢–ê–ù–û–í–ö–ê –¢–û–†–ì–û–í–û–ì–û –ë–û–¢–ê")
            logger.info(f"üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}")
            logger.info(f"‚è∞ –í—Ä–µ–º—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {shutdown_time_msk} –ú–°–ö")
            logger.info("=" * 60)

            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–∞
            if strategy_manager.is_strategy_active():
                logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é...")
                stop_result = await strategy_manager.stop_strategy(reason)

                if stop_result['success']:
                    logger.info(f"‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {stop_result['strategy_name']}")
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {stop_result['error']}")

            # –í—ã–≤–æ–¥–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            logger.info("üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            db.print_statistics()

            self.is_running = False
            logger.info("üëã –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")

    def setup_signal_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""

        def signal_handler(signum, frame):
            signal_name = signal.Signals(signum).name
            logger.info(f"üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signal_name}")

            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            if not self.shutdown_requested:
                asyncio.create_task(self.shutdown(f"Signal {signal_name}"))

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        signal.signal(signal.SIGINT, signal_handler)  # Ctrl+C
        signal.signal(signal.SIGTERM, signal_handler)  # kill

        logger.info("üì° –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã (Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = TradingBot()

    try:
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        bot.setup_signal_handlers()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        if not await bot.startup():
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞")
            sys.exit(1)

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        success = await bot.run_strategy()

        if not success:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
            await bot.shutdown("Strategy error")
            sys.exit(1)

        # –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ
        if not bot.shutdown_requested:
            await bot.shutdown("Strategy completed")

    except KeyboardInterrupt:
        logger.info("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω Ctrl+C")
        await bot.shutdown("Keyboard interrupt")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        await bot.shutdown(f"Critical error: {e}")
        sys.exit(1)


def run_bot():
    """–§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞"""
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üëã –í—ã—Ö–æ–¥ –ø–æ Ctrl+C")
    except Exception as e:
        logger.error(f"‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    run_bot()